// flutterVersion = '3.11.0-14.0.pre.46'
// dartVersion = '3.1.0 (build 3.1.0-149.0.dev)'
// widgetCount = 613
// apiCount = 2843
// ignore_for_file: unused_import, unnecessary_import, implementation_imports, unused_shown_name, deprecated_member_use, prefer_single_quotes, unused_element, unused_field, duplicate_import, prefer_const_constructors, invalid_use_of_visible_for_testing_member
import 'package:flutter/rendering.dart';
import 'package:flutter/gestures.dart';
import 'dart:math' as math;
import 'dart:ui' as ui;
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/physics.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter/services.dart';

import 'package:fair/fair.dart';

Widget _defaultPreviewBuilder(
    BuildContext context, Animation<double> animation, Widget child) {
  return FittedBox(
    fit: BoxFit.cover,
    child: ClipRRect(
      borderRadius: BorderRadius.circular(12 * animation.value),
      child: child,
    ),
  );
}

const double _kDefaultIndicatorRadius = 10.0;
const Color _kDefaultTabBarInactiveColor = CupertinoColors.inactiveGray;
const Color _kDefaultTabBarBorderColor = CupertinoDynamicColor.withBrightness(
  color: Color(0x4C000000),
  darkColor: Color(0x29000000),
);

const double kMinInteractiveDimensionCupertino = 44.0;
const Color _kDefaultNavBarBorderColor = Color(0x4D000000);
const Border _kDefaultNavBarBorder = Border(
  bottom: BorderSide(
    color: _kDefaultNavBarBorderColor,
    width: 0.0, // One physical pixel.
    style: BorderStyle.solid,
  ),
);
const _defaultHeroTag = "";
const double _kDefaultDiameterRatio = 1.07;
const double _kSqueeze = 1.45;
const double _defaultRefreshTriggerPullDistance = 100.0;
const double _defaultRefreshIndicatorExtent = 60.0;
var buildRefreshIndicator = CupertinoSliverRefreshControl.buildRefreshIndicator;
const CupertinoDynamicColor _kThumbColor = CupertinoDynamicColor.withBrightness(
  color: Color(0xFFFFFFFF),
  darkColor: Color(0xFF636366),
);
const EdgeInsetsGeometry _kHorizontalItemPadding =
    EdgeInsets.symmetric(vertical: 2, horizontal: 3);
const Color _kColor = Color(0xA0B71C1C);
const double _kHeight = 12.0; // height of banner
const TextStyle _kTextStyle = TextStyle(
  color: Color(0xFFFFFFFF),
  fontSize: _kHeight * 0.85,
  fontWeight: FontWeight.w900,
  height: 1.0,
);

class _DefaultHeroTag {
  const _DefaultHeroTag();
  @override
  String toString() => '<default FloatingActionButton tag>';
}

const int defaultRowsPerPage = 10;
const double _kMenuDividerHeight = 16.0;
const Duration _snackBarDisplayDuration = Duration(milliseconds: 4000);
const double kMiddleSpacing = 16.0;

double _inverseLerp(double min, double max, double t) {
  assert(min <= max);
  double value = (t - min) / (max - min);

  // If the device incorrectly reports a pressure outside of pressureMin
  // and pressureMax, we still want this recognizer to respond normally.
  if (!value.isNaN) {
    value = clampDouble(value, 0.0, 1.0);
  }
  return value;
}

const double _epsilonDefault = 1e-3;
const TextStyle _kDefaultPlaceholderStyle = TextStyle(
  fontWeight: FontWeight.w400,
  color: CupertinoColors.placeholderText,
);

// Builds a toolbar just like the default iOS toolbar, with the right color
// background and a rounded cutout with an arrow.
Widget _defaultToolbarBuilder(
    BuildContext context, Offset anchor, bool isAbove, Widget child) {
  return _CupertinoTextSelectionToolbarShape(
    anchor: anchor,
    isAbove: isAbove,
    child: DecoratedBox(
      decoration: const BoxDecoration(color: _kToolbarDividerColor),
      child: child,
    ),
  );
}

// Clips the child so that it has the shape of the default iOS text selection
// toolbar, with rounded corners and an arrow pointing at the anchor.
//
// The anchor should be in global coordinates.
class _CupertinoTextSelectionToolbarShape
    extends SingleChildRenderObjectWidget {
  const _CupertinoTextSelectionToolbarShape({
    required Offset anchor,
    required bool isAbove,
    super.child,
  })  : _anchor = anchor,
        _isAbove = isAbove;

  final Offset _anchor;

  // Whether the arrow should point down and be attached to the bottom
  // of the toolbar, or point up and be attached to the top of the toolbar.
  final bool _isAbove;

  @override
  _RenderCupertinoTextSelectionToolbarShape createRenderObject(
          BuildContext context) =>
      _RenderCupertinoTextSelectionToolbarShape(
        _anchor,
        _isAbove,
        null,
      );

  @override
  void updateRenderObject(BuildContext context,
      _RenderCupertinoTextSelectionToolbarShape renderObject) {
    renderObject
      ..anchor = _anchor
      ..isAbove = _isAbove;
  }
}

const Size _kToolbarArrowSize = Size(14.0, 7.0);

const Color _kToolbarDividerColor = Color(0xFF808080);

class _RenderCupertinoTextSelectionToolbarShape extends RenderShiftedBox {
  _RenderCupertinoTextSelectionToolbarShape(
    this._anchor,
    this._isAbove,
    RenderBox? child,
  ) : super(child);

  @override
  bool get isRepaintBoundary => true;

  Offset get anchor => _anchor;
  Offset _anchor;
  set anchor(Offset value) {
    if (value == _anchor) {
      return;
    }
    _anchor = value;
    markNeedsLayout();
  }

  bool get isAbove => _isAbove;
  bool _isAbove;
  set isAbove(bool value) {
    if (_isAbove == value) {
      return;
    }
    _isAbove = value;
    markNeedsLayout();
  }

  // The child is tall enough to have the arrow clipped out of it on both sides
  // top and bottom. Since _kToolbarHeight includes the height of one arrow, the
  // total height that the child is given is that plus one more arrow height.
  // The extra height on the opposite side of the arrow will be clipped out. By
  // using this approach, the buttons don't need any special padding that
  // depends on isAbove.
  final BoxConstraints _heightConstraint = BoxConstraints.tightFor(
    height: _kToolbarHeight + _kToolbarArrowSize.height,
  );

  @override
  void performLayout() {
    if (child == null) {
      return;
    }

    final BoxConstraints enforcedConstraint = constraints.loosen();

    child!.layout(_heightConstraint.enforce(enforcedConstraint),
        parentUsesSize: true);

    // The height of one arrow will be clipped off of the child, so adjust the
    // size and position to remove that piece from the layout.
    final BoxParentData childParentData = child!.parentData! as BoxParentData;
    childParentData.offset = Offset(
      0.0,
      _isAbove ? -_kToolbarArrowSize.height : 0.0,
    );
    size = Size(
      child!.size.width,
      child!.size.height - _kToolbarArrowSize.height,
    );
  }

  // The path is described in the toolbar's coordinate system.
  Path _clipPath() {
    final BoxParentData childParentData = child!.parentData! as BoxParentData;
    final Path rrect = Path()
      ..addRRect(
        RRect.fromRectAndRadius(
          Offset(0.0, _kToolbarArrowSize.height) &
              Size(
                child!.size.width,
                child!.size.height - _kToolbarArrowSize.height * 2,
              ),
          _kToolbarBorderRadius,
        ),
      );

    final Offset localAnchor = globalToLocal(_anchor);
    final double centerX = childParentData.offset.dx + child!.size.width / 2;
    final double arrowXOffsetFromCenter = localAnchor.dx - centerX;
    final double arrowTipX = child!.size.width / 2 + arrowXOffsetFromCenter;

    final double arrowBaseY = _isAbove
        ? child!.size.height - _kToolbarArrowSize.height
        : _kToolbarArrowSize.height;

    final double arrowTipY = _isAbove ? child!.size.height : 0;

    final Path arrow = Path()
      ..moveTo(arrowTipX, arrowTipY)
      ..lineTo(arrowTipX - _kToolbarArrowSize.width / 2, arrowBaseY)
      ..lineTo(arrowTipX + _kToolbarArrowSize.width / 2, arrowBaseY)
      ..close();

    return Path.combine(PathOperation.union, rrect, arrow);
  }

  @override
  void paint(PaintingContext context, Offset offset) {
    if (child == null) {
      return;
    }

    final BoxParentData childParentData = child!.parentData! as BoxParentData;
    _clipPathLayer.layer = context.pushClipPath(
      needsCompositing,
      offset + childParentData.offset,
      Offset.zero & child!.size,
      _clipPath(),
      (PaintingContext innerContext, Offset innerOffset) =>
          innerContext.paintChild(child!, innerOffset),
      oldLayer: _clipPathLayer.layer,
    );
  }

  final LayerHandle<ClipPathLayer> _clipPathLayer =
      LayerHandle<ClipPathLayer>();
  Paint? _debugPaint;

  @override
  void dispose() {
    _clipPathLayer.layer = null;
    super.dispose();
  }

  @override
  void debugPaintSize(PaintingContext context, Offset offset) {
    assert(() {
      if (child == null) {
        return true;
      }

      _debugPaint ??= Paint()
        ..shader = ui.Gradient.linear(
          Offset.zero,
          const Offset(10.0, 10.0),
          const <Color>[
            Color(0x00000000),
            Color(0xFFFF00FF),
            Color(0xFFFF00FF),
            Color(0x00000000)
          ],
          const <double>[0.25, 0.25, 0.75, 0.75],
          TileMode.repeated,
        )
        ..strokeWidth = 2.0
        ..style = PaintingStyle.stroke;

      final BoxParentData childParentData = child!.parentData! as BoxParentData;
      context.canvas.drawPath(
          _clipPath().shift(offset + childParentData.offset), _debugPaint!);
      return true;
    }());
  }

  @override
  bool hitTestChildren(BoxHitTestResult result, {required Offset position}) {
    // Positions outside of the clipped area of the child are not counted as
    // hits.
    final BoxParentData childParentData = child!.parentData! as BoxParentData;
    final Rect hitBox = Rect.fromLTWH(
      childParentData.offset.dx,
      childParentData.offset.dy + _kToolbarArrowSize.height,
      child!.size.width,
      child!.size.height - _kToolbarArrowSize.height * 2,
    );
    if (!hitBox.contains(position)) {
      return false;
    }

    return super.hitTestChildren(result, position: position);
  }
}

// Values extracted from https://developer.apple.com/design/resources/.
// The height of the toolbar, including the arrow.
const double _kToolbarHeight = 43.0;

// Values extracted from https://developer.apple.com/design/resources/.
const Radius _kToolbarBorderRadius = Radius.circular(8);

// Standard iOS 10 tab bar height.
const double _kTabBarHeight = 50.0;

// Used for iOS "Inset Grouped" margin, determined from SwiftUI's Forms in
// iOS 14.2 SDK.
const EdgeInsetsDirectional _kDefaultInsetGroupedRowsMargin =
    EdgeInsetsDirectional.fromSTEB(20.0, 0.0, 20.0, 10.0);

/// Default value for [thickness] if it's not specified in [CupertinoScrollbar].
const double defaultThickness = 3;

/// Default value for [thicknessWhileDragging] if it's not specified in
/// [CupertinoScrollbar].
const double defaultThicknessWhileDragging = 8.0;

/// Default value for [radius] if it's not specified in [CupertinoScrollbar].
const Radius defaultRadius = Radius.circular(1.5);

/// Default value for [radiusWhileDragging] if it's not specified in
/// [CupertinoScrollbar].
const Radius defaultRadiusWhileDragging = Radius.circular(4.0);
mixin _ScrollUnderFlexibleConfig {
  TextStyle? get collapsedTextStyle;
  TextStyle? get expandedTextStyle;
  EdgeInsetsGeometry? get collapsedTitlePadding;
  EdgeInsetsGeometry? get collapsedCenteredTitlePadding;
  EdgeInsetsGeometry? get expandedTitlePadding;
}

// Variant configuration
class _MediumScrollUnderFlexibleConfig with _ScrollUnderFlexibleConfig {
  _MediumScrollUnderFlexibleConfig(this.context);

  final BuildContext context;
  late final ThemeData _theme = Theme.of(context);
  late final ColorScheme _colors = _theme.colorScheme;
  late final TextTheme _textTheme = _theme.textTheme;

  static const double collapsedHeight = 64.0;

  @override
  TextStyle? get collapsedTextStyle =>
      _textTheme.titleLarge?.apply(color: _colors.onSurface);

  @override
  TextStyle? get expandedTextStyle =>
      _textTheme.headlineSmall?.apply(color: _colors.onSurface);

  @override
  EdgeInsetsGeometry? get collapsedTitlePadding =>
      const EdgeInsetsDirectional.fromSTEB(48, 0, 16, 0);

  @override
  EdgeInsetsGeometry? get collapsedCenteredTitlePadding =>
      const EdgeInsets.fromLTRB(16, 0, 16, 0);

  @override
  EdgeInsetsGeometry? get expandedTitlePadding =>
      const EdgeInsets.fromLTRB(16, 0, 16, 20);
}

class _LargeScrollUnderFlexibleConfig with _ScrollUnderFlexibleConfig {
  _LargeScrollUnderFlexibleConfig(this.context);

  final BuildContext context;
  late final ThemeData _theme = Theme.of(context);
  late final ColorScheme _colors = _theme.colorScheme;
  late final TextTheme _textTheme = _theme.textTheme;

  static const double collapsedHeight = 64.0;

  @override
  TextStyle? get collapsedTextStyle =>
      _textTheme.titleLarge?.apply(color: _colors.onSurface);

  @override
  TextStyle? get expandedTextStyle =>
      _textTheme.headlineMedium?.apply(color: _colors.onSurface);

  @override
  EdgeInsetsGeometry? get collapsedTitlePadding =>
      const EdgeInsetsDirectional.fromSTEB(48, 0, 16, 0);

  @override
  EdgeInsetsGeometry? get collapsedCenteredTitlePadding =>
      const EdgeInsets.fromLTRB(16, 0, 16, 0);

  @override
  EdgeInsetsGeometry? get expandedTitlePadding =>
      const EdgeInsets.fromLTRB(16, 0, 16, 28);
}

Widget _defaultFieldViewBuilder(
    BuildContext context,
    TextEditingController textEditingController,
    FocusNode focusNode,
    VoidCallback onFieldSubmitted) {
  return _AutocompleteField(
    focusNode: focusNode,
    textEditingController: textEditingController,
    onFieldSubmitted: onFieldSubmitted,
  );
}

// The default Material-style Autocomplete text field.
class _AutocompleteField extends StatelessWidget {
  const _AutocompleteField({
    required this.focusNode,
    required this.textEditingController,
    required this.onFieldSubmitted,
  });

  final FocusNode focusNode;

  final VoidCallback onFieldSubmitted;

  final TextEditingController textEditingController;

  @override
  Widget build(BuildContext context) {
    return TextFormField(
      controller: textEditingController,
      focusNode: focusNode,
      onFieldSubmitted: (String value) {
        onFieldSubmitted();
      },
    );
  }
}

/// Default stroke width.
const double defaultStrokeWidth = 2.5;
const double _kMinThumbExtent = 18.0;
const double _kScrollbarThickness = 6.0;
const Duration _kScrollbarFadeDuration = Duration(milliseconds: 300);
const Duration _kScrollbarTimeToFade = Duration(milliseconds: 600);
const Set<TargetPlatform> _kMobilePlatforms = <TargetPlatform>{
  TargetPlatform.android,
  TargetPlatform.iOS,
  TargetPlatform.fuchsia,
};

/// The default way to convert an option to a string in
/// [displayStringForOption].
///
/// Simply uses the `toString` method on the option.
String defaultStringForOption(dynamic option) {
  return option.toString();
}

const int _kColorDefault = 0xFF000000;
Widget _buildCupertinoDialogTransitions(
    BuildContext context,
    Animation<double> animation,
    Animation<double> secondaryAnimation,
    Widget child) {
  final CurvedAnimation fadeAnimation = CurvedAnimation(
    parent: animation,
    curve: Curves.easeInOut,
  );
  if (animation.status == AnimationStatus.reverse) {
    return FadeTransition(
      opacity: fadeAnimation,
      child: child,
    );
  }
  return FadeTransition(
    opacity: fadeAnimation,
    child: ScaleTransition(
      scale: animation.drive(_dialogScaleTween),
      child: child,
    ),
  );
}

const List<BoxShadow> _kSwitchBoxShadows = <BoxShadow>[
  BoxShadow(
    color: Color(0x26000000),
    offset: Offset(0, 3),
    blurRadius: 8.0,
  ),
  BoxShadow(
    color: Color(0x0F000000),
    offset: Offset(0, 3),
    blurRadius: 1.0,
  ),
];

const List<BoxShadow> _kSliderBoxShadows = <BoxShadow>[
  BoxShadow(
    color: Color(0x26000000),
    offset: Offset(0, 3),
    blurRadius: 8.0,
  ),
  BoxShadow(
    color: Color(0x29000000),
    offset: Offset(0, 1),
    blurRadius: 1.0,
  ),
  BoxShadow(
    color: Color(0x1A000000),
    offset: Offset(0, 3),
    blurRadius: 1.0,
  ),
];

const Map<TargetPlatform, PageTransitionsBuilder> _defaultBuilders =
    <TargetPlatform, PageTransitionsBuilder>{
  TargetPlatform.android: ZoomPageTransitionsBuilder(),
  TargetPlatform.iOS: CupertinoPageTransitionsBuilder(),
  TargetPlatform.macOS: CupertinoPageTransitionsBuilder(),
};

const Duration _kDefaultHighlightFadeDuration = Duration(milliseconds: 200);

// An eyeballed value for a smooth scrolling experience.
const double _kDefaultAutoScrollVelocityScalar = 7;
// The curve and initial scale values were mostly eyeballed from iOS, however
// they reuse the same animation curve that was modeled after native page
// transitions.
final Animatable<double> _dialogScaleTween = Tween<double>(begin: 1.3, end: 1.0)
    .chain(CurveTween(curve: Curves.linearToEaseOut));

// Modifier key masks.

/// No modifier keys are pressed in the [metaState] field.
///
/// Use this value if you need to decode the [metaState] field yourself, but
/// it's much easier to use [isModifierPressed] if you just want to know if
/// a modifier is pressed.
const int modifierNone = 0;
Widget _defaultTransitionsBuilder(
    BuildContext context,
    Animation<double> animation,
    Animation<double> secondaryAnimation,
    Widget child) {
  return child;
}

NavigatorState _defaultNavigatorFinder(BuildContext context) =>
    Navigator.of(context);
int _kDefaultSemanticIndexCallback(Widget _, int localIndex) => localIndex;
const BoxDecoration _kDefaultRoundedBorderDecoration = BoxDecoration(
  color: CupertinoDynamicColor.withBrightness(
    color: CupertinoColors.white,
    darkColor: CupertinoColors.black,
  ),
  border: _kDefaultRoundedBorder,
  borderRadius: BorderRadius.all(Radius.circular(5.0)),
);
// Value inspected from Xcode 11 & iOS 13.0 Simulator.
const BorderSide _kDefaultRoundedBorderSide = BorderSide(
  color: CupertinoDynamicColor.withBrightness(
    color: Color(0x33000000),
    darkColor: Color(0x33FFFFFF),
  ),
  width: 0.0,
);
const Border _kDefaultRoundedBorder = Border(
  top: _kDefaultRoundedBorderSide,
  bottom: _kDefaultRoundedBorderSide,
  left: _kDefaultRoundedBorderSide,
  right: _kDefaultRoundedBorderSide,
);

const String flutterVersion = '3.11.0-14.0.pre.46';
const String dartVersion = '3.1.0 (build 3.1.0-149.0.dev)';
const int widgetCount = 613;
const int apiCount = 2843;

/// flutterComponents
Map<String, dynamic> flutterComponents = {
  'AboutDialog': (props) => AboutDialog(
      key: props['key'],
      applicationName: props['applicationName'],
      applicationVersion: props['applicationVersion'],
      applicationIcon: props['applicationIcon'],
      applicationLegalese: props['applicationLegalese'],
      children: as<Widget>(props['children'])),
  'AboutListTile': (props) => AboutListTile(
      key: props['key'],
      icon: props['icon'],
      child: props['child'],
      applicationName: props['applicationName'],
      applicationVersion: props['applicationVersion'],
      applicationIcon: props['applicationIcon'],
      applicationLegalese: props['applicationLegalese'],
      aboutBoxChildren: as<Widget>(props['aboutBoxChildren']),
      dense: props['dense']),
  'AbsorbPointer': (props) => AbsorbPointer(
      key: props['key'],
      absorbing: props['absorbing'] ?? true,
      ignoringSemantics: props['ignoringSemantics'],
      child: props['child']),
  'AbstractNode': (props) => AbstractNode(),
  'Accumulator': (props) =>
      Accumulator((props['pa'].length > 0 ? props['pa'][0] : null) ?? 0),
  'ActionChip': (props) => ActionChip(
      key: props['key'],
      avatar: props['avatar'],
      label: props['label'],
      labelStyle: props['labelStyle'],
      labelPadding: props['labelPadding'],
      onPressed: props['onPressed'],
      pressElevation: props['pressElevation']?.toDouble(),
      tooltip: props['tooltip'],
      side: props['side'],
      shape: props['shape'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      backgroundColor: props['backgroundColor'],
      disabledColor: props['disabledColor'],
      padding: props['padding'],
      visualDensity: props['visualDensity'],
      materialTapTargetSize: props['materialTapTargetSize'],
      elevation: props['elevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      iconTheme: props['iconTheme']),
  'ActionDispatcher': (props) => const ActionDispatcher(),
  'ActionIconTheme': (props) => ActionIconTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'ActionIconTheme.of': (props) => ActionIconTheme.of(props['pa'][0]),
  'ActionIconThemeData': (props) => ActionIconThemeData(
      backButtonIconBuilder: props['backButtonIconBuilder'],
      closeButtonIconBuilder: props['closeButtonIconBuilder'],
      drawerButtonIconBuilder: props['drawerButtonIconBuilder'],
      endDrawerButtonIconBuilder: props['endDrawerButtonIconBuilder']),
  'ActionIconThemeData.lerp': (props) => ActionIconThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'ActionListener': (props) => ActionListener(
      key: props['key'],
      listener: props['listener'],
      action: props['action'],
      child: props['child']),
  'Actions': (props) => Actions(
      key: props['key'],
      dispatcher: props['dispatcher'],
      actions: props['actions'],
      child: props['child']),
  'Actions.find': (props) =>
      Actions.find<Intent>(props['pa'][0], intent: props['intent']),
  'Actions.handler': (props) =>
      Actions.handler<Intent>(props['pa'][0], props['pa'][1]),
  'Actions.invoke': (props) =>
      Actions.invoke<Intent>(props['pa'][0], props['pa'][1]),
  'Actions.maybeFind': (props) =>
      Actions.maybeFind<Intent>(props['pa'][0], intent: props['intent']),
  'Actions.maybeInvoke': (props) =>
      Actions.maybeInvoke<Intent>(props['pa'][0], props['pa'][1]),
  'Actions.of': (props) => Actions.of(props['pa'][0]),
  'ActivateIntent': (props) => const ActivateIntent(),
  'AdaptiveTextSelectionToolbar': (props) => AdaptiveTextSelectionToolbar(
      key: props['key'],
      children: as<Widget>(props['children']) ?? const [],
      anchors: props['anchors']),
  'AdaptiveTextSelectionToolbar.buttonItems': (props) =>
      AdaptiveTextSelectionToolbar.buttonItems(
          key: props['key'],
          buttonItems:
              as<ContextMenuButtonItem>(props['buttonItems']) ?? const [],
          anchors: props['anchors']),
  'AdaptiveTextSelectionToolbar.editable': (props) =>
      AdaptiveTextSelectionToolbar.editable(
          key: props['key'],
          clipboardStatus: props['clipboardStatus'],
          onCopy: props['onCopy'],
          onCut: props['onCut'],
          onPaste: props['onPaste'],
          onSelectAll: props['onSelectAll'],
          anchors: props['anchors']),
  'AdaptiveTextSelectionToolbar.editableText': (props) =>
      AdaptiveTextSelectionToolbar.editableText(
          key: props['key'], editableTextState: props['editableTextState']),
  'AdaptiveTextSelectionToolbar.getAdaptiveButtons': (props) =>
      AdaptiveTextSelectionToolbar.getAdaptiveButtons(
          props['pa'][0], props['pa'][1]),
  'AdaptiveTextSelectionToolbar.getButtonLabel': (props) =>
      AdaptiveTextSelectionToolbar.getButtonLabel(
          props['pa'][0], props['pa'][1]),
  'AdaptiveTextSelectionToolbar.selectable': (props) =>
      AdaptiveTextSelectionToolbar.selectable(
          key: props['key'],
          onCopy: props['onCopy'],
          onSelectAll: props['onSelectAll'],
          selectionGeometry: props['selectionGeometry'],
          anchors: props['anchors']),
  'AdaptiveTextSelectionToolbar.selectableRegion': (props) =>
      AdaptiveTextSelectionToolbar.selectableRegion(
          key: props['key'],
          selectableRegionState: props['selectableRegionState']),
  'AlertDialog': (props) => AlertDialog(
      key: props['key'],
      icon: props['icon'],
      iconPadding: props['iconPadding'],
      iconColor: props['iconColor'],
      title: props['title'],
      titlePadding: props['titlePadding'],
      titleTextStyle: props['titleTextStyle'],
      content: props['content'],
      contentPadding: props['contentPadding'],
      contentTextStyle: props['contentTextStyle'],
      actions: as<Widget>(props['actions']),
      actionsPadding: props['actionsPadding'],
      actionsAlignment: props['actionsAlignment'],
      actionsOverflowAlignment: props['actionsOverflowAlignment'],
      actionsOverflowDirection: props['actionsOverflowDirection'],
      actionsOverflowButtonSpacing:
          props['actionsOverflowButtonSpacing']?.toDouble(),
      buttonPadding: props['buttonPadding'],
      backgroundColor: props['backgroundColor'],
      elevation: props['elevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      semanticLabel: props['semanticLabel'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      shape: props['shape'],
      alignment: props['alignment'],
      scrollable: props['scrollable'] ?? false),
  'AlertDialog.adaptive': (props) => AlertDialog.adaptive(
      key: props['key'],
      icon: props['icon'],
      iconPadding: props['iconPadding'],
      iconColor: props['iconColor'],
      title: props['title'],
      titlePadding: props['titlePadding'],
      titleTextStyle: props['titleTextStyle'],
      content: props['content'],
      contentPadding: props['contentPadding'],
      contentTextStyle: props['contentTextStyle'],
      actions: as<Widget>(props['actions']),
      actionsPadding: props['actionsPadding'],
      actionsAlignment: props['actionsAlignment'],
      actionsOverflowAlignment: props['actionsOverflowAlignment'],
      actionsOverflowDirection: props['actionsOverflowDirection'],
      actionsOverflowButtonSpacing:
          props['actionsOverflowButtonSpacing']?.toDouble(),
      buttonPadding: props['buttonPadding'],
      backgroundColor: props['backgroundColor'],
      elevation: props['elevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      semanticLabel: props['semanticLabel'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      shape: props['shape'],
      alignment: props['alignment'],
      scrollable: props['scrollable'] ?? false,
      scrollController: props['scrollController'],
      actionScrollController: props['actionScrollController'],
      insetAnimationDuration: props['insetAnimationDuration'],
      insetAnimationCurve: props['insetAnimationCurve']),
  'Align': (props) => Align(
      key: props['key'],
      alignment: props['alignment'] ?? Alignment.center,
      widthFactor: props['widthFactor']?.toDouble(),
      heightFactor: props['heightFactor']?.toDouble(),
      child: props['child']),
  'AlignTransition': (props) => AlignTransition(
      key: props['key'],
      alignment: props['alignment'],
      child: props['child'],
      widthFactor: props['widthFactor']?.toDouble(),
      heightFactor: props['heightFactor']?.toDouble()),
  'Alignment': (props) =>
      Alignment(props['pa'][0]?.toDouble(), props['pa'][1]?.toDouble()),
  'Alignment.bottomCenter': Alignment.bottomCenter,
  'Alignment.bottomLeft': Alignment.bottomLeft,
  'Alignment.bottomRight': Alignment.bottomRight,
  'Alignment.center': Alignment.center,
  'Alignment.centerLeft': Alignment.centerLeft,
  'Alignment.centerRight': Alignment.centerRight,
  'Alignment.lerp': (props) => Alignment.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'Alignment.topCenter': Alignment.topCenter,
  'Alignment.topLeft': Alignment.topLeft,
  'Alignment.topRight': Alignment.topRight,
  'AlignmentDirectional': (props) => AlignmentDirectional(
      props['pa'][0]?.toDouble(), props['pa'][1]?.toDouble()),
  'AlignmentDirectional.bottomCenter': AlignmentDirectional.bottomCenter,
  'AlignmentDirectional.bottomEnd': AlignmentDirectional.bottomEnd,
  'AlignmentDirectional.bottomStart': AlignmentDirectional.bottomStart,
  'AlignmentDirectional.center': AlignmentDirectional.center,
  'AlignmentDirectional.centerEnd': AlignmentDirectional.centerEnd,
  'AlignmentDirectional.centerStart': AlignmentDirectional.centerStart,
  'AlignmentDirectional.lerp': (props) => AlignmentDirectional.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'AlignmentDirectional.topCenter': AlignmentDirectional.topCenter,
  'AlignmentDirectional.topEnd': AlignmentDirectional.topEnd,
  'AlignmentDirectional.topStart': AlignmentDirectional.topStart,
  'AlignmentGeometryTween': (props) =>
      AlignmentGeometryTween(begin: props['begin'], end: props['end']),
  'AlignmentTween': (props) =>
      AlignmentTween(begin: props['begin'], end: props['end']),
  'AlwaysScrollableScrollPhysics': (props) =>
      AlwaysScrollableScrollPhysics(parent: props['parent']),
  'AlwaysStoppedAnimation': (props) => AlwaysStoppedAnimation(props['pa'][0]),
  'AndroidMotionEvent': (props) => AndroidMotionEvent(
      downTime: props['downTime'],
      eventTime: props['eventTime'],
      action: props['action'],
      pointerCount: props['pointerCount'],
      pointerProperties:
          as<AndroidPointerProperties>(props['pointerProperties']) ?? const [],
      pointerCoords:
          as<AndroidPointerCoords>(props['pointerCoords']) ?? const [],
      metaState: props['metaState'],
      buttonState: props['buttonState'],
      xPrecision: props['xPrecision']?.toDouble() ?? 0,
      yPrecision: props['yPrecision']?.toDouble() ?? 0,
      deviceId: props['deviceId'],
      edgeFlags: props['edgeFlags'],
      source: props['source'],
      flags: props['flags'],
      motionEventId: props['motionEventId']),
  'AndroidOverscrollIndicator.glow': AndroidOverscrollIndicator.glow,
  'AndroidOverscrollIndicator.stretch': AndroidOverscrollIndicator.stretch,
  'AndroidOverscrollIndicator.values': AndroidOverscrollIndicator.values,
  'AndroidPointerCoords': (props) => AndroidPointerCoords(
      orientation: props['orientation']?.toDouble() ?? 0,
      pressure: props['pressure']?.toDouble() ?? 0,
      size: props['size']?.toDouble() ?? 0,
      toolMajor: props['toolMajor']?.toDouble() ?? 0,
      toolMinor: props['toolMinor']?.toDouble() ?? 0,
      touchMajor: props['touchMajor']?.toDouble() ?? 0,
      touchMinor: props['touchMinor']?.toDouble() ?? 0,
      x: props['x']?.toDouble() ?? 0,
      y: props['y']?.toDouble() ?? 0),
  'AndroidPointerProperties': (props) =>
      AndroidPointerProperties(id: props['id'], toolType: props['toolType']),
  'AndroidPointerProperties.kToolTypeEraser':
      AndroidPointerProperties.kToolTypeEraser,
  'AndroidPointerProperties.kToolTypeFinger':
      AndroidPointerProperties.kToolTypeFinger,
  'AndroidPointerProperties.kToolTypeMouse':
      AndroidPointerProperties.kToolTypeMouse,
  'AndroidPointerProperties.kToolTypeStylus':
      AndroidPointerProperties.kToolTypeStylus,
  'AndroidPointerProperties.kToolTypeUnknown':
      AndroidPointerProperties.kToolTypeUnknown,
  'AndroidView': (props) => AndroidView(
      key: props['key'],
      viewType: props['viewType'],
      onPlatformViewCreated: props['onPlatformViewCreated'],
      hitTestBehavior:
          props['hitTestBehavior'] ?? PlatformViewHitTestBehavior.opaque,
      layoutDirection: props['layoutDirection'],
      gestureRecognizers: props['gestureRecognizers'],
      creationParams: props['creationParams'],
      creationParamsCodec: props['creationParamsCodec'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'AndroidViewSurface': (props) => AndroidViewSurface(
      key: props['key'],
      controller: props['controller'],
      hitTestBehavior: props['hitTestBehavior'],
      gestureRecognizers: props['gestureRecognizers']),
  'AnimatedAlign': (props) => AnimatedAlign(
      key: props['key'],
      alignment: props['alignment'],
      child: props['child'],
      heightFactor: props['heightFactor']?.toDouble(),
      widthFactor: props['widthFactor']?.toDouble(),
      curve: props['curve'] ?? Curves.linear,
      duration: props['duration'],
      onEnd: props['onEnd']),
  'AnimatedBuilder': (props) => AnimatedBuilder(
      key: props['key'],
      animation: props['animation'],
      builder: props['builder'],
      child: props['child']),
  'AnimatedContainer': (props) => AnimatedContainer(
      key: props['key'],
      alignment: props['alignment'],
      padding: props['padding'],
      color: props['color'],
      decoration: props['decoration'],
      foregroundDecoration: props['foregroundDecoration'],
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      constraints: props['constraints'],
      margin: props['margin'],
      transform: props['transform'],
      transformAlignment: props['transformAlignment'],
      child: props['child'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      curve: props['curve'] ?? Curves.linear,
      duration: props['duration'],
      onEnd: props['onEnd']),
  'AnimatedCrossFade': (props) => AnimatedCrossFade(
      key: props['key'],
      firstChild: props['firstChild'],
      secondChild: props['secondChild'],
      firstCurve: props['firstCurve'] ?? Curves.linear,
      secondCurve: props['secondCurve'] ?? Curves.linear,
      sizeCurve: props['sizeCurve'] ?? Curves.linear,
      alignment: props['alignment'] ?? Alignment.topCenter,
      crossFadeState: props['crossFadeState'],
      duration: props['duration'],
      reverseDuration: props['reverseDuration'],
      excludeBottomFocus: props['excludeBottomFocus'] ?? true),
  'AnimatedCrossFade.defaultLayoutBuilder': (props) =>
      AnimatedCrossFade.defaultLayoutBuilder(
          props['pa'][0], props['pa'][1], props['pa'][2], props['pa'][3]),
  'AnimatedDefaultTextStyle': (props) => AnimatedDefaultTextStyle(
      key: props['key'],
      child: props['child'],
      style: props['style'],
      textAlign: props['textAlign'],
      softWrap: props['softWrap'] ?? true,
      overflow: props['overflow'] ?? TextOverflow.clip,
      maxLines: props['maxLines'],
      textWidthBasis: props['textWidthBasis'] ?? TextWidthBasis.parent,
      textHeightBehavior: props['textHeightBehavior'],
      curve: props['curve'] ?? Curves.linear,
      duration: props['duration'],
      onEnd: props['onEnd']),
  'AnimatedFractionallySizedBox': (props) => AnimatedFractionallySizedBox(
      key: props['key'],
      alignment: props['alignment'] ?? Alignment.center,
      child: props['child'],
      heightFactor: props['heightFactor']?.toDouble(),
      widthFactor: props['widthFactor']?.toDouble(),
      curve: props['curve'] ?? Curves.linear,
      duration: props['duration'],
      onEnd: props['onEnd']),
  'AnimatedGrid': (props) => AnimatedGrid(
      key: props['key'],
      itemBuilder: props['itemBuilder'],
      gridDelegate: props['gridDelegate'],
      initialItemCount: props['initialItemCount'] ?? 0,
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      primary: props['primary'],
      physics: props['physics'],
      padding: props['padding'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'AnimatedGrid.maybeOf': (props) => AnimatedGrid.maybeOf(props['pa'][0]),
  'AnimatedGrid.of': (props) => AnimatedGrid.of(props['pa'][0]),
  'AnimatedIcon': (props) => AnimatedIcon(
      key: props['key'],
      icon: props['icon'],
      progress: props['progress'],
      color: props['color'],
      size: props['size']?.toDouble(),
      semanticLabel: props['semanticLabel'],
      textDirection: props['textDirection']),
  'AnimatedList': (props) => AnimatedList(
      key: props['key'],
      itemBuilder: props['itemBuilder'],
      initialItemCount: props['initialItemCount'] ?? 0,
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      primary: props['primary'],
      physics: props['physics'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      padding: props['padding'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'AnimatedList.maybeOf': (props) => AnimatedList.maybeOf(props['pa'][0]),
  'AnimatedList.of': (props) => AnimatedList.of(props['pa'][0]),
  'AnimatedModalBarrier': (props) => AnimatedModalBarrier(
      key: props['key'],
      color: props['color'],
      dismissible: props['dismissible'] ?? true,
      semanticsLabel: props['semanticsLabel'],
      barrierSemanticsDismissible: props['barrierSemanticsDismissible'],
      onDismiss: props['onDismiss'],
      clipDetailsNotifier: props['clipDetailsNotifier'],
      semanticsOnTapHint: props['semanticsOnTapHint']),
  'AnimatedOpacity': (props) => AnimatedOpacity(
      key: props['key'],
      child: props['child'],
      opacity: props['opacity']?.toDouble() ?? 0,
      curve: props['curve'] ?? Curves.linear,
      duration: props['duration'],
      onEnd: props['onEnd'],
      alwaysIncludeSemantics: props['alwaysIncludeSemantics'] ?? false),
  'AnimatedPadding': (props) => AnimatedPadding(
      key: props['key'],
      padding: props['padding'],
      child: props['child'],
      curve: props['curve'] ?? Curves.linear,
      duration: props['duration'],
      onEnd: props['onEnd']),
  'AnimatedPhysicalModel': (props) => AnimatedPhysicalModel(
      key: props['key'],
      child: props['child'],
      shape: props['shape'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      borderRadius: props['borderRadius'] ?? BorderRadius.zero,
      elevation: props['elevation']?.toDouble() ?? 0,
      color: props['color'],
      animateColor: props['animateColor'] ?? true,
      shadowColor: props['shadowColor'],
      animateShadowColor: props['animateShadowColor'] ?? true,
      curve: props['curve'] ?? Curves.linear,
      duration: props['duration'],
      onEnd: props['onEnd']),
  'AnimatedPositioned': (props) => AnimatedPositioned(
      key: props['key'],
      child: props['child'],
      left: props['left']?.toDouble(),
      top: props['top']?.toDouble(),
      right: props['right']?.toDouble(),
      bottom: props['bottom']?.toDouble(),
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      curve: props['curve'] ?? Curves.linear,
      duration: props['duration'],
      onEnd: props['onEnd']),
  'AnimatedPositioned.fromRect': (props) => AnimatedPositioned.fromRect(
      key: props['key'],
      child: props['child'],
      rect: props['rect'],
      curve: props['curve'] ?? Curves.linear,
      duration: props['duration'],
      onEnd: props['onEnd']),
  'AnimatedPositionedDirectional': (props) => AnimatedPositionedDirectional(
      key: props['key'],
      child: props['child'],
      start: props['start']?.toDouble(),
      top: props['top']?.toDouble(),
      end: props['end']?.toDouble(),
      bottom: props['bottom']?.toDouble(),
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      curve: props['curve'] ?? Curves.linear,
      duration: props['duration'],
      onEnd: props['onEnd']),
  'AnimatedRotation': (props) => AnimatedRotation(
      key: props['key'],
      child: props['child'],
      turns: props['turns']?.toDouble() ?? 0,
      alignment: props['alignment'] ?? Alignment.center,
      filterQuality: props['filterQuality'],
      curve: props['curve'] ?? Curves.linear,
      duration: props['duration'],
      onEnd: props['onEnd']),
  'AnimatedScale': (props) => AnimatedScale(
      key: props['key'],
      child: props['child'],
      scale: props['scale']?.toDouble() ?? 0,
      alignment: props['alignment'] ?? Alignment.center,
      filterQuality: props['filterQuality'],
      curve: props['curve'] ?? Curves.linear,
      duration: props['duration'],
      onEnd: props['onEnd']),
  'AnimatedSize': (props) => AnimatedSize(
      key: props['key'],
      child: props['child'],
      alignment: props['alignment'] ?? Alignment.center,
      curve: props['curve'] ?? Curves.linear,
      duration: props['duration'],
      reverseDuration: props['reverseDuration'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'AnimatedSlide': (props) => AnimatedSlide(
      key: props['key'],
      child: props['child'],
      offset: props['offset'],
      curve: props['curve'] ?? Curves.linear,
      duration: props['duration'],
      onEnd: props['onEnd']),
  'AnimatedSwitcher': (props) => AnimatedSwitcher(
      key: props['key'],
      child: props['child'],
      duration: props['duration'],
      reverseDuration: props['reverseDuration'],
      switchInCurve: props['switchInCurve'] ?? Curves.linear,
      switchOutCurve: props['switchOutCurve'] ?? Curves.linear,
      transitionBuilder: props['transitionBuilder'] ??
          AnimatedSwitcher.defaultTransitionBuilder),
  'AnimatedSwitcher.defaultLayoutBuilder': (props) =>
      AnimatedSwitcher.defaultLayoutBuilder(props['pa'][0], props['pa'][1]),
  'AnimatedSwitcher.defaultTransitionBuilder': (props) =>
      AnimatedSwitcher.defaultTransitionBuilder(props['pa'][0], props['pa'][1]),
  'AnimatedTheme': (props) => AnimatedTheme(
      key: props['key'],
      data: props['data'],
      curve: props['curve'] ?? Curves.linear,
      duration: props['duration'] ?? kThemeAnimationDuration,
      onEnd: props['onEnd'],
      child: props['child']),
  'AnimationBehavior.normal': AnimationBehavior.normal,
  'AnimationBehavior.preserve': AnimationBehavior.preserve,
  'AnimationBehavior.values': AnimationBehavior.values,
  'AnimationController': (props) => AnimationController(
      value: props['value']?.toDouble(),
      duration: props['duration'],
      reverseDuration: props['reverseDuration'],
      debugLabel: props['debugLabel'],
      lowerBound: props['lowerBound']?.toDouble() ?? 0.0,
      upperBound: props['upperBound']?.toDouble() ?? 1.0,
      animationBehavior: props['animationBehavior'] ?? AnimationBehavior.normal,
      vsync: props['vsync']),
  'AnimationController.unbounded': (props) => AnimationController.unbounded(
      value: props['value']?.toDouble() ?? 0.0,
      duration: props['duration'],
      reverseDuration: props['reverseDuration'],
      debugLabel: props['debugLabel'],
      vsync: props['vsync'],
      animationBehavior:
          props['animationBehavior'] ?? AnimationBehavior.preserve),
  'AnimationMax': (props) => AnimationMax(props['pa'][0], props['pa'][1]),
  'AnimationMean': (props) =>
      AnimationMean(left: props['left'], right: props['right']),
  'AnimationMin': (props) => AnimationMin(props['pa'][0], props['pa'][1]),
  'AnimationStatus.completed': AnimationStatus.completed,
  'AnimationStatus.dismissed': AnimationStatus.dismissed,
  'AnimationStatus.forward': AnimationStatus.forward,
  'AnimationStatus.reverse': AnimationStatus.reverse,
  'AnimationStatus.values': AnimationStatus.values,
  'AnnotatedRegion': (props) => AnnotatedRegion<Object>(
      key: props['key'],
      child: props['child'],
      value: props['value'],
      sized: props['sized'] ?? true),
  'AnnotatedRegionLayer': (props) => AnnotatedRegionLayer<Object>(
      props['pa'][0],
      size: props['size'],
      offset: props['offset'],
      opaque: props['opaque'] ?? false),
  'AnnotationEntry': (props) => AnnotationEntry(
      annotation: props['annotation'], localPosition: props['localPosition']),
  'AnnotationResult': (props) => AnnotationResult(),
  'AnnounceSemanticsEvent': (props) => AnnounceSemanticsEvent(
      props['pa'][0], props['pa'][1],
      assertiveness: props['assertiveness'] ?? Assertiveness.polite),
  'AppBar': (props) => AppBar(
      key: props['key'],
      leading: props['leading'],
      automaticallyImplyLeading: props['automaticallyImplyLeading'] ?? true,
      title: props['title'],
      actions: as<Widget>(props['actions']),
      flexibleSpace: props['flexibleSpace'],
      bottom: props['bottom'],
      elevation: props['elevation']?.toDouble(),
      scrolledUnderElevation: props['scrolledUnderElevation']?.toDouble(),
      notificationPredicate:
          props['notificationPredicate'] ?? defaultScrollNotificationPredicate,
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      shape: props['shape'],
      backgroundColor: props['backgroundColor'],
      foregroundColor: props['foregroundColor'],
      iconTheme: props['iconTheme'],
      actionsIconTheme: props['actionsIconTheme'],
      primary: props['primary'] ?? true,
      centerTitle: props['centerTitle'],
      excludeHeaderSemantics: props['excludeHeaderSemantics'] ?? false,
      titleSpacing: props['titleSpacing']?.toDouble(),
      toolbarOpacity: props['toolbarOpacity']?.toDouble() ?? 1.0,
      bottomOpacity: props['bottomOpacity']?.toDouble() ?? 1.0,
      toolbarHeight: props['toolbarHeight']?.toDouble(),
      leadingWidth: props['leadingWidth']?.toDouble(),
      toolbarTextStyle: props['toolbarTextStyle'],
      titleTextStyle: props['titleTextStyle'],
      systemOverlayStyle: props['systemOverlayStyle'],
      forceMaterialTransparency: props['forceMaterialTransparency'] ?? false,
      clipBehavior: props['clipBehavior']),
  'AppBar.preferredHeightFor': (props) =>
      AppBar.preferredHeightFor(props['pa'][0], props['pa'][1]),
  'AppBarTheme': (props) => AppBarTheme(
      color: props['color'],
      backgroundColor: props['backgroundColor'],
      foregroundColor: props['foregroundColor'],
      elevation: props['elevation']?.toDouble(),
      scrolledUnderElevation: props['scrolledUnderElevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      shape: props['shape'],
      iconTheme: props['iconTheme'],
      actionsIconTheme: props['actionsIconTheme'],
      centerTitle: props['centerTitle'],
      titleSpacing: props['titleSpacing']?.toDouble(),
      toolbarHeight: props['toolbarHeight']?.toDouble(),
      toolbarTextStyle: props['toolbarTextStyle'],
      titleTextStyle: props['titleTextStyle'],
      systemOverlayStyle: props['systemOverlayStyle']),
  'AppBarTheme.lerp': (props) => AppBarTheme.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'AppBarTheme.of': (props) => AppBarTheme.of(props['pa'][0]),
  'AppExitResponse.cancel': AppExitResponse.cancel,
  'AppExitResponse.exit': AppExitResponse.exit,
  'AppExitResponse.values': AppExitResponse.values,
  'AppExitType.cancelable': AppExitType.cancelable,
  'AppExitType.required': AppExitType.required,
  'AppExitType.values': AppExitType.values,
  'AppLifecycleState.detached': AppLifecycleState.detached,
  'AppLifecycleState.inactive': AppLifecycleState.inactive,
  'AppLifecycleState.paused': AppLifecycleState.paused,
  'AppLifecycleState.resumed': AppLifecycleState.resumed,
  'AppLifecycleState.values': AppLifecycleState.values,
  'ApplicationSwitcherDescription': (props) => ApplicationSwitcherDescription(
      label: props['label'], primaryColor: props['primaryColor']),
  'AspectRatio': (props) => AspectRatio(
      key: props['key'],
      aspectRatio: props['aspectRatio']?.toDouble() ?? 0,
      child: props['child']),
  'Assertiveness.assertive': Assertiveness.assertive,
  'Assertiveness.polite': Assertiveness.polite,
  'Assertiveness.values': Assertiveness.values,
  'AssetBundleImageKey': (props) => AssetBundleImageKey(
      bundle: props['bundle'],
      name: props['name'],
      scale: props['scale']?.toDouble() ?? 0),
  'AssetImage': (props) => AssetImage(props['pa'][0],
      bundle: props['bundle'], package: props['package']),
  'AssetMetadata': (props) => AssetMetadata(
      key: props['key'],
      targetDevicePixelRatio: props['targetDevicePixelRatio']?.toDouble() ?? 0,
      main: props['main']),
  'AsyncSnapshot.nothing': (props) => const AsyncSnapshot.nothing(),
  'AsyncSnapshot.waiting': (props) => const AsyncSnapshot.waiting(),
  'AsyncSnapshot.withData': (props) =>
      AsyncSnapshot.withData(props['pa'][0], props['pa'][1]),
  'AsyncSnapshot.withError': (props) => AsyncSnapshot.withError(
      props['pa'][0],
      props['pa'][1],
      (props['pa'].length > 2 ? props['pa'][2] : null) ?? StackTrace.empty),
  'AttributedString': (props) => AttributedString(props['pa'][0],
      attributes: as<StringAttribute>(props['attributes']) ??
          const <StringAttribute>[]),
  'AttributedStringProperty': (props) => AttributedStringProperty(
      props['pa'][0], props['pa'][1],
      showName: props['showName'] ?? true,
      showWhenEmpty: props['showWhenEmpty'] ?? false,
      defaultValue: props['defaultValue'] ?? kNoDefaultValue,
      level: props['level'] ?? DiagnosticLevel.info,
      description: props['description']),
  'Autocomplete': (props) => Autocomplete(
      key: props['key'],
      optionsBuilder: props['optionsBuilder'],
      displayStringForOption: props['displayStringForOption'] ??
          RawAutocomplete.defaultStringForOption,
      fieldViewBuilder: props['fieldViewBuilder'] ?? _defaultFieldViewBuilder,
      onSelected: props['onSelected'],
      optionsMaxHeight: props['optionsMaxHeight']?.toDouble() ?? 200.0,
      optionsViewBuilder: props['optionsViewBuilder'],
      initialValue: props['initialValue']),
  'AutocompleteHighlightedOption': (props) => AutocompleteHighlightedOption(
      key: props['key'],
      highlightIndexNotifier: props['highlightIndexNotifier'],
      child: props['child']),
  'AutocompleteHighlightedOption.of': (props) =>
      AutocompleteHighlightedOption.of(props['pa'][0]),
  'AutocompleteNextOptionIntent': (props) =>
      const AutocompleteNextOptionIntent(),
  'AutocompletePreviousOptionIntent': (props) =>
      const AutocompletePreviousOptionIntent(),
  'AutofillConfiguration': (props) => AutofillConfiguration(
      uniqueIdentifier: props['uniqueIdentifier'],
      autofillHints: as<String>(props['autofillHints']) ?? const [],
      currentEditingValue: props['currentEditingValue'],
      hintText: props['hintText']),
  'AutofillConfiguration.disabled': AutofillConfiguration.disabled,
  'AutofillContextAction.cancel': AutofillContextAction.cancel,
  'AutofillContextAction.commit': AutofillContextAction.commit,
  'AutofillContextAction.values': AutofillContextAction.values,
  'AutofillGroup': (props) => AutofillGroup(
      key: props['key'],
      child: props['child'],
      onDisposeAction:
          props['onDisposeAction'] ?? AutofillContextAction.commit),
  'AutofillGroup.maybeOf': (props) => AutofillGroup.maybeOf(props['pa'][0]),
  'AutofillGroup.of': (props) => AutofillGroup.of(props['pa'][0]),
  'AutofillHints.addressCity': AutofillHints.addressCity,
  'AutofillHints.addressCityAndState': AutofillHints.addressCityAndState,
  'AutofillHints.addressState': AutofillHints.addressState,
  'AutofillHints.birthday': AutofillHints.birthday,
  'AutofillHints.birthdayDay': AutofillHints.birthdayDay,
  'AutofillHints.birthdayMonth': AutofillHints.birthdayMonth,
  'AutofillHints.birthdayYear': AutofillHints.birthdayYear,
  'AutofillHints.countryCode': AutofillHints.countryCode,
  'AutofillHints.countryName': AutofillHints.countryName,
  'AutofillHints.creditCardExpirationDate':
      AutofillHints.creditCardExpirationDate,
  'AutofillHints.creditCardExpirationDay':
      AutofillHints.creditCardExpirationDay,
  'AutofillHints.creditCardExpirationMonth':
      AutofillHints.creditCardExpirationMonth,
  'AutofillHints.creditCardExpirationYear':
      AutofillHints.creditCardExpirationYear,
  'AutofillHints.creditCardFamilyName': AutofillHints.creditCardFamilyName,
  'AutofillHints.creditCardGivenName': AutofillHints.creditCardGivenName,
  'AutofillHints.creditCardMiddleName': AutofillHints.creditCardMiddleName,
  'AutofillHints.creditCardName': AutofillHints.creditCardName,
  'AutofillHints.creditCardNumber': AutofillHints.creditCardNumber,
  'AutofillHints.creditCardSecurityCode': AutofillHints.creditCardSecurityCode,
  'AutofillHints.creditCardType': AutofillHints.creditCardType,
  'AutofillHints.email': AutofillHints.email,
  'AutofillHints.familyName': AutofillHints.familyName,
  'AutofillHints.fullStreetAddress': AutofillHints.fullStreetAddress,
  'AutofillHints.gender': AutofillHints.gender,
  'AutofillHints.givenName': AutofillHints.givenName,
  'AutofillHints.impp': AutofillHints.impp,
  'AutofillHints.jobTitle': AutofillHints.jobTitle,
  'AutofillHints.language': AutofillHints.language,
  'AutofillHints.location': AutofillHints.location,
  'AutofillHints.middleInitial': AutofillHints.middleInitial,
  'AutofillHints.middleName': AutofillHints.middleName,
  'AutofillHints.name': AutofillHints.name,
  'AutofillHints.namePrefix': AutofillHints.namePrefix,
  'AutofillHints.nameSuffix': AutofillHints.nameSuffix,
  'AutofillHints.newPassword': AutofillHints.newPassword,
  'AutofillHints.newUsername': AutofillHints.newUsername,
  'AutofillHints.nickname': AutofillHints.nickname,
  'AutofillHints.oneTimeCode': AutofillHints.oneTimeCode,
  'AutofillHints.organizationName': AutofillHints.organizationName,
  'AutofillHints.password': AutofillHints.password,
  'AutofillHints.photo': AutofillHints.photo,
  'AutofillHints.postalAddress': AutofillHints.postalAddress,
  'AutofillHints.postalAddressExtended': AutofillHints.postalAddressExtended,
  'AutofillHints.postalAddressExtendedPostalCode':
      AutofillHints.postalAddressExtendedPostalCode,
  'AutofillHints.postalCode': AutofillHints.postalCode,
  'AutofillHints.streetAddressLevel1': AutofillHints.streetAddressLevel1,
  'AutofillHints.streetAddressLevel2': AutofillHints.streetAddressLevel2,
  'AutofillHints.streetAddressLevel3': AutofillHints.streetAddressLevel3,
  'AutofillHints.streetAddressLevel4': AutofillHints.streetAddressLevel4,
  'AutofillHints.streetAddressLine1': AutofillHints.streetAddressLine1,
  'AutofillHints.streetAddressLine2': AutofillHints.streetAddressLine2,
  'AutofillHints.streetAddressLine3': AutofillHints.streetAddressLine3,
  'AutofillHints.sublocality': AutofillHints.sublocality,
  'AutofillHints.telephoneNumber': AutofillHints.telephoneNumber,
  'AutofillHints.telephoneNumberAreaCode':
      AutofillHints.telephoneNumberAreaCode,
  'AutofillHints.telephoneNumberCountryCode':
      AutofillHints.telephoneNumberCountryCode,
  'AutofillHints.telephoneNumberDevice': AutofillHints.telephoneNumberDevice,
  'AutofillHints.telephoneNumberExtension':
      AutofillHints.telephoneNumberExtension,
  'AutofillHints.telephoneNumberLocal': AutofillHints.telephoneNumberLocal,
  'AutofillHints.telephoneNumberLocalPrefix':
      AutofillHints.telephoneNumberLocalPrefix,
  'AutofillHints.telephoneNumberLocalSuffix':
      AutofillHints.telephoneNumberLocalSuffix,
  'AutofillHints.telephoneNumberNational':
      AutofillHints.telephoneNumberNational,
  'AutofillHints.transactionAmount': AutofillHints.transactionAmount,
  'AutofillHints.transactionCurrency': AutofillHints.transactionCurrency,
  'AutofillHints.url': AutofillHints.url,
  'AutofillHints.username': AutofillHints.username,
  'AutomaticKeepAlive': (props) =>
      AutomaticKeepAlive(key: props['key'], child: props['child']),
  'AutomaticNotchedShape': (props) => AutomaticNotchedShape(
      props['pa'][0], (props['pa'].length > 1 ? props['pa'][1] : null)),
  'AutovalidateMode.always': AutovalidateMode.always,
  'AutovalidateMode.disabled': AutovalidateMode.disabled,
  'AutovalidateMode.onUserInteraction': AutovalidateMode.onUserInteraction,
  'AutovalidateMode.values': AutovalidateMode.values,
  'Axis.horizontal': Axis.horizontal,
  'Axis.values': Axis.values,
  'Axis.vertical': Axis.vertical,
  'AxisDirection.down': AxisDirection.down,
  'AxisDirection.left': AxisDirection.left,
  'AxisDirection.right': AxisDirection.right,
  'AxisDirection.up': AxisDirection.up,
  'AxisDirection.values': AxisDirection.values,
  'BackButton': (props) => BackButton(
      key: props['key'],
      color: props['color'],
      style: props['style'],
      onPressed: props['onPressed']),
  'BackButtonIcon': (props) => BackButtonIcon(key: props['key']),
  'BackButtonListener': (props) => BackButtonListener(
      key: props['key'],
      child: props['child'],
      onBackButtonPressed: props['onBackButtonPressed']),
  'BackdropFilter': (props) => BackdropFilter(
      key: props['key'],
      filter: props['filter'],
      child: props['child'],
      blendMode: props['blendMode'] ?? BlendMode.srcOver),
  'BackdropFilterLayer': (props) => BackdropFilterLayer(
      filter: props['filter'],
      blendMode: props['blendMode'] ?? BlendMode.srcOver),
  'BackgroundIsolateBinaryMessenger': (props) =>
      BackgroundIsolateBinaryMessenger(),
  'BackgroundIsolateBinaryMessenger.instance':
      BackgroundIsolateBinaryMessenger.instance,
  'Badge': (props) => Badge(
      key: props['key'],
      backgroundColor: props['backgroundColor'],
      textColor: props['textColor'],
      smallSize: props['smallSize']?.toDouble(),
      largeSize: props['largeSize']?.toDouble(),
      textStyle: props['textStyle'],
      padding: props['padding'],
      alignment: props['alignment'],
      offset: props['offset'],
      label: props['label'],
      isLabelVisible: props['isLabelVisible'] ?? true,
      child: props['child']),
  'Badge.count': (props) => Badge.count(
      key: props['key'],
      backgroundColor: props['backgroundColor'],
      textColor: props['textColor'],
      smallSize: props['smallSize']?.toDouble(),
      largeSize: props['largeSize']?.toDouble(),
      textStyle: props['textStyle'],
      padding: props['padding'],
      alignment: props['alignment'],
      offset: props['offset'],
      count: props['count'],
      isLabelVisible: props['isLabelVisible'] ?? true,
      child: props['child']),
  'BadgeTheme': (props) =>
      BadgeTheme(key: props['key'], data: props['data'], child: props['child']),
  'BadgeTheme.of': (props) => BadgeTheme.of(props['pa'][0]),
  'BadgeThemeData': (props) => BadgeThemeData(
      backgroundColor: props['backgroundColor'],
      textColor: props['textColor'],
      smallSize: props['smallSize']?.toDouble(),
      largeSize: props['largeSize']?.toDouble(),
      textStyle: props['textStyle'],
      padding: props['padding'],
      alignment: props['alignment'],
      offset: props['offset']),
  'BadgeThemeData.lerp': (props) => BadgeThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'BallisticScrollActivity': (props) => BallisticScrollActivity(
      props['pa'][0], props['pa'][1], props['pa'][2], props['pa'][3]),
  'Banner': (props) => Banner(
      key: props['key'],
      child: props['child'],
      message: props['message'],
      textDirection: props['textDirection'],
      location: props['location'],
      layoutDirection: props['layoutDirection'],
      color: props['color'] ?? _kColor,
      textStyle: props['textStyle'] ?? _kTextStyle),
  'BannerLocation.bottomEnd': BannerLocation.bottomEnd,
  'BannerLocation.bottomStart': BannerLocation.bottomStart,
  'BannerLocation.topEnd': BannerLocation.topEnd,
  'BannerLocation.topStart': BannerLocation.topStart,
  'BannerLocation.values': BannerLocation.values,
  'BannerPainter': (props) => BannerPainter(
      message: props['message'],
      textDirection: props['textDirection'],
      location: props['location'],
      layoutDirection: props['layoutDirection'],
      color: props['color'] ?? _kColor,
      textStyle: props['textStyle'] ?? _kTextStyle),
  'Baseline': (props) => Baseline(
      key: props['key'],
      baseline: props['baseline']?.toDouble() ?? 0,
      baselineType: props['baselineType'],
      child: props['child']),
  'BasicMessageChannel': (props) => BasicMessageChannel(
      props['pa'][0], props['pa'][1],
      binaryMessenger: props['binaryMessenger']),
  'BeveledRectangleBorder': (props) => BeveledRectangleBorder(
      side: props['side'] ?? BorderSide.none,
      borderRadius: props['borderRadius'] ?? BorderRadius.zero),
  'BinaryCodec': (props) => const BinaryCodec(),
  'BitField': (props) => BitField(props['pa'][0]),
  'BitField.filled': (props) => BitField.filled(props['pa'][0], props['pa'][1]),
  'BlendMode.clear': BlendMode.clear,
  'BlendMode.color': BlendMode.color,
  'BlendMode.colorBurn': BlendMode.colorBurn,
  'BlendMode.colorDodge': BlendMode.colorDodge,
  'BlendMode.darken': BlendMode.darken,
  'BlendMode.difference': BlendMode.difference,
  'BlendMode.dst': BlendMode.dst,
  'BlendMode.dstATop': BlendMode.dstATop,
  'BlendMode.dstIn': BlendMode.dstIn,
  'BlendMode.dstOut': BlendMode.dstOut,
  'BlendMode.dstOver': BlendMode.dstOver,
  'BlendMode.exclusion': BlendMode.exclusion,
  'BlendMode.hardLight': BlendMode.hardLight,
  'BlendMode.hue': BlendMode.hue,
  'BlendMode.lighten': BlendMode.lighten,
  'BlendMode.luminosity': BlendMode.luminosity,
  'BlendMode.modulate': BlendMode.modulate,
  'BlendMode.multiply': BlendMode.multiply,
  'BlendMode.overlay': BlendMode.overlay,
  'BlendMode.plus': BlendMode.plus,
  'BlendMode.saturation': BlendMode.saturation,
  'BlendMode.screen': BlendMode.screen,
  'BlendMode.softLight': BlendMode.softLight,
  'BlendMode.src': BlendMode.src,
  'BlendMode.srcATop': BlendMode.srcATop,
  'BlendMode.srcIn': BlendMode.srcIn,
  'BlendMode.srcOut': BlendMode.srcOut,
  'BlendMode.srcOver': BlendMode.srcOver,
  'BlendMode.values': BlendMode.values,
  'BlendMode.xor': BlendMode.xor,
  'BlockSemantics': (props) => BlockSemantics(
      key: props['key'],
      blocking: props['blocking'] ?? true,
      child: props['child']),
  'BlurStyle.inner': BlurStyle.inner,
  'BlurStyle.normal': BlurStyle.normal,
  'BlurStyle.outer': BlurStyle.outer,
  'BlurStyle.solid': BlurStyle.solid,
  'BlurStyle.values': BlurStyle.values,
  'Border': (props) => Border(
      top: props['top'] ?? BorderSide.none,
      right: props['right'] ?? BorderSide.none,
      bottom: props['bottom'] ?? BorderSide.none,
      left: props['left'] ?? BorderSide.none),
  'Border.all': (props) => Border.all(
      color: props['color'] ?? const Color(0xFF000000),
      width: props['width']?.toDouble() ?? 1.0,
      style: props['style'] ?? BorderStyle.solid,
      strokeAlign:
          props['strokeAlign']?.toDouble() ?? BorderSide.strokeAlignInside),
  'Border.fromBorderSide': (props) => Border.fromBorderSide(props['pa'][0]),
  'Border.lerp': (props) =>
      Border.lerp(props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'Border.merge': (props) => Border.merge(props['pa'][0], props['pa'][1]),
  'Border.symmetric': (props) => Border.symmetric(
      vertical: props['vertical'] ?? BorderSide.none,
      horizontal: props['horizontal'] ?? BorderSide.none),
  'BorderDirectional': (props) => BorderDirectional(
      top: props['top'] ?? BorderSide.none,
      start: props['start'] ?? BorderSide.none,
      end: props['end'] ?? BorderSide.none,
      bottom: props['bottom'] ?? BorderSide.none),
  'BorderDirectional.lerp': (props) => BorderDirectional.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'BorderDirectional.merge': (props) =>
      BorderDirectional.merge(props['pa'][0], props['pa'][1]),
  'BorderRadius.all': (props) => BorderRadius.all(props['pa'][0]),
  'BorderRadius.circular': (props) =>
      BorderRadius.circular(props['pa'][0]?.toDouble()),
  'BorderRadius.horizontal': (props) => BorderRadius.horizontal(
      left: props['left'] ?? Radius.zero, right: props['right'] ?? Radius.zero),
  'BorderRadius.lerp': (props) => BorderRadius.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'BorderRadius.only': (props) => BorderRadius.only(
      topLeft: props['topLeft'] ?? Radius.zero,
      topRight: props['topRight'] ?? Radius.zero,
      bottomLeft: props['bottomLeft'] ?? Radius.zero,
      bottomRight: props['bottomRight'] ?? Radius.zero),
  'BorderRadius.vertical': (props) => BorderRadius.vertical(
      top: props['top'] ?? Radius.zero, bottom: props['bottom'] ?? Radius.zero),
  'BorderRadius.zero': BorderRadius.zero,
  'BorderRadiusDirectional.all': (props) =>
      BorderRadiusDirectional.all(props['pa'][0]),
  'BorderRadiusDirectional.circular': (props) =>
      BorderRadiusDirectional.circular(props['pa'][0]?.toDouble()),
  'BorderRadiusDirectional.horizontal': (props) =>
      BorderRadiusDirectional.horizontal(
          start: props['start'] ?? Radius.zero,
          end: props['end'] ?? Radius.zero),
  'BorderRadiusDirectional.lerp': (props) => BorderRadiusDirectional.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'BorderRadiusDirectional.only': (props) => BorderRadiusDirectional.only(
      topStart: props['topStart'] ?? Radius.zero,
      topEnd: props['topEnd'] ?? Radius.zero,
      bottomStart: props['bottomStart'] ?? Radius.zero,
      bottomEnd: props['bottomEnd'] ?? Radius.zero),
  'BorderRadiusDirectional.vertical': (props) =>
      BorderRadiusDirectional.vertical(
          top: props['top'] ?? Radius.zero,
          bottom: props['bottom'] ?? Radius.zero),
  'BorderRadiusDirectional.zero': BorderRadiusDirectional.zero,
  'BorderRadiusTween': (props) =>
      BorderRadiusTween(begin: props['begin'], end: props['end']),
  'BorderSide': (props) => BorderSide(
      color: props['color'] ?? const Color(0xFF000000),
      width: props['width']?.toDouble() ?? 1.0,
      style: props['style'] ?? BorderStyle.solid,
      strokeAlign:
          props['strokeAlign']?.toDouble() ?? BorderSide.strokeAlignInside),
  'BorderSide.canMerge': (props) =>
      BorderSide.canMerge(props['pa'][0], props['pa'][1]),
  'BorderSide.lerp': (props) => BorderSide.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'BorderSide.merge': (props) =>
      BorderSide.merge(props['pa'][0], props['pa'][1]),
  'BorderSide.none': BorderSide.none,
  'BorderSide.strokeAlignCenter': BorderSide.strokeAlignCenter,
  'BorderSide.strokeAlignInside': BorderSide.strokeAlignInside,
  'BorderSide.strokeAlignOutside': BorderSide.strokeAlignOutside,
  'BorderStyle.none': BorderStyle.none,
  'BorderStyle.solid': BorderStyle.solid,
  'BorderStyle.values': BorderStyle.values,
  'BorderTween': (props) =>
      BorderTween(begin: props['begin'], end: props['end']),
  'BottomAppBar': (props) => BottomAppBar(
      key: props['key'],
      color: props['color'],
      elevation: props['elevation']?.toDouble(),
      shape: props['shape'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      notchMargin: props['notchMargin']?.toDouble() ?? 4.0,
      child: props['child'],
      padding: props['padding'],
      surfaceTintColor: props['surfaceTintColor'],
      shadowColor: props['shadowColor'],
      height: props['height']?.toDouble()),
  'BottomAppBarTheme': (props) => BottomAppBarTheme(
      color: props['color'],
      elevation: props['elevation']?.toDouble(),
      shape: props['shape'],
      height: props['height']?.toDouble(),
      surfaceTintColor: props['surfaceTintColor'],
      shadowColor: props['shadowColor'],
      padding: props['padding']),
  'BottomAppBarTheme.lerp': (props) => BottomAppBarTheme.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'BottomAppBarTheme.of': (props) => BottomAppBarTheme.of(props['pa'][0]),
  'BottomNavigationBar': (props) => BottomNavigationBar(
      key: props['key'],
      items: as<BottomNavigationBarItem>(props['items']) ?? const [],
      onTap: props['onTap'],
      currentIndex: props['currentIndex'] ?? 0,
      elevation: props['elevation']?.toDouble(),
      type: props['type'],
      fixedColor: props['fixedColor'],
      backgroundColor: props['backgroundColor'],
      iconSize: props['iconSize']?.toDouble() ?? 24.0,
      selectedItemColor: props['selectedItemColor'],
      unselectedItemColor: props['unselectedItemColor'],
      selectedIconTheme: props['selectedIconTheme'],
      unselectedIconTheme: props['unselectedIconTheme'],
      selectedFontSize: props['selectedFontSize']?.toDouble() ?? 14.0,
      unselectedFontSize: props['unselectedFontSize']?.toDouble() ?? 12.0,
      selectedLabelStyle: props['selectedLabelStyle'],
      unselectedLabelStyle: props['unselectedLabelStyle'],
      showSelectedLabels: props['showSelectedLabels'],
      showUnselectedLabels: props['showUnselectedLabels'],
      mouseCursor: props['mouseCursor'],
      enableFeedback: props['enableFeedback'],
      landscapeLayout: props['landscapeLayout'],
      useLegacyColorScheme: props['useLegacyColorScheme'] ?? true),
  'BottomNavigationBarItem': (props) => BottomNavigationBarItem(
      icon: props['icon'],
      label: props['label'],
      activeIcon: props['activeIcon'],
      backgroundColor: props['backgroundColor'],
      tooltip: props['tooltip']),
  'BottomNavigationBarLandscapeLayout.centered':
      BottomNavigationBarLandscapeLayout.centered,
  'BottomNavigationBarLandscapeLayout.linear':
      BottomNavigationBarLandscapeLayout.linear,
  'BottomNavigationBarLandscapeLayout.spread':
      BottomNavigationBarLandscapeLayout.spread,
  'BottomNavigationBarLandscapeLayout.values':
      BottomNavigationBarLandscapeLayout.values,
  'BottomNavigationBarTheme': (props) => BottomNavigationBarTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'BottomNavigationBarTheme.of': (props) =>
      BottomNavigationBarTheme.of(props['pa'][0]),
  'BottomNavigationBarThemeData': (props) => BottomNavigationBarThemeData(
      backgroundColor: props['backgroundColor'],
      elevation: props['elevation']?.toDouble(),
      selectedIconTheme: props['selectedIconTheme'],
      unselectedIconTheme: props['unselectedIconTheme'],
      selectedItemColor: props['selectedItemColor'],
      unselectedItemColor: props['unselectedItemColor'],
      selectedLabelStyle: props['selectedLabelStyle'],
      unselectedLabelStyle: props['unselectedLabelStyle'],
      showSelectedLabels: props['showSelectedLabels'],
      showUnselectedLabels: props['showUnselectedLabels'],
      type: props['type'],
      enableFeedback: props['enableFeedback'],
      landscapeLayout: props['landscapeLayout'],
      mouseCursor: props['mouseCursor']),
  'BottomNavigationBarThemeData.lerp': (props) =>
      BottomNavigationBarThemeData.lerp(
          props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'BottomNavigationBarType.fixed': BottomNavigationBarType.fixed,
  'BottomNavigationBarType.shifting': BottomNavigationBarType.shifting,
  'BottomNavigationBarType.values': BottomNavigationBarType.values,
  'BottomSheet': (props) => BottomSheet(
      key: props['key'],
      animationController: props['animationController'],
      enableDrag: props['enableDrag'] ?? true,
      showDragHandle: props['showDragHandle'],
      dragHandleColor: props['dragHandleColor'],
      dragHandleSize: props['dragHandleSize'],
      onDragStart: props['onDragStart'],
      onDragEnd: props['onDragEnd'],
      backgroundColor: props['backgroundColor'],
      shadowColor: props['shadowColor'],
      elevation: props['elevation']?.toDouble(),
      shape: props['shape'],
      clipBehavior: props['clipBehavior'],
      constraints: props['constraints'],
      onClosing: props['onClosing'],
      builder: props['builder']),
  'BottomSheet.createAnimationController': (props) =>
      BottomSheet.createAnimationController(props['pa'][0]),
  'BottomSheetThemeData': (props) => BottomSheetThemeData(
      backgroundColor: props['backgroundColor'],
      surfaceTintColor: props['surfaceTintColor'],
      elevation: props['elevation']?.toDouble(),
      modalBackgroundColor: props['modalBackgroundColor'],
      modalBarrierColor: props['modalBarrierColor'],
      shadowColor: props['shadowColor'],
      modalElevation: props['modalElevation']?.toDouble(),
      shape: props['shape'],
      showDragHandle: props['showDragHandle'],
      dragHandleColor: props['dragHandleColor'],
      dragHandleSize: props['dragHandleSize'],
      clipBehavior: props['clipBehavior'],
      constraints: props['constraints']),
  'BottomSheetThemeData.lerp': (props) => BottomSheetThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'BouncingScrollPhysics': (props) => BouncingScrollPhysics(
      decelerationRate:
          props['decelerationRate'] ?? ScrollDecelerationRate.normal,
      parent: props['parent']),
  'BouncingScrollSimulation': (props) => BouncingScrollSimulation(
      position: props['position']?.toDouble() ?? 0,
      velocity: props['velocity']?.toDouble() ?? 0,
      leadingExtent: props['leadingExtent']?.toDouble() ?? 0,
      trailingExtent: props['trailingExtent']?.toDouble() ?? 0,
      spring: props['spring'],
      constantDeceleration: props['constantDeceleration']?.toDouble() ?? 0,
      tolerance: props['tolerance'] ?? Tolerance.defaultTolerance),
  'BouncingScrollSimulation.maxSpringTransferVelocity':
      BouncingScrollSimulation.maxSpringTransferVelocity,
  'BoundedFrictionSimulation': (props) => BoundedFrictionSimulation(
      props['pa'][0]?.toDouble(),
      props['pa'][1]?.toDouble(),
      props['pa'][2]?.toDouble(),
      props['pa'][3]?.toDouble(),
      props['pa'][4]?.toDouble()),
  'BoxConstraints': (props) => BoxConstraints(
      minWidth: props['minWidth']?.toDouble() ?? 0.0,
      maxWidth: props['maxWidth']?.toDouble() ?? double.infinity,
      minHeight: props['minHeight']?.toDouble() ?? 0.0,
      maxHeight: props['maxHeight']?.toDouble() ?? double.infinity),
  'BoxConstraints.expand': (props) => BoxConstraints.expand(
      width: props['width']?.toDouble() ?? double.infinity,
      height: props['height']?.toDouble() ?? double.infinity),
  'BoxConstraints.lerp': (props) => BoxConstraints.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'BoxConstraints.loose': (props) => BoxConstraints.loose(props['pa'][0]),
  'BoxConstraints.tight': (props) => BoxConstraints.tight(props['pa'][0]),
  'BoxConstraints.tightFor': (props) => BoxConstraints.tightFor(
      width: props['width']?.toDouble(), height: props['height']?.toDouble()),
  'BoxConstraints.tightForFinite': (props) => BoxConstraints.tightForFinite(
      width: props['width']?.toDouble() ?? double.infinity,
      height: props['height']?.toDouble() ?? double.infinity),
  'BoxConstraintsTween': (props) =>
      BoxConstraintsTween(begin: props['begin'], end: props['end']),
  'BoxDecoration': (props) => BoxDecoration(
      color: props['color'],
      image: props['image'],
      border: props['border'],
      borderRadius: props['borderRadius'],
      boxShadow: as<BoxShadow>(props['boxShadow']),
      gradient: props['gradient'],
      backgroundBlendMode: props['backgroundBlendMode'],
      shape: props['shape'] ?? BoxShape.rectangle),
  'BoxDecoration.lerp': (props) => BoxDecoration.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'BoxFit.contain': BoxFit.contain,
  'BoxFit.cover': BoxFit.cover,
  'BoxFit.fill': BoxFit.fill,
  'BoxFit.fitHeight': BoxFit.fitHeight,
  'BoxFit.fitWidth': BoxFit.fitWidth,
  'BoxFit.none': BoxFit.none,
  'BoxFit.scaleDown': BoxFit.scaleDown,
  'BoxFit.values': BoxFit.values,
  'BoxHeightStyle.includeLineSpacingBottom':
      BoxHeightStyle.includeLineSpacingBottom,
  'BoxHeightStyle.includeLineSpacingMiddle':
      BoxHeightStyle.includeLineSpacingMiddle,
  'BoxHeightStyle.includeLineSpacingTop': BoxHeightStyle.includeLineSpacingTop,
  'BoxHeightStyle.max': BoxHeightStyle.max,
  'BoxHeightStyle.strut': BoxHeightStyle.strut,
  'BoxHeightStyle.tight': BoxHeightStyle.tight,
  'BoxHeightStyle.values': BoxHeightStyle.values,
  'BoxHitTestEntry': (props) => BoxHitTestEntry(props['pa'][0], props['pa'][1]),
  'BoxHitTestResult': (props) => BoxHitTestResult(),
  'BoxHitTestResult.wrap': (props) => BoxHitTestResult.wrap(props['pa'][0]),
  'BoxParentData': (props) => BoxParentData(),
  'BoxShadow': (props) => BoxShadow(
      color: props['color'] ?? const Color(_kColorDefault),
      offset: props['offset'] ?? Offset.zero,
      blurRadius: props['blurRadius']?.toDouble() ?? 0.0,
      spreadRadius: props['spreadRadius']?.toDouble() ?? 0.0,
      blurStyle: props['blurStyle'] ?? BlurStyle.normal),
  'BoxShadow.lerp': (props) => BoxShadow.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'BoxShadow.lerpList': (props) => BoxShadow.lerpList(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'BoxShape.circle': BoxShape.circle,
  'BoxShape.rectangle': BoxShape.rectangle,
  'BoxShape.values': BoxShape.values,
  'BoxWidthStyle.max': BoxWidthStyle.max,
  'BoxWidthStyle.tight': BoxWidthStyle.tight,
  'BoxWidthStyle.values': BoxWidthStyle.values,
  'Brightness.dark': Brightness.dark,
  'Brightness.light': Brightness.light,
  'Brightness.values': Brightness.values,
  'BrowserContextMenu.disableContextMenu': (props) =>
      BrowserContextMenu.disableContextMenu(),
  'BrowserContextMenu.enableContextMenu': (props) =>
      BrowserContextMenu.enableContextMenu(),
  'BrowserContextMenu.enabled': BrowserContextMenu.enabled,
  'BuildOwner': (props) => BuildOwner(
      onBuildScheduled: props['onBuildScheduled'],
      focusManager: props['focusManager']),
  'Builder': (props) => Builder(key: props['key'], builder: props['builder']),
  'ButtonActivateIntent': (props) => const ButtonActivateIntent(),
  'ButtonBar': (props) => ButtonBar(
      key: props['key'],
      alignment: props['alignment'],
      mainAxisSize: props['mainAxisSize'],
      buttonTextTheme: props['buttonTextTheme'],
      buttonMinWidth: props['buttonMinWidth']?.toDouble(),
      buttonHeight: props['buttonHeight']?.toDouble(),
      buttonPadding: props['buttonPadding'],
      buttonAlignedDropdown: props['buttonAlignedDropdown'],
      layoutBehavior: props['layoutBehavior'],
      overflowDirection: props['overflowDirection'],
      overflowButtonSpacing: props['overflowButtonSpacing']?.toDouble(),
      children: as<Widget>(props['children']) ?? const <Widget>[]),
  'ButtonBarLayoutBehavior.constrained': ButtonBarLayoutBehavior.constrained,
  'ButtonBarLayoutBehavior.padded': ButtonBarLayoutBehavior.padded,
  'ButtonBarLayoutBehavior.values': ButtonBarLayoutBehavior.values,
  'ButtonBarTheme': (props) => ButtonBarTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'ButtonBarTheme.of': (props) => ButtonBarTheme.of(props['pa'][0]),
  'ButtonBarThemeData': (props) => ButtonBarThemeData(
      alignment: props['alignment'],
      mainAxisSize: props['mainAxisSize'],
      buttonTextTheme: props['buttonTextTheme'],
      buttonMinWidth: props['buttonMinWidth']?.toDouble(),
      buttonHeight: props['buttonHeight']?.toDouble(),
      buttonPadding: props['buttonPadding'],
      buttonAlignedDropdown: props['buttonAlignedDropdown'],
      layoutBehavior: props['layoutBehavior'],
      overflowDirection: props['overflowDirection']),
  'ButtonBarThemeData.lerp': (props) => ButtonBarThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'ButtonSegment': (props) => ButtonSegment(
      value: props['value'],
      icon: props['icon'],
      label: props['label'],
      enabled: props['enabled'] ?? true),
  'ButtonStyle': (props) => ButtonStyle(
      textStyle: props['textStyle'],
      backgroundColor: props['backgroundColor'],
      foregroundColor: props['foregroundColor'],
      overlayColor: props['overlayColor'],
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      elevation: props['elevation'],
      padding: props['padding'],
      minimumSize: props['minimumSize'],
      fixedSize: props['fixedSize'],
      maximumSize: props['maximumSize'],
      iconColor: props['iconColor'],
      iconSize: props['iconSize'],
      side: props['side'],
      shape: props['shape'],
      mouseCursor: props['mouseCursor'],
      visualDensity: props['visualDensity'],
      tapTargetSize: props['tapTargetSize'],
      animationDuration: props['animationDuration'],
      enableFeedback: props['enableFeedback'],
      alignment: props['alignment'],
      splashFactory: props['splashFactory']),
  'ButtonStyle.lerp': (props) => ButtonStyle.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'ButtonTextTheme.accent': ButtonTextTheme.accent,
  'ButtonTextTheme.normal': ButtonTextTheme.normal,
  'ButtonTextTheme.primary': ButtonTextTheme.primary,
  'ButtonTextTheme.values': ButtonTextTheme.values,
  'ButtonTheme': (props) => ButtonTheme(
      key: props['key'],
      textTheme: props['textTheme'] ?? ButtonTextTheme.normal,
      layoutBehavior: props['layoutBehavior'] ?? ButtonBarLayoutBehavior.padded,
      minWidth: props['minWidth']?.toDouble() ?? 88.0,
      height: props['height']?.toDouble() ?? 36.0,
      padding: props['padding'],
      shape: props['shape'],
      alignedDropdown: props['alignedDropdown'] ?? false,
      buttonColor: props['buttonColor'],
      disabledColor: props['disabledColor'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      highlightColor: props['highlightColor'],
      splashColor: props['splashColor'],
      colorScheme: props['colorScheme'],
      materialTapTargetSize: props['materialTapTargetSize'],
      child: props['child']),
  'ButtonTheme.fromButtonThemeData': (props) => ButtonTheme.fromButtonThemeData(
      key: props['key'], data: props['data'], child: props['child']),
  'ButtonTheme.of': (props) => ButtonTheme.of(props['pa'][0]),
  'ButtonThemeData': (props) => ButtonThemeData(
      textTheme: props['textTheme'] ?? ButtonTextTheme.normal,
      minWidth: props['minWidth']?.toDouble() ?? 88.0,
      height: props['height']?.toDouble() ?? 36.0,
      padding: props['padding'],
      shape: props['shape'],
      layoutBehavior: props['layoutBehavior'] ?? ButtonBarLayoutBehavior.padded,
      alignedDropdown: props['alignedDropdown'] ?? false,
      buttonColor: props['buttonColor'],
      disabledColor: props['disabledColor'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      highlightColor: props['highlightColor'],
      splashColor: props['splashColor'],
      colorScheme: props['colorScheme'],
      materialTapTargetSize: props['materialTapTargetSize']),
  'CacheExtentStyle.pixel': CacheExtentStyle.pixel,
  'CacheExtentStyle.values': CacheExtentStyle.values,
  'CacheExtentStyle.viewport': CacheExtentStyle.viewport,
  'CachingIterable': (props) => CachingIterable(props['pa'][0]),
  'CalendarDatePicker': (props) => CalendarDatePicker(
      key: props['key'],
      initialDate: props['initialDate'],
      firstDate: props['firstDate'],
      lastDate: props['lastDate'],
      currentDate: props['currentDate'],
      onDateChanged: props['onDateChanged'],
      onDisplayedMonthChanged: props['onDisplayedMonthChanged'],
      initialCalendarMode: props['initialCalendarMode'] ?? DatePickerMode.day,
      selectableDayPredicate: props['selectableDayPredicate']),
  'CallbackAction': (props) => CallbackAction(onInvoke: props['onInvoke']),
  'CallbackHandle.fromRawHandle': (props) =>
      CallbackHandle.fromRawHandle(props['pa'][0]),
  'CallbackShortcuts': (props) => CallbackShortcuts(
      key: props['key'], bindings: props['bindings'], child: props['child']),
  'Card': (props) => Card(
      key: props['key'],
      color: props['color'],
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      elevation: props['elevation']?.toDouble(),
      shape: props['shape'],
      borderOnForeground: props['borderOnForeground'] ?? true,
      margin: props['margin'],
      clipBehavior: props['clipBehavior'],
      child: props['child'],
      semanticContainer: props['semanticContainer'] ?? true),
  'CardTheme': (props) => CardTheme(
      clipBehavior: props['clipBehavior'],
      color: props['color'],
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      elevation: props['elevation']?.toDouble(),
      margin: props['margin'],
      shape: props['shape']),
  'CardTheme.lerp': (props) => CardTheme.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'CardTheme.of': (props) => CardTheme.of(props['pa'][0]),
  'Category': (props) => Category(props['pa'][0]),
  'CatmullRomCurve': (props) => CatmullRomCurve(props['pa'][0],
      tension: props['tension']?.toDouble() ?? 0.0),
  'CatmullRomCurve.precompute': (props) => CatmullRomCurve.precompute(
      props['pa'][0],
      tension: props['tension']?.toDouble() ?? 0.0),
  'CatmullRomCurve.validateControlPoints': (props) =>
      CatmullRomCurve.validateControlPoints(props['pa'][0],
          tension: props['tension']?.toDouble() ?? 0.0,
          reasons: as(props['reasons'])),
  'CatmullRomSpline': (props) => CatmullRomSpline(props['pa'][0],
      tension: props['tension']?.toDouble() ?? 0.0,
      startHandle: props['startHandle'],
      endHandle: props['endHandle']),
  'CatmullRomSpline.precompute': (props) => CatmullRomSpline.precompute(
      props['pa'][0],
      tension: props['tension']?.toDouble() ?? 0.0,
      startHandle: props['startHandle'],
      endHandle: props['endHandle']),
  'Center': (props) => Center(
      key: props['key'],
      widthFactor: props['widthFactor']?.toDouble(),
      heightFactor: props['heightFactor']?.toDouble(),
      child: props['child']),
  'ChangeNotifier': (props) => ChangeNotifier(),
  'ChangeNotifier.debugAssertNotDisposed': (props) =>
      ChangeNotifier.debugAssertNotDisposed(props['pa'][0]),
  'ChannelBuffers': (props) => ChannelBuffers(),
  'ChannelBuffers.kControlChannelName': ChannelBuffers.kControlChannelName,
  'ChannelBuffers.kDefaultBufferSize': ChannelBuffers.kDefaultBufferSize,
  'CharacterActivator': (props) => CharacterActivator(props['pa'][0],
      alt: props['alt'] ?? false,
      control: props['control'] ?? false,
      meta: props['meta'] ?? false,
      includeRepeats: props['includeRepeats'] ?? true),
  'CharacterBoundary': (props) => CharacterBoundary(props['pa'][0]),
  'Checkbox': (props) => Checkbox(
      key: props['key'],
      value: props['value'],
      tristate: props['tristate'] ?? false,
      onChanged: props['onChanged'],
      mouseCursor: props['mouseCursor'],
      activeColor: props['activeColor'],
      fillColor: props['fillColor'],
      checkColor: props['checkColor'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      overlayColor: props['overlayColor'],
      splashRadius: props['splashRadius']?.toDouble(),
      materialTapTargetSize: props['materialTapTargetSize'],
      visualDensity: props['visualDensity'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      shape: props['shape'],
      side: props['side'],
      isError: props['isError'] ?? false,
      semanticLabel: props['semanticLabel']),
  'Checkbox.adaptive': (props) => Checkbox.adaptive(
      key: props['key'],
      value: props['value'],
      tristate: props['tristate'] ?? false,
      onChanged: props['onChanged'],
      mouseCursor: props['mouseCursor'],
      activeColor: props['activeColor'],
      fillColor: props['fillColor'],
      checkColor: props['checkColor'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      overlayColor: props['overlayColor'],
      splashRadius: props['splashRadius']?.toDouble(),
      materialTapTargetSize: props['materialTapTargetSize'],
      visualDensity: props['visualDensity'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      shape: props['shape'],
      side: props['side'],
      isError: props['isError'] ?? false,
      semanticLabel: props['semanticLabel']),
  'Checkbox.width': Checkbox.width,
  'CheckboxListTile': (props) => CheckboxListTile(
      key: props['key'],
      value: props['value'],
      onChanged: props['onChanged'],
      mouseCursor: props['mouseCursor'],
      activeColor: props['activeColor'],
      fillColor: props['fillColor'],
      checkColor: props['checkColor'],
      hoverColor: props['hoverColor'],
      overlayColor: props['overlayColor'],
      splashRadius: props['splashRadius']?.toDouble(),
      materialTapTargetSize: props['materialTapTargetSize'],
      visualDensity: props['visualDensity'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      shape: props['shape'],
      side: props['side'],
      isError: props['isError'] ?? false,
      enabled: props['enabled'],
      tileColor: props['tileColor'],
      title: props['title'],
      subtitle: props['subtitle'],
      isThreeLine: props['isThreeLine'] ?? false,
      dense: props['dense'],
      secondary: props['secondary'],
      selected: props['selected'] ?? false,
      controlAffinity:
          props['controlAffinity'] ?? ListTileControlAffinity.platform,
      contentPadding: props['contentPadding'],
      tristate: props['tristate'] ?? false,
      checkboxShape: props['checkboxShape'],
      selectedTileColor: props['selectedTileColor'],
      onFocusChange: props['onFocusChange'],
      enableFeedback: props['enableFeedback'],
      checkboxSemanticLabel: props['checkboxSemanticLabel']),
  'CheckboxListTile.adaptive': (props) => CheckboxListTile.adaptive(
      key: props['key'],
      value: props['value'],
      onChanged: props['onChanged'],
      mouseCursor: props['mouseCursor'],
      activeColor: props['activeColor'],
      fillColor: props['fillColor'],
      checkColor: props['checkColor'],
      hoverColor: props['hoverColor'],
      overlayColor: props['overlayColor'],
      splashRadius: props['splashRadius']?.toDouble(),
      materialTapTargetSize: props['materialTapTargetSize'],
      visualDensity: props['visualDensity'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      shape: props['shape'],
      side: props['side'],
      isError: props['isError'] ?? false,
      enabled: props['enabled'],
      tileColor: props['tileColor'],
      title: props['title'],
      subtitle: props['subtitle'],
      isThreeLine: props['isThreeLine'] ?? false,
      dense: props['dense'],
      secondary: props['secondary'],
      selected: props['selected'] ?? false,
      controlAffinity:
          props['controlAffinity'] ?? ListTileControlAffinity.platform,
      contentPadding: props['contentPadding'],
      tristate: props['tristate'] ?? false,
      checkboxShape: props['checkboxShape'],
      selectedTileColor: props['selectedTileColor'],
      onFocusChange: props['onFocusChange'],
      enableFeedback: props['enableFeedback'],
      checkboxSemanticLabel: props['checkboxSemanticLabel']),
  'CheckboxMenuButton': (props) => CheckboxMenuButton(
      key: props['key'],
      value: props['value'],
      tristate: props['tristate'] ?? false,
      isError: props['isError'] ?? false,
      onChanged: props['onChanged'],
      onHover: props['onHover'],
      onFocusChange: props['onFocusChange'],
      focusNode: props['focusNode'],
      shortcut: props['shortcut'],
      style: props['style'],
      statesController: props['statesController'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      trailingIcon: props['trailingIcon'],
      closeOnActivate: props['closeOnActivate'] ?? true,
      child: props['child']),
  'CheckboxTheme': (props) => CheckboxTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'CheckboxTheme.of': (props) => CheckboxTheme.of(props['pa'][0]),
  'CheckboxThemeData': (props) => CheckboxThemeData(
      mouseCursor: props['mouseCursor'],
      fillColor: props['fillColor'],
      checkColor: props['checkColor'],
      overlayColor: props['overlayColor'],
      splashRadius: props['splashRadius']?.toDouble(),
      materialTapTargetSize: props['materialTapTargetSize'],
      visualDensity: props['visualDensity'],
      shape: props['shape'],
      side: props['side']),
  'CheckboxThemeData.lerp': (props) => CheckboxThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'CheckedModeBanner': (props) =>
      CheckedModeBanner(key: props['key'], child: props['child']),
  'CheckedPopupMenuItem': (props) => CheckedPopupMenuItem(
      key: props['key'],
      value: props['value'],
      checked: props['checked'] ?? false,
      enabled: props['enabled'] ?? true,
      padding: props['padding'],
      height: props['height']?.toDouble() ?? kMinInteractiveDimension,
      mouseCursor: props['mouseCursor'],
      child: props['child']),
  'ChildBackButtonDispatcher': (props) =>
      ChildBackButtonDispatcher(props['pa'][0]),
  'ChildSemanticsConfigurationsResultBuilder': (props) =>
      ChildSemanticsConfigurationsResultBuilder(),
  'Chip': (props) => Chip(
      key: props['key'],
      avatar: props['avatar'],
      label: props['label'],
      labelStyle: props['labelStyle'],
      labelPadding: props['labelPadding'],
      deleteIcon: props['deleteIcon'],
      onDeleted: props['onDeleted'],
      deleteIconColor: props['deleteIconColor'],
      deleteButtonTooltipMessage: props['deleteButtonTooltipMessage'],
      side: props['side'],
      shape: props['shape'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      backgroundColor: props['backgroundColor'],
      padding: props['padding'],
      visualDensity: props['visualDensity'],
      materialTapTargetSize: props['materialTapTargetSize'],
      elevation: props['elevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      iconTheme: props['iconTheme'],
      useDeleteButtonTooltip: props['useDeleteButtonTooltip'] ?? true),
  'ChipTheme': (props) =>
      ChipTheme(key: props['key'], data: props['data'], child: props['child']),
  'ChipTheme.of': (props) => ChipTheme.of(props['pa'][0]),
  'ChipThemeData': (props) => ChipThemeData(
      backgroundColor: props['backgroundColor'],
      deleteIconColor: props['deleteIconColor'],
      disabledColor: props['disabledColor'],
      selectedColor: props['selectedColor'],
      secondarySelectedColor: props['secondarySelectedColor'],
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      selectedShadowColor: props['selectedShadowColor'],
      showCheckmark: props['showCheckmark'],
      checkmarkColor: props['checkmarkColor'],
      labelPadding: props['labelPadding'],
      padding: props['padding'],
      side: props['side'],
      shape: props['shape'],
      labelStyle: props['labelStyle'],
      secondaryLabelStyle: props['secondaryLabelStyle'],
      brightness: props['brightness'],
      elevation: props['elevation']?.toDouble(),
      pressElevation: props['pressElevation']?.toDouble(),
      iconTheme: props['iconTheme']),
  'ChipThemeData.fromDefaults': (props) => ChipThemeData.fromDefaults(
      brightness: props['brightness'],
      primaryColor: props['primaryColor'],
      secondaryColor: props['secondaryColor'],
      labelStyle: props['labelStyle']),
  'ChipThemeData.lerp': (props) => ChipThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'ChoiceChip': (props) => ChoiceChip(
      key: props['key'],
      avatar: props['avatar'],
      label: props['label'],
      labelStyle: props['labelStyle'],
      labelPadding: props['labelPadding'],
      onSelected: props['onSelected'],
      pressElevation: props['pressElevation']?.toDouble(),
      selected: props['selected'],
      selectedColor: props['selectedColor'],
      disabledColor: props['disabledColor'],
      tooltip: props['tooltip'],
      side: props['side'],
      shape: props['shape'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      backgroundColor: props['backgroundColor'],
      padding: props['padding'],
      visualDensity: props['visualDensity'],
      materialTapTargetSize: props['materialTapTargetSize'],
      elevation: props['elevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      iconTheme: props['iconTheme'],
      selectedShadowColor: props['selectedShadowColor'],
      showCheckmark: props['showCheckmark'],
      checkmarkColor: props['checkmarkColor'],
      avatarBorder: props['avatarBorder'] ?? const CircleBorder()),
  'CircleAvatar': (props) => CircleAvatar(
      key: props['key'],
      child: props['child'],
      backgroundColor: props['backgroundColor'],
      backgroundImage: props['backgroundImage'],
      foregroundImage: props['foregroundImage'],
      onBackgroundImageError: props['onBackgroundImageError'],
      onForegroundImageError: props['onForegroundImageError'],
      foregroundColor: props['foregroundColor'],
      radius: props['radius']?.toDouble(),
      minRadius: props['minRadius']?.toDouble(),
      maxRadius: props['maxRadius']?.toDouble()),
  'CircleBorder': (props) => CircleBorder(
      side: props['side'] ?? BorderSide.none,
      eccentricity: props['eccentricity']?.toDouble() ?? 0.0),
  'CircularNotchedRectangle': (props) => const CircularNotchedRectangle(),
  'CircularProgressIndicator': (props) => CircularProgressIndicator(
      key: props['key'],
      value: props['value']?.toDouble(),
      backgroundColor: props['backgroundColor'],
      color: props['color'],
      valueColor: props['valueColor'],
      strokeWidth: props['strokeWidth']?.toDouble() ?? 4.0,
      strokeAlign: props['strokeAlign']?.toDouble() ?? strokeAlignCenter,
      semanticsLabel: props['semanticsLabel'],
      semanticsValue: props['semanticsValue'],
      strokeCap: props['strokeCap']),
  'CircularProgressIndicator.adaptive': (props) =>
      CircularProgressIndicator.adaptive(
          key: props['key'],
          value: props['value']?.toDouble(),
          backgroundColor: props['backgroundColor'],
          valueColor: props['valueColor'],
          strokeWidth: props['strokeWidth']?.toDouble() ?? 4.0,
          semanticsLabel: props['semanticsLabel'],
          semanticsValue: props['semanticsValue'],
          strokeCap: props['strokeCap'],
          strokeAlign: props['strokeAlign']?.toDouble() ?? strokeAlignCenter),
  'CircularProgressIndicator.strokeAlignCenter':
      CircularProgressIndicator.strokeAlignCenter,
  'CircularProgressIndicator.strokeAlignInside':
      CircularProgressIndicator.strokeAlignInside,
  'CircularProgressIndicator.strokeAlignOutside':
      CircularProgressIndicator.strokeAlignOutside,
  'ClampedSimulation': (props) => ClampedSimulation(props['pa'][0],
      xMin: props['xMin']?.toDouble() ?? double.negativeInfinity,
      xMax: props['xMax']?.toDouble() ?? double.infinity,
      dxMin: props['dxMin']?.toDouble() ?? double.negativeInfinity,
      dxMax: props['dxMax']?.toDouble() ?? double.infinity),
  'ClampingScrollPhysics': (props) =>
      ClampingScrollPhysics(parent: props['parent']),
  'ClampingScrollSimulation': (props) => ClampingScrollSimulation(
      position: props['position']?.toDouble() ?? 0,
      velocity: props['velocity']?.toDouble() ?? 0,
      friction: props['friction']?.toDouble() ?? 0.015,
      tolerance: props['tolerance'] ?? Tolerance.defaultTolerance),
  'ClearSelectionEvent': (props) => const ClearSelectionEvent(),
  'Clip.antiAlias': Clip.antiAlias,
  'Clip.antiAliasWithSaveLayer': Clip.antiAliasWithSaveLayer,
  'Clip.hardEdge': Clip.hardEdge,
  'Clip.none': Clip.none,
  'Clip.values': Clip.values,
  'ClipOp.difference': ClipOp.difference,
  'ClipOp.intersect': ClipOp.intersect,
  'ClipOp.values': ClipOp.values,
  'ClipOval': (props) => ClipOval(
      key: props['key'],
      clipper: props['clipper'],
      clipBehavior: props['clipBehavior'] ?? Clip.antiAlias,
      child: props['child']),
  'ClipPath': (props) => ClipPath(
      key: props['key'],
      clipper: props['clipper'],
      clipBehavior: props['clipBehavior'] ?? Clip.antiAlias,
      child: props['child']),
  'ClipPath.shape': (props) => ClipPath.shape(
      key: props['key'],
      shape: props['shape'],
      clipBehavior: props['clipBehavior'] ?? Clip.antiAlias,
      child: props['child']),
  'ClipPathLayer': (props) => ClipPathLayer(
      clipPath: props['clipPath'],
      clipBehavior: props['clipBehavior'] ?? Clip.antiAlias),
  'ClipRRect': (props) => ClipRRect(
      key: props['key'],
      borderRadius: props['borderRadius'] ?? BorderRadius.zero,
      clipper: props['clipper'],
      clipBehavior: props['clipBehavior'] ?? Clip.antiAlias,
      child: props['child']),
  'ClipRRectLayer': (props) => ClipRRectLayer(
      clipRRect: props['clipRRect'],
      clipBehavior: props['clipBehavior'] ?? Clip.antiAlias),
  'ClipRect': (props) => ClipRect(
      key: props['key'],
      clipper: props['clipper'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      child: props['child']),
  'ClipRectLayer': (props) => ClipRectLayer(
      clipRect: props['clipRect'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'ClipboardData': (props) => ClipboardData(text: props['text']),
  'ClipboardStatus.notPasteable': ClipboardStatus.notPasteable,
  'ClipboardStatus.pasteable': ClipboardStatus.pasteable,
  'ClipboardStatus.unknown': ClipboardStatus.unknown,
  'ClipboardStatus.values': ClipboardStatus.values,
  'ClipboardStatusNotifier': (props) =>
      ClipboardStatusNotifier(value: props['value'] ?? ClipboardStatus.unknown),
  'CloseButton': (props) => CloseButton(
      key: props['key'],
      color: props['color'],
      onPressed: props['onPressed'],
      style: props['style']),
  'CloseButtonIcon': (props) => CloseButtonIcon(key: props['key']),
  'CollapseMode.none': CollapseMode.none,
  'CollapseMode.parallax': CollapseMode.parallax,
  'CollapseMode.pin': CollapseMode.pin,
  'CollapseMode.values': CollapseMode.values,
  'Color': (props) => Color(props['pa'][0]),
  'Color.alphaBlend': (props) =>
      Color.alphaBlend(props['pa'][0], props['pa'][1]),
  'Color.fromARGB': (props) => Color.fromARGB(
      props['pa'][0], props['pa'][1], props['pa'][2], props['pa'][3]),
  'Color.fromRGBO': (props) => Color.fromRGBO(props['pa'][0], props['pa'][1],
      props['pa'][2], props['pa'][3]?.toDouble()),
  'Color.getAlphaFromOpacity': (props) =>
      Color.getAlphaFromOpacity(props['pa'][0]?.toDouble()),
  'Color.lerp': (props) =>
      Color.lerp(props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'ColorFilter.linearToSrgbGamma': (props) =>
      const ColorFilter.linearToSrgbGamma(),
  'ColorFilter.matrix': (props) => ColorFilter.matrix(props['pa'][0]),
  'ColorFilter.mode': (props) =>
      ColorFilter.mode(props['pa'][0], props['pa'][1]),
  'ColorFilter.srgbToLinearGamma': (props) =>
      const ColorFilter.srgbToLinearGamma(),
  'ColorFilterLayer': (props) =>
      ColorFilterLayer(colorFilter: props['colorFilter']),
  'ColorFiltered': (props) => ColorFiltered(
      colorFilter: props['colorFilter'],
      child: props['child'],
      key: props['key']),
  'ColorProperty': (props) => ColorProperty(props['pa'][0], props['pa'][1],
      showName: props['showName'] ?? true,
      defaultValue: props['defaultValue'] ?? kNoDefaultValue,
      style: props['style'] ?? DiagnosticsTreeStyle.singleLine,
      level: props['level'] ?? DiagnosticLevel.info),
  'ColorScheme': (props) => ColorScheme(
      brightness: props['brightness'],
      primary: props['primary'],
      onPrimary: props['onPrimary'],
      primaryContainer: props['primaryContainer'],
      onPrimaryContainer: props['onPrimaryContainer'],
      secondary: props['secondary'],
      onSecondary: props['onSecondary'],
      secondaryContainer: props['secondaryContainer'],
      onSecondaryContainer: props['onSecondaryContainer'],
      tertiary: props['tertiary'],
      onTertiary: props['onTertiary'],
      tertiaryContainer: props['tertiaryContainer'],
      onTertiaryContainer: props['onTertiaryContainer'],
      error: props['error'],
      onError: props['onError'],
      errorContainer: props['errorContainer'],
      onErrorContainer: props['onErrorContainer'],
      background: props['background'],
      onBackground: props['onBackground'],
      surface: props['surface'],
      onSurface: props['onSurface'],
      surfaceVariant: props['surfaceVariant'],
      onSurfaceVariant: props['onSurfaceVariant'],
      outline: props['outline'],
      outlineVariant: props['outlineVariant'],
      shadow: props['shadow'],
      scrim: props['scrim'],
      inverseSurface: props['inverseSurface'],
      onInverseSurface: props['onInverseSurface'],
      inversePrimary: props['inversePrimary'],
      surfaceTint: props['surfaceTint']),
  'ColorScheme.dark': (props) => ColorScheme.dark(
      brightness: props['brightness'] ?? Brightness.dark,
      primary: props['primary'] ?? const Color(0xffbb86fc),
      onPrimary: props['onPrimary'] ?? Colors.black,
      primaryContainer: props['primaryContainer'],
      onPrimaryContainer: props['onPrimaryContainer'],
      secondary: props['secondary'] ?? const Color(0xff03dac6),
      onSecondary: props['onSecondary'] ?? Colors.black,
      secondaryContainer: props['secondaryContainer'],
      onSecondaryContainer: props['onSecondaryContainer'],
      tertiary: props['tertiary'],
      onTertiary: props['onTertiary'],
      tertiaryContainer: props['tertiaryContainer'],
      onTertiaryContainer: props['onTertiaryContainer'],
      error: props['error'] ?? const Color(0xffcf6679),
      onError: props['onError'] ?? Colors.black,
      errorContainer: props['errorContainer'],
      onErrorContainer: props['onErrorContainer'],
      background: props['background'] ?? const Color(0xff121212),
      onBackground: props['onBackground'] ?? Colors.white,
      surface: props['surface'] ?? const Color(0xff121212),
      onSurface: props['onSurface'] ?? Colors.white,
      surfaceVariant: props['surfaceVariant'],
      onSurfaceVariant: props['onSurfaceVariant'],
      outline: props['outline'],
      outlineVariant: props['outlineVariant'],
      shadow: props['shadow'],
      scrim: props['scrim'],
      inverseSurface: props['inverseSurface'],
      onInverseSurface: props['onInverseSurface'],
      inversePrimary: props['inversePrimary'],
      surfaceTint: props['surfaceTint']),
  'ColorScheme.fromImageProvider': (props) => ColorScheme.fromImageProvider(
      provider: props['provider'],
      brightness: props['brightness'] ?? Brightness.light,
      primary: props['primary'] ?? const Color(0xffefb7ff),
      onPrimary: props['onPrimary'] ?? Colors.black,
      primaryContainer: props['primaryContainer'],
      onPrimaryContainer: props['onPrimaryContainer'],
      secondary: props['secondary'] ?? const Color(0xff66fff9),
      onSecondary: props['onSecondary'] ?? Colors.black,
      secondaryContainer: props['secondaryContainer'],
      onSecondaryContainer: props['onSecondaryContainer'],
      tertiary: props['tertiary'],
      onTertiary: props['onTertiary'],
      tertiaryContainer: props['tertiaryContainer'],
      onTertiaryContainer: props['onTertiaryContainer'],
      error: props['error'] ?? const Color(0xff9b374d),
      onError: props['onError'] ?? Colors.black,
      errorContainer: props['errorContainer'],
      onErrorContainer: props['onErrorContainer'],
      outline: props['outline'],
      outlineVariant: props['outlineVariant'],
      background: props['background'] ?? const Color(0xff121212),
      onBackground: props['onBackground'] ?? Colors.white,
      surface: props['surface'] ?? const Color(0xff121212),
      onSurface: props['onSurface'] ?? Colors.white,
      surfaceVariant: props['surfaceVariant'],
      onSurfaceVariant: props['onSurfaceVariant'],
      inverseSurface: props['inverseSurface'],
      onInverseSurface: props['onInverseSurface'],
      inversePrimary: props['inversePrimary'],
      shadow: props['shadow'],
      scrim: props['scrim'],
      surfaceTint: props['surfaceTint']),
  'ColorScheme.fromSeed': (props) => ColorScheme.fromSeed(
      seedColor: props['seedColor'],
      brightness: props['brightness'] ?? Brightness.light,
      primary: props['primary'],
      onPrimary: props['onPrimary'],
      primaryContainer: props['primaryContainer'],
      onPrimaryContainer: props['onPrimaryContainer'],
      secondary: props['secondary'],
      onSecondary: props['onSecondary'],
      secondaryContainer: props['secondaryContainer'],
      onSecondaryContainer: props['onSecondaryContainer'],
      tertiary: props['tertiary'],
      onTertiary: props['onTertiary'],
      tertiaryContainer: props['tertiaryContainer'],
      onTertiaryContainer: props['onTertiaryContainer'],
      error: props['error'],
      onError: props['onError'],
      errorContainer: props['errorContainer'],
      onErrorContainer: props['onErrorContainer'],
      outline: props['outline'],
      outlineVariant: props['outlineVariant'],
      background: props['background'],
      onBackground: props['onBackground'],
      surface: props['surface'],
      onSurface: props['onSurface'],
      surfaceVariant: props['surfaceVariant'],
      onSurfaceVariant: props['onSurfaceVariant'],
      inverseSurface: props['inverseSurface'],
      onInverseSurface: props['onInverseSurface'],
      inversePrimary: props['inversePrimary'],
      shadow: props['shadow'],
      scrim: props['scrim'],
      surfaceTint: props['surfaceTint']),
  'ColorScheme.fromSwatch': (props) => ColorScheme.fromSwatch(
      primarySwatch: props['primarySwatch'] ?? Colors.blue,
      accentColor: props['accentColor'],
      cardColor: props['cardColor'],
      backgroundColor: props['backgroundColor'],
      errorColor: props['errorColor'],
      brightness: props['brightness'] ?? Brightness.light),
  'ColorScheme.highContrastDark': (props) => ColorScheme.highContrastDark(
      brightness: props['brightness'] ?? Brightness.dark,
      primary: props['primary'] ?? const Color(0xffefb7ff),
      onPrimary: props['onPrimary'] ?? Colors.black,
      primaryContainer: props['primaryContainer'],
      onPrimaryContainer: props['onPrimaryContainer'],
      secondary: props['secondary'] ?? const Color(0xff66fff9),
      onSecondary: props['onSecondary'] ?? Colors.black,
      secondaryContainer: props['secondaryContainer'],
      onSecondaryContainer: props['onSecondaryContainer'],
      tertiary: props['tertiary'],
      onTertiary: props['onTertiary'],
      tertiaryContainer: props['tertiaryContainer'],
      onTertiaryContainer: props['onTertiaryContainer'],
      error: props['error'] ?? const Color(0xff9b374d),
      onError: props['onError'] ?? Colors.black,
      errorContainer: props['errorContainer'],
      onErrorContainer: props['onErrorContainer'],
      background: props['background'] ?? const Color(0xff121212),
      onBackground: props['onBackground'] ?? Colors.white,
      surface: props['surface'] ?? const Color(0xff121212),
      onSurface: props['onSurface'] ?? Colors.white,
      surfaceVariant: props['surfaceVariant'],
      onSurfaceVariant: props['onSurfaceVariant'],
      outline: props['outline'],
      outlineVariant: props['outlineVariant'],
      shadow: props['shadow'],
      scrim: props['scrim'],
      inverseSurface: props['inverseSurface'],
      onInverseSurface: props['onInverseSurface'],
      inversePrimary: props['inversePrimary'],
      surfaceTint: props['surfaceTint']),
  'ColorScheme.highContrastLight': (props) => ColorScheme.highContrastLight(
      brightness: props['brightness'] ?? Brightness.light,
      primary: props['primary'] ?? const Color(0xff0000ba),
      onPrimary: props['onPrimary'] ?? Colors.white,
      primaryContainer: props['primaryContainer'],
      onPrimaryContainer: props['onPrimaryContainer'],
      secondary: props['secondary'] ?? const Color(0xff66fff9),
      onSecondary: props['onSecondary'] ?? Colors.black,
      secondaryContainer: props['secondaryContainer'],
      onSecondaryContainer: props['onSecondaryContainer'],
      tertiary: props['tertiary'],
      onTertiary: props['onTertiary'],
      tertiaryContainer: props['tertiaryContainer'],
      onTertiaryContainer: props['onTertiaryContainer'],
      error: props['error'] ?? const Color(0xff790000),
      onError: props['onError'] ?? Colors.white,
      errorContainer: props['errorContainer'],
      onErrorContainer: props['onErrorContainer'],
      background: props['background'] ?? Colors.white,
      onBackground: props['onBackground'] ?? Colors.black,
      surface: props['surface'] ?? Colors.white,
      onSurface: props['onSurface'] ?? Colors.black,
      surfaceVariant: props['surfaceVariant'],
      onSurfaceVariant: props['onSurfaceVariant'],
      outline: props['outline'],
      outlineVariant: props['outlineVariant'],
      shadow: props['shadow'],
      scrim: props['scrim'],
      inverseSurface: props['inverseSurface'],
      onInverseSurface: props['onInverseSurface'],
      inversePrimary: props['inversePrimary'],
      surfaceTint: props['surfaceTint']),
  'ColorScheme.lerp': (props) => ColorScheme.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'ColorScheme.light': (props) => ColorScheme.light(
      brightness: props['brightness'] ?? Brightness.light,
      primary: props['primary'] ?? const Color(0xff6200ee),
      onPrimary: props['onPrimary'] ?? Colors.white,
      primaryContainer: props['primaryContainer'],
      onPrimaryContainer: props['onPrimaryContainer'],
      secondary: props['secondary'] ?? const Color(0xff03dac6),
      onSecondary: props['onSecondary'] ?? Colors.black,
      secondaryContainer: props['secondaryContainer'],
      onSecondaryContainer: props['onSecondaryContainer'],
      tertiary: props['tertiary'],
      onTertiary: props['onTertiary'],
      tertiaryContainer: props['tertiaryContainer'],
      onTertiaryContainer: props['onTertiaryContainer'],
      error: props['error'] ?? const Color(0xffb00020),
      onError: props['onError'] ?? Colors.white,
      errorContainer: props['errorContainer'],
      onErrorContainer: props['onErrorContainer'],
      background: props['background'] ?? Colors.white,
      onBackground: props['onBackground'] ?? Colors.black,
      surface: props['surface'] ?? Colors.white,
      onSurface: props['onSurface'] ?? Colors.black,
      surfaceVariant: props['surfaceVariant'],
      onSurfaceVariant: props['onSurfaceVariant'],
      outline: props['outline'],
      outlineVariant: props['outlineVariant'],
      shadow: props['shadow'],
      scrim: props['scrim'],
      inverseSurface: props['inverseSurface'],
      onInverseSurface: props['onInverseSurface'],
      inversePrimary: props['inversePrimary'],
      surfaceTint: props['surfaceTint']),
  'ColorSpace.extendedSRGB': ColorSpace.extendedSRGB,
  'ColorSpace.sRGB': ColorSpace.sRGB,
  'ColorSpace.values': ColorSpace.values,
  'ColorSwatch': (props) => ColorSwatch(props['pa'][0], props['pa'][1]),
  'ColorSwatch.lerp': (props) => ColorSwatch.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'ColorTween': (props) => ColorTween(begin: props['begin'], end: props['end']),
  'ColoredBox': (props) => ColoredBox(
      color: props['color'], child: props['child'], key: props['key']),
  'Column': (props) => Column(
      key: props['key'],
      mainAxisAlignment: props['mainAxisAlignment'] ?? MainAxisAlignment.start,
      mainAxisSize: props['mainAxisSize'] ?? MainAxisSize.max,
      crossAxisAlignment:
          props['crossAxisAlignment'] ?? CrossAxisAlignment.center,
      textDirection: props['textDirection'],
      verticalDirection: props['verticalDirection'] ?? VerticalDirection.down,
      textBaseline: props['textBaseline'],
      children: as<Widget>(props['children']) ?? const <Widget>[]),
  'CompositedTransformFollower': (props) => CompositedTransformFollower(
      key: props['key'],
      link: props['link'],
      showWhenUnlinked: props['showWhenUnlinked'] ?? true,
      offset: props['offset'] ?? Offset.zero,
      targetAnchor: props['targetAnchor'] ?? Alignment.topLeft,
      followerAnchor: props['followerAnchor'] ?? Alignment.topLeft,
      child: props['child']),
  'CompositedTransformTarget': (props) => CompositedTransformTarget(
      key: props['key'], link: props['link'], child: props['child']),
  'ConnectionState.active': ConnectionState.active,
  'ConnectionState.done': ConnectionState.done,
  'ConnectionState.none': ConnectionState.none,
  'ConnectionState.values': ConnectionState.values,
  'ConnectionState.waiting': ConnectionState.waiting,
  'ConstantTween': (props) => ConstantTween(props['pa'][0]),
  'ConstrainedBox': (props) => ConstrainedBox(
      key: props['key'],
      constraints: props['constraints'],
      child: props['child']),
  'ConstraintsTransformBox': (props) => ConstraintsTransformBox(
      key: props['key'],
      child: props['child'],
      textDirection: props['textDirection'],
      alignment: props['alignment'] ?? Alignment.center,
      constraintsTransform: props['constraintsTransform'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      debugTransformType: props['debugTransformType'] ?? ''),
  'ConstraintsTransformBox.heightUnconstrained': (props) =>
      ConstraintsTransformBox.heightUnconstrained(props['pa'][0]),
  'ConstraintsTransformBox.maxHeightUnconstrained': (props) =>
      ConstraintsTransformBox.maxHeightUnconstrained(props['pa'][0]),
  'ConstraintsTransformBox.maxUnconstrained': (props) =>
      ConstraintsTransformBox.maxUnconstrained(props['pa'][0]),
  'ConstraintsTransformBox.maxWidthUnconstrained': (props) =>
      ConstraintsTransformBox.maxWidthUnconstrained(props['pa'][0]),
  'ConstraintsTransformBox.unconstrained': (props) =>
      ConstraintsTransformBox.unconstrained(props['pa'][0]),
  'ConstraintsTransformBox.unmodified': (props) =>
      ConstraintsTransformBox.unmodified(props['pa'][0]),
  'ConstraintsTransformBox.widthUnconstrained': (props) =>
      ConstraintsTransformBox.widthUnconstrained(props['pa'][0]),
  'Container': (props) => Container(
      key: props['key'],
      alignment: props['alignment'],
      padding: props['padding'],
      color: props['color'],
      decoration: props['decoration'],
      foregroundDecoration: props['foregroundDecoration'],
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      constraints: props['constraints'],
      margin: props['margin'],
      transform: props['transform'],
      transformAlignment: props['transformAlignment'],
      child: props['child'],
      clipBehavior: props['clipBehavior'] ?? Clip.none),
  'ContainerLayer': (props) => ContainerLayer(),
  'ContentInsertionConfiguration': (props) => ContentInsertionConfiguration(
      onContentInserted: props['onContentInserted'],
      allowedMimeTypes: as<String>(props['allowedMimeTypes']) ??
          kDefaultContentInsertionMimeTypes),
  'ContextMenuButtonItem': (props) => ContextMenuButtonItem(
      onPressed: props['onPressed'],
      type: props['type'] ?? ContextMenuButtonType.custom,
      label: props['label']),
  'ContextMenuButtonType.copy': ContextMenuButtonType.copy,
  'ContextMenuButtonType.custom': ContextMenuButtonType.custom,
  'ContextMenuButtonType.cut': ContextMenuButtonType.cut,
  'ContextMenuButtonType.delete': ContextMenuButtonType.delete,
  'ContextMenuButtonType.paste': ContextMenuButtonType.paste,
  'ContextMenuButtonType.selectAll': ContextMenuButtonType.selectAll,
  'ContextMenuButtonType.values': ContextMenuButtonType.values,
  'ContextMenuController': (props) =>
      ContextMenuController(onRemove: props['onRemove']),
  'ContextMenuController.removeAny': (props) =>
      ContextMenuController.removeAny(),
  'ContinuousRectangleBorder': (props) => ContinuousRectangleBorder(
      side: props['side'] ?? BorderSide.none,
      borderRadius: props['borderRadius'] ?? BorderRadius.zero),
  'ControlsDetails': (props) => ControlsDetails(
      currentStep: props['currentStep'],
      stepIndex: props['stepIndex'],
      onStepCancel: props['onStepCancel'],
      onStepContinue: props['onStepContinue']),
  'CopySelectionTextIntent.copy': CopySelectionTextIntent.copy,
  'CopySelectionTextIntent.cut': (props) =>
      CopySelectionTextIntent.cut(props['pa'][0]),
  'CrossAxisAlignment.baseline': CrossAxisAlignment.baseline,
  'CrossAxisAlignment.center': CrossAxisAlignment.center,
  'CrossAxisAlignment.end': CrossAxisAlignment.end,
  'CrossAxisAlignment.start': CrossAxisAlignment.start,
  'CrossAxisAlignment.stretch': CrossAxisAlignment.stretch,
  'CrossAxisAlignment.values': CrossAxisAlignment.values,
  'CrossFadeState.showFirst': CrossFadeState.showFirst,
  'CrossFadeState.showSecond': CrossFadeState.showSecond,
  'CrossFadeState.values': CrossFadeState.values,
  'Cubic': (props) => Cubic(
      props['pa'][0]?.toDouble(),
      props['pa'][1]?.toDouble(),
      props['pa'][2]?.toDouble(),
      props['pa'][3]?.toDouble()),
  'CupertinoActionSheet': (props) => CupertinoActionSheet(
      key: props['key'],
      title: props['title'],
      message: props['message'],
      actions: as<Widget>(props['actions']),
      messageScrollController: props['messageScrollController'],
      actionScrollController: props['actionScrollController'],
      cancelButton: props['cancelButton']),
  'CupertinoActionSheetAction': (props) => CupertinoActionSheetAction(
      key: props['key'],
      onPressed: props['onPressed'],
      isDefaultAction: props['isDefaultAction'] ?? false,
      isDestructiveAction: props['isDestructiveAction'] ?? false,
      child: props['child']),
  'CupertinoActivityIndicator': (props) => CupertinoActivityIndicator(
      key: props['key'],
      color: props['color'],
      animating: props['animating'] ?? true,
      radius: props['radius']?.toDouble() ?? _kDefaultIndicatorRadius),
  'CupertinoActivityIndicator.partiallyRevealed': (props) =>
      CupertinoActivityIndicator.partiallyRevealed(
          key: props['key'],
          color: props['color'],
          radius: props['radius']?.toDouble() ?? _kDefaultIndicatorRadius,
          progress: props['progress']?.toDouble() ?? 1.0),
  'CupertinoAdaptiveTextSelectionToolbar': (props) =>
      CupertinoAdaptiveTextSelectionToolbar(
          key: props['key'],
          children: as<Widget>(props['children']) ?? const [],
          anchors: props['anchors']),
  'CupertinoAdaptiveTextSelectionToolbar.buttonItems': (props) =>
      CupertinoAdaptiveTextSelectionToolbar.buttonItems(
          key: props['key'],
          buttonItems:
              as<ContextMenuButtonItem>(props['buttonItems']) ?? const [],
          anchors: props['anchors']),
  'CupertinoAdaptiveTextSelectionToolbar.editable': (props) =>
      CupertinoAdaptiveTextSelectionToolbar.editable(
          key: props['key'],
          clipboardStatus: props['clipboardStatus'],
          onCopy: props['onCopy'],
          onCut: props['onCut'],
          onPaste: props['onPaste'],
          onSelectAll: props['onSelectAll'],
          anchors: props['anchors']),
  'CupertinoAdaptiveTextSelectionToolbar.editableText': (props) =>
      CupertinoAdaptiveTextSelectionToolbar.editableText(
          key: props['key'], editableTextState: props['editableTextState']),
  'CupertinoAdaptiveTextSelectionToolbar.getAdaptiveButtons': (props) =>
      CupertinoAdaptiveTextSelectionToolbar.getAdaptiveButtons(
          props['pa'][0], props['pa'][1]),
  'CupertinoAdaptiveTextSelectionToolbar.selectable': (props) =>
      CupertinoAdaptiveTextSelectionToolbar.selectable(
          key: props['key'],
          onCopy: props['onCopy'],
          onSelectAll: props['onSelectAll'],
          selectionGeometry: props['selectionGeometry'],
          anchors: props['anchors']),
  'CupertinoAlertDialog': (props) => CupertinoAlertDialog(
      key: props['key'],
      title: props['title'],
      content: props['content'],
      actions: as<Widget>(props['actions']) ?? const <Widget>[],
      scrollController: props['scrollController'],
      actionScrollController: props['actionScrollController'],
      insetAnimationDuration:
          props['insetAnimationDuration'] ?? const Duration(milliseconds: 100),
      insetAnimationCurve: props['insetAnimationCurve'] ?? Curves.decelerate),
  'CupertinoApp': (props) => CupertinoApp(
      key: props['key'],
      navigatorKey: props['navigatorKey'],
      home: props['home'],
      theme: props['theme'],
      routes: props['routes'] ?? const <String, WidgetBuilder>{},
      initialRoute: props['initialRoute'],
      onGenerateRoute: props['onGenerateRoute'],
      onGenerateInitialRoutes: props['onGenerateInitialRoutes'],
      onUnknownRoute: props['onUnknownRoute'],
      navigatorObservers: as<NavigatorObserver>(props['navigatorObservers']) ??
          const <NavigatorObserver>[],
      builder: props['builder'],
      title: props['title'] ?? '',
      onGenerateTitle: props['onGenerateTitle'],
      color: props['color'],
      locale: props['locale'],
      localizationsDelegates: props['localizationsDelegates'],
      localeListResolutionCallback: props['localeListResolutionCallback'],
      localeResolutionCallback: props['localeResolutionCallback'],
      supportedLocales:
          props['supportedLocales'] ?? const <Locale>[Locale('en', 'US')],
      showPerformanceOverlay: props['showPerformanceOverlay'] ?? false,
      checkerboardRasterCacheImages:
          props['checkerboardRasterCacheImages'] ?? false,
      checkerboardOffscreenLayers:
          props['checkerboardOffscreenLayers'] ?? false,
      showSemanticsDebugger: props['showSemanticsDebugger'] ?? false,
      debugShowCheckedModeBanner: props['debugShowCheckedModeBanner'] ?? true,
      shortcuts: props['shortcuts'],
      actions: props['actions'],
      restorationScopeId: props['restorationScopeId'],
      scrollBehavior: props['scrollBehavior'],
      useInheritedMediaQuery: props['useInheritedMediaQuery'] ?? false),
  'CupertinoApp.createCupertinoHeroController': (props) =>
      CupertinoApp.createCupertinoHeroController(),
  'CupertinoApp.router': (props) => CupertinoApp.router(
      key: props['key'],
      routeInformationProvider: props['routeInformationProvider'],
      routeInformationParser: props['routeInformationParser'],
      routerDelegate: props['routerDelegate'],
      backButtonDispatcher: props['backButtonDispatcher'],
      routerConfig: props['routerConfig'],
      theme: props['theme'],
      builder: props['builder'],
      title: props['title'] ?? '',
      onGenerateTitle: props['onGenerateTitle'],
      color: props['color'],
      locale: props['locale'],
      localizationsDelegates: props['localizationsDelegates'],
      localeListResolutionCallback: props['localeListResolutionCallback'],
      localeResolutionCallback: props['localeResolutionCallback'],
      supportedLocales:
          props['supportedLocales'] ?? const <Locale>[Locale('en', 'US')],
      showPerformanceOverlay: props['showPerformanceOverlay'] ?? false,
      checkerboardRasterCacheImages:
          props['checkerboardRasterCacheImages'] ?? false,
      checkerboardOffscreenLayers:
          props['checkerboardOffscreenLayers'] ?? false,
      showSemanticsDebugger: props['showSemanticsDebugger'] ?? false,
      debugShowCheckedModeBanner: props['debugShowCheckedModeBanner'] ?? true,
      shortcuts: props['shortcuts'],
      actions: props['actions'],
      restorationScopeId: props['restorationScopeId'],
      scrollBehavior: props['scrollBehavior'],
      useInheritedMediaQuery: props['useInheritedMediaQuery'] ?? false),
  'CupertinoButton': (props) => CupertinoButton(
      key: props['key'],
      child: props['child'],
      padding: props['padding'],
      color: props['color'],
      disabledColor:
          props['disabledColor'] ?? CupertinoColors.quaternarySystemFill,
      minSize:
          props['minSize']?.toDouble() ?? kMinInteractiveDimensionCupertino,
      pressedOpacity: props['pressedOpacity']?.toDouble() ?? 0.4,
      borderRadius:
          props['borderRadius'] ?? const BorderRadius.all(Radius.circular(8.0)),
      alignment: props['alignment'] ?? Alignment.center,
      onPressed: props['onPressed']),
  'CupertinoButton.filled': (props) => CupertinoButton.filled(
      key: props['key'],
      child: props['child'],
      padding: props['padding'],
      disabledColor:
          props['disabledColor'] ?? CupertinoColors.quaternarySystemFill,
      minSize:
          props['minSize']?.toDouble() ?? kMinInteractiveDimensionCupertino,
      pressedOpacity: props['pressedOpacity']?.toDouble() ?? 0.4,
      borderRadius:
          props['borderRadius'] ?? const BorderRadius.all(Radius.circular(8.0)),
      alignment: props['alignment'] ?? Alignment.center,
      onPressed: props['onPressed']),
  'CupertinoCheckbox': (props) => CupertinoCheckbox(
      key: props['key'],
      value: props['value'],
      tristate: props['tristate'] ?? false,
      onChanged: props['onChanged'],
      activeColor: props['activeColor'],
      inactiveColor: props['inactiveColor'],
      checkColor: props['checkColor'],
      focusColor: props['focusColor'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      side: props['side'],
      shape: props['shape']),
  'CupertinoCheckbox.width': CupertinoCheckbox.width,
  'CupertinoContextMenu': (props) => CupertinoContextMenu(
      key: props['key'],
      actions: as<Widget>(props['actions']) ?? const [],
      child: props['child'],
      enableHapticFeedback: props['enableHapticFeedback'] ?? false,
      previewBuilder: props['previewBuilder'] ?? _defaultPreviewBuilder),
  'CupertinoContextMenu.animationOpensAt':
      CupertinoContextMenu.animationOpensAt,
  'CupertinoContextMenu.builder': (props) => CupertinoContextMenu.builder(
      key: props['key'],
      actions: as<Widget>(props['actions']) ?? const [],
      builder: props['builder'],
      enableHapticFeedback: props['enableHapticFeedback'] ?? false),
  'CupertinoContextMenu.kEndBoxShadow': CupertinoContextMenu.kEndBoxShadow,
  'CupertinoContextMenu.kOpenBorderRadius':
      CupertinoContextMenu.kOpenBorderRadius,
  'CupertinoContextMenuAction': (props) => CupertinoContextMenuAction(
      key: props['key'],
      child: props['child'],
      isDefaultAction: props['isDefaultAction'] ?? false,
      isDestructiveAction: props['isDestructiveAction'] ?? false,
      onPressed: props['onPressed'],
      trailingIcon: props['trailingIcon']),
  'CupertinoDatePicker': (props) => CupertinoDatePicker(
      key: props['key'],
      mode: props['mode'] ?? CupertinoDatePickerMode.dateAndTime,
      onDateTimeChanged: props['onDateTimeChanged'],
      initialDateTime: props['initialDateTime'],
      minimumDate: props['minimumDate'],
      maximumDate: props['maximumDate'],
      minimumYear: props['minimumYear'] ?? 1,
      maximumYear: props['maximumYear'],
      minuteInterval: props['minuteInterval'] ?? 1,
      use24hFormat: props['use24hFormat'] ?? false,
      dateOrder: props['dateOrder'],
      backgroundColor: props['backgroundColor'],
      showDayOfWeek: props['showDayOfWeek'] ?? false,
      itemExtent: props['itemExtent']?.toDouble() ?? _kItemExtent),
  'CupertinoDatePickerMode.date': CupertinoDatePickerMode.date,
  'CupertinoDatePickerMode.dateAndTime': CupertinoDatePickerMode.dateAndTime,
  'CupertinoDatePickerMode.monthYear': CupertinoDatePickerMode.monthYear,
  'CupertinoDatePickerMode.time': CupertinoDatePickerMode.time,
  'CupertinoDatePickerMode.values': CupertinoDatePickerMode.values,
  'CupertinoDesktopTextSelectionControls': (props) =>
      CupertinoDesktopTextSelectionControls(),
  'CupertinoDesktopTextSelectionToolbar': (props) =>
      CupertinoDesktopTextSelectionToolbar(
          key: props['key'],
          anchor: props['anchor'],
          children: as<Widget>(props['children']) ?? const []),
  'CupertinoDesktopTextSelectionToolbarButton': (props) =>
      CupertinoDesktopTextSelectionToolbarButton(
          key: props['key'],
          onPressed: props['onPressed'],
          child: props['child']),
  'CupertinoDesktopTextSelectionToolbarButton.buttonItem': (props) =>
      CupertinoDesktopTextSelectionToolbarButton.buttonItem(
          key: props['key'], buttonItem: props['buttonItem']),
  'CupertinoDesktopTextSelectionToolbarButton.text': (props) =>
      CupertinoDesktopTextSelectionToolbarButton.text(
          key: props['key'],
          onPressed: props['onPressed'],
          text: props['text']),
  'CupertinoDialogAction': (props) => CupertinoDialogAction(
      key: props['key'],
      onPressed: props['onPressed'],
      isDefaultAction: props['isDefaultAction'] ?? false,
      isDestructiveAction: props['isDestructiveAction'] ?? false,
      textStyle: props['textStyle'],
      child: props['child']),
  'CupertinoDialogRoute': (props) => CupertinoDialogRoute(
      builder: props['builder'],
      context: props['context'],
      barrierDismissible: props['barrierDismissible'] ?? true,
      barrierColor: props['barrierColor'],
      barrierLabel: props['barrierLabel'],
      transitionDuration:
          props['transitionDuration'] ?? const Duration(milliseconds: 250),
      transitionBuilder:
          props['transitionBuilder'] ?? _buildCupertinoDialogTransitions,
      settings: props['settings'],
      anchorPoint: props['anchorPoint']),
  'CupertinoDynamicColor': (props) => CupertinoDynamicColor(
      debugLabel: props['debugLabel'],
      color: props['color'],
      darkColor: props['darkColor'],
      highContrastColor: props['highContrastColor'],
      darkHighContrastColor: props['darkHighContrastColor'],
      elevatedColor: props['elevatedColor'],
      darkElevatedColor: props['darkElevatedColor'],
      highContrastElevatedColor: props['highContrastElevatedColor'],
      darkHighContrastElevatedColor: props['darkHighContrastElevatedColor']),
  'CupertinoDynamicColor.maybeResolve': (props) =>
      CupertinoDynamicColor.maybeResolve(props['pa'][0], props['pa'][1]),
  'CupertinoDynamicColor.resolve': (props) =>
      CupertinoDynamicColor.resolve(props['pa'][0], props['pa'][1]),
  'CupertinoDynamicColor.withBrightness': (props) =>
      CupertinoDynamicColor.withBrightness(
          debugLabel: props['debugLabel'],
          color: props['color'],
          darkColor: props['darkColor']),
  'CupertinoDynamicColor.withBrightnessAndContrast': (props) =>
      CupertinoDynamicColor.withBrightnessAndContrast(
          debugLabel: props['debugLabel'],
          color: props['color'],
          darkColor: props['darkColor'],
          highContrastColor: props['highContrastColor'],
          darkHighContrastColor: props['darkHighContrastColor']),
  'CupertinoFormRow': (props) => CupertinoFormRow(
      key: props['key'],
      child: props['child'],
      prefix: props['prefix'],
      padding: props['padding'],
      helper: props['helper'],
      error: props['error']),
  'CupertinoFormSection': (props) => CupertinoFormSection(
      key: props['key'],
      children: as<Widget>(props['children']) ?? const [],
      header: props['header'],
      footer: props['footer'],
      margin: props['margin'] ?? EdgeInsets.zero,
      backgroundColor:
          props['backgroundColor'] ?? CupertinoColors.systemGroupedBackground,
      decoration: props['decoration'],
      clipBehavior: props['clipBehavior'] ?? Clip.none),
  'CupertinoFormSection.insetGrouped': (props) =>
      CupertinoFormSection.insetGrouped(
          key: props['key'],
          children: as<Widget>(props['children']) ?? const [],
          header: props['header'],
          footer: props['footer'],
          margin: props['margin'] ?? _kFormDefaultInsetGroupedRowsMargin,
          backgroundColor: props['backgroundColor'] ??
              CupertinoColors.systemGroupedBackground,
          decoration: props['decoration'],
          clipBehavior: props['clipBehavior'] ?? Clip.none),
  'CupertinoFullscreenDialogTransition': (props) =>
      CupertinoFullscreenDialogTransition(
          key: props['key'],
          primaryRouteAnimation: props['primaryRouteAnimation'],
          secondaryRouteAnimation: props['secondaryRouteAnimation'],
          child: props['child'],
          linearTransition: props['linearTransition']),
  'CupertinoIconThemeData': (props) => CupertinoIconThemeData(
      size: props['size']?.toDouble(),
      fill: props['fill']?.toDouble(),
      weight: props['weight']?.toDouble(),
      grade: props['grade']?.toDouble(),
      opticalSize: props['opticalSize']?.toDouble(),
      color: props['color'],
      opacity: props['opacity']?.toDouble(),
      shadows: as<Shadow>(props['shadows'])),
  'CupertinoListSection': (props) => CupertinoListSection(
      key: props['key'],
      children: as<Widget>(props['children']),
      header: props['header'],
      footer: props['footer'],
      margin: props['margin'] ?? _kDefaultRowsMargin,
      backgroundColor:
          props['backgroundColor'] ?? CupertinoColors.systemGroupedBackground,
      decoration: props['decoration'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      dividerMargin: props['dividerMargin']?.toDouble() ?? _kBaseDividerMargin,
      additionalDividerMargin: props['additionalDividerMargin']?.toDouble(),
      topMargin: props['topMargin']?.toDouble() ?? _kMarginTop,
      hasLeading: props['hasLeading'] ?? true,
      separatorColor: props['separatorColor']),
  'CupertinoListSection.insetGrouped': (props) =>
      CupertinoListSection.insetGrouped(
          key: props['key'],
          children: as<Widget>(props['children']),
          header: props['header'],
          footer: props['footer'],
          margin: props['margin'] ?? _kDefaultRowsMargin,
          backgroundColor: props['backgroundColor'] ??
              CupertinoColors.systemGroupedBackground,
          decoration: props['decoration'],
          clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
          dividerMargin:
              props['dividerMargin']?.toDouble() ?? _kInsetDividerMargin,
          additionalDividerMargin: props['additionalDividerMargin']?.toDouble(),
          topMargin: props['topMargin']?.toDouble() ?? _kMarginTop,
          hasLeading: props['hasLeading'] ?? true,
          separatorColor: props['separatorColor']),
  'CupertinoListSectionType.base': CupertinoListSectionType.base,
  'CupertinoListSectionType.insetGrouped':
      CupertinoListSectionType.insetGrouped,
  'CupertinoListSectionType.values': CupertinoListSectionType.values,
  'CupertinoListTile': (props) => CupertinoListTile(
      key: props['key'],
      title: props['title'],
      subtitle: props['subtitle'],
      additionalInfo: props['additionalInfo'],
      leading: props['leading'],
      trailing: props['trailing'],
      onTap: props['onTap'],
      backgroundColor: props['backgroundColor'],
      backgroundColorActivated: props['backgroundColorActivated'],
      padding: props['padding'],
      leadingSize: props['leadingSize']?.toDouble() ?? _kLeadingSize,
      leadingToTitle: props['leadingToTitle']?.toDouble() ?? _kLeadingToTitle),
  'CupertinoListTile.notched': (props) => CupertinoListTile.notched(
      key: props['key'],
      title: props['title'],
      subtitle: props['subtitle'],
      additionalInfo: props['additionalInfo'],
      leading: props['leading'],
      trailing: props['trailing'],
      onTap: props['onTap'],
      backgroundColor: props['backgroundColor'],
      backgroundColorActivated: props['backgroundColorActivated'],
      padding: props['padding'],
      leadingSize: props['leadingSize']?.toDouble() ?? _kNotchedLeadingSize,
      leadingToTitle:
          props['leadingToTitle']?.toDouble() ?? _kNotchedLeadingToTitle),
  'CupertinoListTileChevron': (props) =>
      CupertinoListTileChevron(key: props['key']),
  'CupertinoMagnifier': (props) => CupertinoMagnifier(
      key: props['key'],
      size: props['size'] ?? kDefaultSize,
      borderRadius: props['borderRadius'] ??
          const BorderRadius.all(Radius.elliptical(60, 50)),
      additionalFocalPointOffset:
          props['additionalFocalPointOffset'] ?? Offset.zero,
      shadows: as<BoxShadow>(props['shadows']) ??
          const <BoxShadow>[
            BoxShadow(
                color: Color.fromARGB(25, 0, 0, 0),
                blurRadius: 11,
                spreadRadius: 0.2)
          ],
      borderSide: props['borderSide'] ??
          const BorderSide(color: Color.fromARGB(255, 232, 232, 232)),
      inOutAnimation: props['inOutAnimation']),
  'CupertinoModalPopupRoute': (props) => CupertinoModalPopupRoute(
      builder: props['builder'],
      barrierLabel: props['barrierLabel'] ?? 'Dismiss',
      barrierColor: props['barrierColor'] ?? kCupertinoModalBarrierColor,
      barrierDismissible: props['barrierDismissible'] ?? true,
      semanticsDismissible: props['semanticsDismissible'] ?? false,
      filter: props['filter'],
      settings: props['settings'],
      anchorPoint: props['anchorPoint']),
  'CupertinoNavigationBar': (props) => CupertinoNavigationBar(
      key: props['key'],
      leading: props['leading'],
      automaticallyImplyLeading: props['automaticallyImplyLeading'] ?? true,
      automaticallyImplyMiddle: props['automaticallyImplyMiddle'] ?? true,
      previousPageTitle: props['previousPageTitle'],
      middle: props['middle'],
      trailing: props['trailing'],
      border: props['border'] ?? _kDefaultNavBarBorder,
      backgroundColor: props['backgroundColor'],
      brightness: props['brightness'],
      padding: props['padding'],
      transitionBetweenRoutes: props['transitionBetweenRoutes'] ?? true,
      heroTag: props['heroTag'] ?? _defaultHeroTag),
  'CupertinoNavigationBarBackButton': (props) =>
      CupertinoNavigationBarBackButton(
          key: props['key'],
          color: props['color'],
          previousPageTitle: props['previousPageTitle'],
          onPressed: props['onPressed']),
  'CupertinoPage': (props) => CupertinoPage(
      child: props['child'],
      maintainState: props['maintainState'] ?? true,
      title: props['title'],
      fullscreenDialog: props['fullscreenDialog'] ?? false,
      allowSnapshotting: props['allowSnapshotting'] ?? true,
      key: props['key'],
      name: props['name'],
      arguments: props['arguments'],
      restorationId: props['restorationId']),
  'CupertinoPageRoute': (props) => CupertinoPageRoute(
      builder: props['builder'],
      title: props['title'],
      settings: props['settings'],
      maintainState: props['maintainState'] ?? true,
      fullscreenDialog: props['fullscreenDialog'] ?? false,
      allowSnapshotting: props['allowSnapshotting'] ?? true),
  'CupertinoPageScaffold': (props) => CupertinoPageScaffold(
      key: props['key'],
      navigationBar: props['navigationBar'],
      backgroundColor: props['backgroundColor'],
      resizeToAvoidBottomInset: props['resizeToAvoidBottomInset'] ?? true,
      child: props['child']),
  'CupertinoPageTransition': (props) => CupertinoPageTransition(
      key: props['key'],
      primaryRouteAnimation: props['primaryRouteAnimation'],
      secondaryRouteAnimation: props['secondaryRouteAnimation'],
      child: props['child'],
      linearTransition: props['linearTransition']),
  'CupertinoPageTransitionsBuilder': (props) =>
      const CupertinoPageTransitionsBuilder(),
  'CupertinoPicker': (props) => CupertinoPicker(
      key: props['key'],
      diameterRatio:
          props['diameterRatio']?.toDouble() ?? _kDefaultDiameterRatio,
      backgroundColor: props['backgroundColor'],
      offAxisFraction: props['offAxisFraction']?.toDouble() ?? 0.0,
      useMagnifier: props['useMagnifier'] ?? false,
      magnification: props['magnification']?.toDouble() ?? 1.0,
      scrollController: props['scrollController'],
      squeeze: props['squeeze']?.toDouble() ?? _kSqueeze,
      itemExtent: props['itemExtent']?.toDouble() ?? 0,
      onSelectedItemChanged: props['onSelectedItemChanged'],
      children: as<Widget>(props['children']) ?? const [],
      selectionOverlay: props['selectionOverlay'] ??
          const CupertinoPickerDefaultSelectionOverlay(),
      looping: props['looping'] ?? false),
  'CupertinoPicker.builder': (props) => CupertinoPicker.builder(
      key: props['key'],
      diameterRatio:
          props['diameterRatio']?.toDouble() ?? _kDefaultDiameterRatio,
      backgroundColor: props['backgroundColor'],
      offAxisFraction: props['offAxisFraction']?.toDouble() ?? 0.0,
      useMagnifier: props['useMagnifier'] ?? false,
      magnification: props['magnification']?.toDouble() ?? 1.0,
      scrollController: props['scrollController'],
      squeeze: props['squeeze']?.toDouble() ?? _kSqueeze,
      itemExtent: props['itemExtent']?.toDouble() ?? 0,
      onSelectedItemChanged: props['onSelectedItemChanged'],
      itemBuilder: props['itemBuilder'],
      childCount: props['childCount'],
      selectionOverlay: props['selectionOverlay'] ??
          const CupertinoPickerDefaultSelectionOverlay()),
  'CupertinoPickerDefaultSelectionOverlay': (props) =>
      CupertinoPickerDefaultSelectionOverlay(
          key: props['key'],
          background: props['background'] ?? CupertinoColors.tertiarySystemFill,
          capStartEdge: props['capStartEdge'] ?? true,
          capEndEdge: props['capEndEdge'] ?? true),
  'CupertinoPopupSurface': (props) => CupertinoPopupSurface(
      key: props['key'],
      isSurfacePainted: props['isSurfacePainted'] ?? true,
      child: props['child']),
  'CupertinoRadio': (props) => CupertinoRadio(
      key: props['key'],
      value: props['value'],
      groupValue: props['groupValue'],
      onChanged: props['onChanged'],
      toggleable: props['toggleable'] ?? false,
      activeColor: props['activeColor'],
      inactiveColor: props['inactiveColor'],
      fillColor: props['fillColor'],
      focusColor: props['focusColor'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      useCheckmarkStyle: props['useCheckmarkStyle'] ?? false),
  'CupertinoScrollBehavior': (props) => const CupertinoScrollBehavior(),
  'CupertinoScrollbar': (props) => CupertinoScrollbar(
      key: props['key'],
      child: props['child'],
      controller: props['controller'],
      thumbVisibility: props['thumbVisibility'],
      thickness: props['thickness']?.toDouble() ?? defaultThickness,
      thicknessWhileDragging: props['thicknessWhileDragging']?.toDouble() ??
          defaultThicknessWhileDragging,
      radius: props['radius'] ?? defaultRadius,
      radiusWhileDragging:
          props['radiusWhileDragging'] ?? defaultRadiusWhileDragging,
      notificationPredicate: props['notificationPredicate'],
      scrollbarOrientation: props['scrollbarOrientation'],
      isAlwaysShown: props['isAlwaysShown']),
  'CupertinoScrollbar.defaultRadius': CupertinoScrollbar.defaultRadius,
  'CupertinoScrollbar.defaultRadiusWhileDragging':
      CupertinoScrollbar.defaultRadiusWhileDragging,
  'CupertinoScrollbar.defaultThickness': CupertinoScrollbar.defaultThickness,
  'CupertinoScrollbar.defaultThicknessWhileDragging':
      CupertinoScrollbar.defaultThicknessWhileDragging,
  'CupertinoSearchTextField': (props) => CupertinoSearchTextField(
      key: props['key'],
      controller: props['controller'],
      onChanged: props['onChanged'],
      onSubmitted: props['onSubmitted'],
      style: props['style'],
      placeholder: props['placeholder'],
      placeholderStyle: props['placeholderStyle'],
      decoration: props['decoration'],
      backgroundColor: props['backgroundColor'],
      borderRadius: props['borderRadius'],
      keyboardType: props['keyboardType'] ?? TextInputType.text,
      padding: props['padding'] ??
          const EdgeInsetsDirectional.fromSTEB(5.5, 8, 5.5, 8),
      itemColor: props['itemColor'] ?? CupertinoColors.secondaryLabel,
      itemSize: props['itemSize']?.toDouble() ?? 20.0,
      prefixInsets: props['prefixInsets'] ??
          const EdgeInsetsDirectional.fromSTEB(6, 0, 0, 3),
      prefixIcon: props['prefixIcon'] ?? const Icon(CupertinoIcons.search),
      suffixInsets: props['suffixInsets'] ??
          const EdgeInsetsDirectional.fromSTEB(0, 0, 5, 2),
      suffixIcon:
          props['suffixIcon'] ?? const Icon(CupertinoIcons.xmark_circle_fill),
      suffixMode: props['suffixMode'] ?? OverlayVisibilityMode.editing,
      onSuffixTap: props['onSuffixTap'],
      restorationId: props['restorationId'],
      focusNode: props['focusNode'],
      smartQuotesType: props['smartQuotesType'],
      smartDashesType: props['smartDashesType'],
      enableIMEPersonalizedLearning:
          props['enableIMEPersonalizedLearning'] ?? true,
      autofocus: props['autofocus'] ?? false,
      onTap: props['onTap'],
      autocorrect: props['autocorrect'] ?? true,
      enabled: props['enabled']),
  'CupertinoSegmentedControl': (props) => CupertinoSegmentedControl(
      key: props['key'],
      children: props['children'],
      onValueChanged: props['onValueChanged'],
      groupValue: props['groupValue'],
      unselectedColor: props['unselectedColor'],
      selectedColor: props['selectedColor'],
      borderColor: props['borderColor'],
      pressedColor: props['pressedColor'],
      padding: props['padding']),
  'CupertinoSlider': (props) => CupertinoSlider(
      key: props['key'],
      value: props['value']?.toDouble() ?? 0,
      onChanged: props['onChanged'],
      onChangeStart: props['onChangeStart'],
      onChangeEnd: props['onChangeEnd'],
      min: props['min']?.toDouble() ?? 0.0,
      max: props['max']?.toDouble() ?? 1.0,
      divisions: props['divisions'],
      activeColor: props['activeColor'],
      thumbColor: props['thumbColor'] ?? CupertinoColors.white),
  'CupertinoSlidingSegmentedControl': (props) =>
      CupertinoSlidingSegmentedControl(
          key: props['key'],
          children: props['children'],
          onValueChanged: props['onValueChanged'],
          groupValue: props['groupValue'],
          thumbColor: props['thumbColor'] ?? _kThumbColor,
          padding: props['padding'] ?? _kHorizontalItemPadding,
          backgroundColor:
              props['backgroundColor'] ?? CupertinoColors.tertiarySystemFill),
  'CupertinoSliverNavigationBar': (props) => CupertinoSliverNavigationBar(
      key: props['key'],
      largeTitle: props['largeTitle'],
      leading: props['leading'],
      automaticallyImplyLeading: props['automaticallyImplyLeading'] ?? true,
      automaticallyImplyTitle: props['automaticallyImplyTitle'] ?? true,
      alwaysShowMiddle: props['alwaysShowMiddle'] ?? true,
      previousPageTitle: props['previousPageTitle'],
      middle: props['middle'],
      trailing: props['trailing'],
      border: props['border'] ?? _kDefaultNavBarBorder,
      backgroundColor: props['backgroundColor'],
      brightness: props['brightness'],
      padding: props['padding'],
      transitionBetweenRoutes: props['transitionBetweenRoutes'] ?? true,
      heroTag: props['heroTag'] ?? _defaultHeroTag,
      stretch: props['stretch'] ?? false),
  'CupertinoSliverRefreshControl': (props) => CupertinoSliverRefreshControl(
      key: props['key'],
      refreshTriggerPullDistance:
          props['refreshTriggerPullDistance']?.toDouble() ??
              _defaultRefreshTriggerPullDistance,
      refreshIndicatorExtent: props['refreshIndicatorExtent']?.toDouble() ??
          _defaultRefreshIndicatorExtent,
      builder: props['builder'] ?? buildRefreshIndicator,
      onRefresh: props['onRefresh']),
  'CupertinoSliverRefreshControl.buildRefreshIndicator': (props) =>
      CupertinoSliverRefreshControl.buildRefreshIndicator(
          props['pa'][0],
          props['pa'][1],
          props['pa'][2]?.toDouble(),
          props['pa'][3]?.toDouble(),
          props['pa'][4]?.toDouble()),
  'CupertinoSpellCheckSuggestionsToolbar': (props) =>
      CupertinoSpellCheckSuggestionsToolbar(
          key: props['key'],
          anchors: props['anchors'],
          buttonItems:
              as<ContextMenuButtonItem>(props['buttonItems']) ?? const []),
  'CupertinoSpellCheckSuggestionsToolbar.buildButtonItems': (props) =>
      CupertinoSpellCheckSuggestionsToolbar.buildButtonItems(props['pa'][0]),
  'CupertinoSpellCheckSuggestionsToolbar.editableText': (props) =>
      CupertinoSpellCheckSuggestionsToolbar.editableText(
          key: props['key'], editableTextState: props['editableTextState']),
  'CupertinoSwitch': (props) => CupertinoSwitch(
      key: props['key'],
      value: props['value'],
      onChanged: props['onChanged'],
      activeColor: props['activeColor'],
      trackColor: props['trackColor'],
      thumbColor: props['thumbColor'],
      applyTheme: props['applyTheme'],
      focusColor: props['focusColor'],
      focusNode: props['focusNode'],
      onFocusChange: props['onFocusChange'],
      autofocus: props['autofocus'] ?? false,
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start),
  'CupertinoTabBar': (props) => CupertinoTabBar(
      key: props['key'],
      items: as<BottomNavigationBarItem>(props['items']) ?? const [],
      onTap: props['onTap'],
      currentIndex: props['currentIndex'] ?? 0,
      backgroundColor: props['backgroundColor'],
      activeColor: props['activeColor'],
      inactiveColor: props['inactiveColor'] ?? _kDefaultTabBarInactiveColor,
      iconSize: props['iconSize']?.toDouble() ?? 30.0,
      height: props['height']?.toDouble() ?? _kTabBarHeight,
      border: props['border'] ??
          const Border(
              top: BorderSide(color: _kDefaultTabBarBorderColor, width: 0.0))),
  'CupertinoTabController': (props) =>
      CupertinoTabController(initialIndex: props['initialIndex'] ?? 0),
  'CupertinoTabScaffold': (props) => CupertinoTabScaffold(
      key: props['key'],
      tabBar: props['tabBar'],
      tabBuilder: props['tabBuilder'],
      controller: props['controller'],
      backgroundColor: props['backgroundColor'],
      resizeToAvoidBottomInset: props['resizeToAvoidBottomInset'] ?? true,
      restorationId: props['restorationId']),
  'CupertinoTabView': (props) => CupertinoTabView(
      key: props['key'],
      builder: props['builder'],
      navigatorKey: props['navigatorKey'],
      defaultTitle: props['defaultTitle'],
      routes: props['routes'],
      onGenerateRoute: props['onGenerateRoute'],
      onUnknownRoute: props['onUnknownRoute'],
      navigatorObservers: as<NavigatorObserver>(props['navigatorObservers']) ??
          const <NavigatorObserver>[],
      restorationScopeId: props['restorationScopeId']),
  'CupertinoTextField': (props) => CupertinoTextField(
      key: props['key'],
      controller: props['controller'],
      focusNode: props['focusNode'],
      undoController: props['undoController'],
      decoration: props['decoration'] ?? _kDefaultRoundedBorderDecoration,
      padding: props['padding'] ?? const EdgeInsets.all(7.0),
      placeholder: props['placeholder'],
      placeholderStyle: props['placeholderStyle'] ??
          const TextStyle(
              fontWeight: FontWeight.w400,
              color: CupertinoColors.placeholderText),
      prefix: props['prefix'],
      prefixMode: props['prefixMode'] ?? OverlayVisibilityMode.always,
      suffix: props['suffix'],
      suffixMode: props['suffixMode'] ?? OverlayVisibilityMode.always,
      clearButtonMode: props['clearButtonMode'] ?? OverlayVisibilityMode.never,
      keyboardType: props['keyboardType'],
      textInputAction: props['textInputAction'],
      textCapitalization:
          props['textCapitalization'] ?? TextCapitalization.none,
      style: props['style'],
      strutStyle: props['strutStyle'],
      textAlign: props['textAlign'] ?? TextAlign.start,
      textAlignVertical: props['textAlignVertical'],
      textDirection: props['textDirection'],
      readOnly: props['readOnly'] ?? false,
      toolbarOptions: props['toolbarOptions'],
      showCursor: props['showCursor'],
      autofocus: props['autofocus'] ?? false,
      obscuringCharacter: props['obscuringCharacter'] ?? '•',
      obscureText: props['obscureText'] ?? false,
      autocorrect: props['autocorrect'] ?? true,
      smartDashesType: props['smartDashesType'],
      smartQuotesType: props['smartQuotesType'],
      enableSuggestions: props['enableSuggestions'] ?? true,
      maxLines: props['maxLines'] ?? 1,
      minLines: props['minLines'],
      expands: props['expands'] ?? false,
      maxLength: props['maxLength'],
      maxLengthEnforcement: props['maxLengthEnforcement'],
      onChanged: props['onChanged'],
      onEditingComplete: props['onEditingComplete'],
      onSubmitted: props['onSubmitted'],
      onTapOutside: props['onTapOutside'],
      inputFormatters: as<TextInputFormatter>(props['inputFormatters']),
      enabled: props['enabled'],
      cursorWidth: props['cursorWidth']?.toDouble() ?? 2.0,
      cursorHeight: props['cursorHeight']?.toDouble(),
      cursorRadius: props['cursorRadius'] ?? const Radius.circular(2.0),
      cursorOpacityAnimates: props['cursorOpacityAnimates'] ?? true,
      cursorColor: props['cursorColor'],
      selectionHeightStyle:
          props['selectionHeightStyle'] ?? ui.BoxHeightStyle.tight,
      selectionWidthStyle:
          props['selectionWidthStyle'] ?? ui.BoxWidthStyle.tight,
      keyboardAppearance: props['keyboardAppearance'],
      scrollPadding: props['scrollPadding'] ?? const EdgeInsets.all(20.0),
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      enableInteractiveSelection: props['enableInteractiveSelection'],
      selectionControls: props['selectionControls'],
      onTap: props['onTap'],
      scrollController: props['scrollController'],
      scrollPhysics: props['scrollPhysics'],
      autofillHints: props['autofillHints'] ?? const <String>[],
      contentInsertionConfiguration: props['contentInsertionConfiguration'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      restorationId: props['restorationId'],
      scribbleEnabled: props['scribbleEnabled'] ?? true,
      enableIMEPersonalizedLearning:
          props['enableIMEPersonalizedLearning'] ?? true,
      contextMenuBuilder:
          props['contextMenuBuilder'] ?? _defaultContextMenuBuilder,
      spellCheckConfiguration: props['spellCheckConfiguration'],
      magnifierConfiguration: props['magnifierConfiguration']),
  'CupertinoTextField.borderless': (props) => CupertinoTextField.borderless(
      key: props['key'],
      controller: props['controller'],
      focusNode: props['focusNode'],
      undoController: props['undoController'],
      decoration: props['decoration'] ?? _kDefaultRoundedBorderDecoration,
      padding: props['padding'] ?? const EdgeInsets.all(7.0),
      placeholder: props['placeholder'],
      placeholderStyle: props['placeholderStyle'] ?? _kDefaultPlaceholderStyle,
      prefix: props['prefix'],
      prefixMode: props['prefixMode'] ?? OverlayVisibilityMode.always,
      suffix: props['suffix'],
      suffixMode: props['suffixMode'] ?? OverlayVisibilityMode.always,
      clearButtonMode: props['clearButtonMode'] ?? OverlayVisibilityMode.never,
      keyboardType: props['keyboardType'],
      textInputAction: props['textInputAction'],
      textCapitalization:
          props['textCapitalization'] ?? TextCapitalization.none,
      style: props['style'],
      strutStyle: props['strutStyle'],
      textAlign: props['textAlign'] ?? TextAlign.start,
      textAlignVertical: props['textAlignVertical'],
      textDirection: props['textDirection'],
      readOnly: props['readOnly'] ?? false,
      toolbarOptions: props['toolbarOptions'],
      showCursor: props['showCursor'],
      autofocus: props['autofocus'] ?? false,
      obscuringCharacter: props['obscuringCharacter'] ?? '•',
      obscureText: props['obscureText'] ?? false,
      autocorrect: props['autocorrect'] ?? true,
      smartDashesType: props['smartDashesType'],
      smartQuotesType: props['smartQuotesType'],
      enableSuggestions: props['enableSuggestions'] ?? true,
      maxLines: props['maxLines'] ?? 1,
      minLines: props['minLines'],
      expands: props['expands'] ?? false,
      maxLength: props['maxLength'],
      maxLengthEnforcement: props['maxLengthEnforcement'],
      onChanged: props['onChanged'],
      onEditingComplete: props['onEditingComplete'],
      onSubmitted: props['onSubmitted'],
      onTapOutside: props['onTapOutside'],
      inputFormatters: as<TextInputFormatter>(props['inputFormatters']),
      enabled: props['enabled'],
      cursorWidth: props['cursorWidth']?.toDouble() ?? 2.0,
      cursorHeight: props['cursorHeight']?.toDouble(),
      cursorRadius: props['cursorRadius'] ?? const Radius.circular(2.0),
      cursorOpacityAnimates: props['cursorOpacityAnimates'] ?? true,
      cursorColor: props['cursorColor'],
      selectionHeightStyle:
          props['selectionHeightStyle'] ?? ui.BoxHeightStyle.tight,
      selectionWidthStyle:
          props['selectionWidthStyle'] ?? ui.BoxWidthStyle.tight,
      keyboardAppearance: props['keyboardAppearance'],
      scrollPadding: props['scrollPadding'] ?? const EdgeInsets.all(20.0),
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      enableInteractiveSelection: props['enableInteractiveSelection'],
      selectionControls: props['selectionControls'],
      onTap: props['onTap'],
      scrollController: props['scrollController'],
      scrollPhysics: props['scrollPhysics'],
      autofillHints: props['autofillHints'] ?? const <String>[],
      contentInsertionConfiguration: props['contentInsertionConfiguration'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      restorationId: props['restorationId'],
      scribbleEnabled: props['scribbleEnabled'] ?? true,
      enableIMEPersonalizedLearning:
          props['enableIMEPersonalizedLearning'] ?? true,
      contextMenuBuilder:
          props['contextMenuBuilder'] ?? _defaultContextMenuBuilder,
      spellCheckConfiguration: props['spellCheckConfiguration'],
      magnifierConfiguration: props['magnifierConfiguration']),
  'CupertinoTextField.cupertinoMisspelledTextStyle':
      CupertinoTextField.cupertinoMisspelledTextStyle,
  'CupertinoTextField.inferIOSSpellCheckConfiguration': (props) =>
      CupertinoTextField.inferIOSSpellCheckConfiguration(props['pa'][0]),
  'CupertinoTextFormFieldRow': (props) => CupertinoTextFormFieldRow(
      key: props['key'],
      prefix: props['prefix'],
      padding: props['padding'],
      controller: props['controller'],
      initialValue: props['initialValue'],
      focusNode: props['focusNode'],
      decoration: props['decoration'],
      keyboardType: props['keyboardType'],
      textCapitalization:
          props['textCapitalization'] ?? TextCapitalization.none,
      textInputAction: props['textInputAction'],
      style: props['style'],
      strutStyle: props['strutStyle'],
      textDirection: props['textDirection'],
      textAlign: props['textAlign'] ?? TextAlign.start,
      textAlignVertical: props['textAlignVertical'],
      autofocus: props['autofocus'] ?? false,
      readOnly: props['readOnly'] ?? false,
      toolbarOptions: props['toolbarOptions'],
      showCursor: props['showCursor'],
      obscuringCharacter: props['obscuringCharacter'] ?? '•',
      obscureText: props['obscureText'] ?? false,
      autocorrect: props['autocorrect'] ?? true,
      smartDashesType: props['smartDashesType'],
      smartQuotesType: props['smartQuotesType'],
      enableSuggestions: props['enableSuggestions'] ?? true,
      maxLines: props['maxLines'] ?? 1,
      minLines: props['minLines'],
      expands: props['expands'] ?? false,
      maxLength: props['maxLength'],
      onChanged: props['onChanged'],
      onTap: props['onTap'],
      onEditingComplete: props['onEditingComplete'],
      onFieldSubmitted: props['onFieldSubmitted'],
      onSaved: props['onSaved'],
      validator: props['validator'],
      inputFormatters: as<TextInputFormatter>(props['inputFormatters']),
      enabled: props['enabled'],
      cursorWidth: props['cursorWidth']?.toDouble() ?? 2.0,
      cursorHeight: props['cursorHeight']?.toDouble(),
      cursorColor: props['cursorColor'],
      keyboardAppearance: props['keyboardAppearance'],
      scrollPadding: props['scrollPadding'] ?? const EdgeInsets.all(20.0),
      enableInteractiveSelection: props['enableInteractiveSelection'] ?? true,
      selectionControls: props['selectionControls'],
      scrollPhysics: props['scrollPhysics'],
      autofillHints: props['autofillHints'],
      autovalidateMode: props['autovalidateMode'] ?? AutovalidateMode.disabled,
      placeholder: props['placeholder'],
      placeholderStyle: props['placeholderStyle'] ??
          const TextStyle(
              fontWeight: FontWeight.w400,
              color: CupertinoColors.placeholderText),
      contextMenuBuilder:
          props['contextMenuBuilder'] ?? _defaultContextMenuBuilder),
  'CupertinoTextMagnifier': (props) => CupertinoTextMagnifier(
      key: props['key'],
      animationCurve: props['animationCurve'] ?? Curves.easeOut,
      controller: props['controller'],
      dragResistance: props['dragResistance']?.toDouble() ?? 10.0,
      hideBelowThreshold: props['hideBelowThreshold']?.toDouble() ?? 48.0,
      horizontalScreenEdgePadding:
          props['horizontalScreenEdgePadding']?.toDouble() ?? 10.0,
      magnifierInfo: props['magnifierInfo']),
  'CupertinoTextSelectionControls': (props) => CupertinoTextSelectionControls(),
  'CupertinoTextSelectionToolbar': (props) => CupertinoTextSelectionToolbar(
      key: props['key'],
      anchorAbove: props['anchorAbove'],
      anchorBelow: props['anchorBelow'],
      children: as<Widget>(props['children']) ?? const [],
      toolbarBuilder: props['toolbarBuilder'] ?? _defaultToolbarBuilder),
  'CupertinoTextSelectionToolbar.kToolbarScreenPadding':
      CupertinoTextSelectionToolbar.kToolbarScreenPadding,
  'CupertinoTextSelectionToolbarButton': (props) =>
      CupertinoTextSelectionToolbarButton(
          key: props['key'],
          onPressed: props['onPressed'],
          child: props['child']),
  'CupertinoTextSelectionToolbarButton.buttonItem': (props) =>
      CupertinoTextSelectionToolbarButton.buttonItem(
          key: props['key'], buttonItem: props['buttonItem']),
  'CupertinoTextSelectionToolbarButton.getButtonLabel': (props) =>
      CupertinoTextSelectionToolbarButton.getButtonLabel(
          props['pa'][0], props['pa'][1]),
  'CupertinoTextSelectionToolbarButton.text': (props) =>
      CupertinoTextSelectionToolbarButton.text(
          key: props['key'],
          onPressed: props['onPressed'],
          text: props['text']),
  'CupertinoTextThemeData': (props) => CupertinoTextThemeData(
      primaryColor: props['primaryColor'] ?? CupertinoColors.systemBlue,
      textStyle: props['textStyle'],
      actionTextStyle: props['actionTextStyle'],
      tabLabelTextStyle: props['tabLabelTextStyle'],
      navTitleTextStyle: props['navTitleTextStyle'],
      navLargeTitleTextStyle: props['navLargeTitleTextStyle'],
      navActionTextStyle: props['navActionTextStyle'],
      pickerTextStyle: props['pickerTextStyle'],
      dateTimePickerTextStyle: props['dateTimePickerTextStyle']),
  'CupertinoTheme': (props) => CupertinoTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'CupertinoTheme.brightnessOf': (props) =>
      CupertinoTheme.brightnessOf(props['pa'][0]),
  'CupertinoTheme.maybeBrightnessOf': (props) =>
      CupertinoTheme.maybeBrightnessOf(props['pa'][0]),
  'CupertinoTheme.of': (props) => CupertinoTheme.of(props['pa'][0]),
  'CupertinoThemeData': (props) => CupertinoThemeData(
      brightness: props['brightness'],
      primaryColor: props['primaryColor'],
      primaryContrastingColor: props['primaryContrastingColor'],
      textTheme: props['textTheme'],
      barBackgroundColor: props['barBackgroundColor'],
      scaffoldBackgroundColor: props['scaffoldBackgroundColor'],
      applyThemeToAll: props['applyThemeToAll']),
  'CupertinoThemeData.raw': (props) => CupertinoThemeData.raw(
      props['pa'][0],
      props['pa'][1],
      props['pa'][2],
      props['pa'][3],
      props['pa'][4],
      props['pa'][5],
      props['pa'][6]),
  'CupertinoThumbPainter': (props) => CupertinoThumbPainter(
      color: props['color'] ?? CupertinoColors.white,
      shadows: as<BoxShadow>(props['shadows']) ?? _kSliderBoxShadows),
  'CupertinoThumbPainter.extension': CupertinoThumbPainter.extension,
  'CupertinoThumbPainter.radius': CupertinoThumbPainter.radius,
  'CupertinoThumbPainter.switchThumb': (props) =>
      CupertinoThumbPainter.switchThumb(
          color: props['color'] ?? CupertinoColors.white,
          shadows: as<BoxShadow>(props['shadows']) ?? _kSwitchBoxShadows),
  'CupertinoTimerPicker': (props) => CupertinoTimerPicker(
      key: props['key'],
      mode: props['mode'] ?? CupertinoTimerPickerMode.hms,
      initialTimerDuration: props['initialTimerDuration'] ?? Duration.zero,
      minuteInterval: props['minuteInterval'] ?? 1,
      secondInterval: props['secondInterval'] ?? 1,
      alignment: props['alignment'] ?? Alignment.center,
      backgroundColor: props['backgroundColor'],
      itemExtent: props['itemExtent']?.toDouble() ?? _kItemExtent,
      onTimerDurationChanged: props['onTimerDurationChanged']),
  'CupertinoTimerPickerMode.hm': CupertinoTimerPickerMode.hm,
  'CupertinoTimerPickerMode.hms': CupertinoTimerPickerMode.hms,
  'CupertinoTimerPickerMode.ms': CupertinoTimerPickerMode.ms,
  'CupertinoTimerPickerMode.values': CupertinoTimerPickerMode.values,
  'CupertinoUserInterfaceLevel': (props) => CupertinoUserInterfaceLevel(
      key: props['key'], data: props['data'], child: props['child']),
  'CupertinoUserInterfaceLevel.maybeOf': (props) =>
      CupertinoUserInterfaceLevel.maybeOf(props['pa'][0]),
  'CupertinoUserInterfaceLevel.of': (props) =>
      CupertinoUserInterfaceLevel.of(props['pa'][0]),
  'CupertinoUserInterfaceLevelData.base': CupertinoUserInterfaceLevelData.base,
  'CupertinoUserInterfaceLevelData.elevated':
      CupertinoUserInterfaceLevelData.elevated,
  'CupertinoUserInterfaceLevelData.values':
      CupertinoUserInterfaceLevelData.values,
  'Curve2DSample': (props) =>
      Curve2DSample(props['pa'][0]?.toDouble(), props['pa'][1]),
  'CurveTween': (props) => CurveTween(curve: props['curve']),
  'CurvedAnimation': (props) => CurvedAnimation(
      parent: props['parent'],
      curve: props['curve'],
      reverseCurve: props['reverseCurve']),
  'CustomMultiChildLayout': (props) => CustomMultiChildLayout(
      key: props['key'],
      delegate: props['delegate'],
      children: as<Widget>(props['children']) ?? const <Widget>[]),
  'CustomPaint': (props) => CustomPaint(
      key: props['key'],
      painter: props['painter'],
      foregroundPainter: props['foregroundPainter'],
      size: props['size'] ?? Size.zero,
      isComplex: props['isComplex'] ?? false,
      willChange: props['willChange'] ?? false,
      child: props['child']),
  'CustomPainterSemantics': (props) => CustomPainterSemantics(
      key: props['key'],
      rect: props['rect'],
      properties: props['properties'],
      transform: props['transform'],
      tags: props['tags']),
  'CustomScrollView': (props) => CustomScrollView(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      primary: props['primary'],
      physics: props['physics'],
      scrollBehavior: props['scrollBehavior'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      center: props['center'],
      anchor: props['anchor']?.toDouble() ?? 0.0,
      cacheExtent: props['cacheExtent']?.toDouble(),
      slivers: as<Widget>(props['slivers']) ?? const <Widget>[],
      semanticChildCount: props['semanticChildCount'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'CustomSemanticsAction': (props) =>
      CustomSemanticsAction(label: props['label']),
  'CustomSemanticsAction.getAction': (props) =>
      CustomSemanticsAction.getAction(props['pa'][0]),
  'CustomSemanticsAction.getIdentifier': (props) =>
      CustomSemanticsAction.getIdentifier(props['pa'][0]),
  'CustomSemanticsAction.overridingAction': (props) =>
      CustomSemanticsAction.overridingAction(
          hint: props['hint'], action: props['action']),
  'CustomSingleChildLayout': (props) => CustomSingleChildLayout(
      key: props['key'], delegate: props['delegate'], child: props['child']),
  'DartPerformanceMode.balanced': DartPerformanceMode.balanced,
  'DartPerformanceMode.latency': DartPerformanceMode.latency,
  'DartPerformanceMode.memory': DartPerformanceMode.memory,
  'DartPerformanceMode.throughput': DartPerformanceMode.throughput,
  'DartPerformanceMode.values': DartPerformanceMode.values,
  'DataCell': (props) => DataCell(props['pa'][0],
      placeholder: props['placeholder'] ?? false,
      showEditIcon: props['showEditIcon'] ?? false,
      onTap: props['onTap'],
      onLongPress: props['onLongPress'],
      onTapDown: props['onTapDown'],
      onDoubleTap: props['onDoubleTap'],
      onTapCancel: props['onTapCancel']),
  'DataCell.empty': DataCell.empty,
  'DataColumn': (props) => DataColumn(
      label: props['label'],
      tooltip: props['tooltip'],
      numeric: props['numeric'] ?? false,
      onSort: props['onSort'],
      mouseCursor: props['mouseCursor']),
  'DataRow': (props) => DataRow(
      key: props['key'],
      selected: props['selected'] ?? false,
      onSelectChanged: props['onSelectChanged'],
      onLongPress: props['onLongPress'],
      color: props['color'],
      mouseCursor: props['mouseCursor'],
      cells: as<DataCell>(props['cells']) ?? const []),
  'DataRow.byIndex': (props) => DataRow.byIndex(
      index: props['index'],
      selected: props['selected'] ?? false,
      onSelectChanged: props['onSelectChanged'],
      onLongPress: props['onLongPress'],
      color: props['color'],
      mouseCursor: props['mouseCursor'],
      cells: as<DataCell>(props['cells']) ?? const []),
  'DataTable': (props) => DataTable(
      key: props['key'],
      columns: as<DataColumn>(props['columns']) ?? const [],
      sortColumnIndex: props['sortColumnIndex'],
      sortAscending: props['sortAscending'] ?? true,
      onSelectAll: props['onSelectAll'],
      decoration: props['decoration'],
      dataRowColor: props['dataRowColor'],
      dataRowHeight: props['dataRowHeight']?.toDouble(),
      dataRowMinHeight: props['dataRowMinHeight']?.toDouble(),
      dataRowMaxHeight: props['dataRowMaxHeight']?.toDouble(),
      dataTextStyle: props['dataTextStyle'],
      headingRowColor: props['headingRowColor'],
      headingRowHeight: props['headingRowHeight']?.toDouble(),
      headingTextStyle: props['headingTextStyle'],
      horizontalMargin: props['horizontalMargin']?.toDouble(),
      columnSpacing: props['columnSpacing']?.toDouble(),
      showCheckboxColumn: props['showCheckboxColumn'] ?? true,
      showBottomBorder: props['showBottomBorder'] ?? false,
      dividerThickness: props['dividerThickness']?.toDouble(),
      rows: as<DataRow>(props['rows']) ?? const [],
      checkboxHorizontalMargin: props['checkboxHorizontalMargin']?.toDouble(),
      border: props['border'],
      clipBehavior: props['clipBehavior'] ?? Clip.none),
  'DataTableTheme': (props) => DataTableTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'DataTableTheme.of': (props) => DataTableTheme.of(props['pa'][0]),
  'DataTableThemeData': (props) => DataTableThemeData(
      decoration: props['decoration'],
      dataRowColor: props['dataRowColor'],
      dataRowHeight: props['dataRowHeight']?.toDouble(),
      dataRowMinHeight: props['dataRowMinHeight']?.toDouble(),
      dataRowMaxHeight: props['dataRowMaxHeight']?.toDouble(),
      dataTextStyle: props['dataTextStyle'],
      headingRowColor: props['headingRowColor'],
      headingRowHeight: props['headingRowHeight']?.toDouble(),
      headingTextStyle: props['headingTextStyle'],
      horizontalMargin: props['horizontalMargin']?.toDouble(),
      columnSpacing: props['columnSpacing']?.toDouble(),
      dividerThickness: props['dividerThickness']?.toDouble(),
      checkboxHorizontalMargin: props['checkboxHorizontalMargin']?.toDouble(),
      headingCellCursor: props['headingCellCursor'],
      dataRowCursor: props['dataRowCursor']),
  'DataTableThemeData.lerp': (props) => DataTableThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'DatePickerDateOrder.dmy': DatePickerDateOrder.dmy,
  'DatePickerDateOrder.mdy': DatePickerDateOrder.mdy,
  'DatePickerDateOrder.values': DatePickerDateOrder.values,
  'DatePickerDateOrder.ydm': DatePickerDateOrder.ydm,
  'DatePickerDateOrder.ymd': DatePickerDateOrder.ymd,
  'DatePickerDateTimeOrder.date_dayPeriod_time':
      DatePickerDateTimeOrder.date_dayPeriod_time,
  'DatePickerDateTimeOrder.date_time_dayPeriod':
      DatePickerDateTimeOrder.date_time_dayPeriod,
  'DatePickerDateTimeOrder.dayPeriod_time_date':
      DatePickerDateTimeOrder.dayPeriod_time_date,
  'DatePickerDateTimeOrder.time_dayPeriod_date':
      DatePickerDateTimeOrder.time_dayPeriod_date,
  'DatePickerDateTimeOrder.values': DatePickerDateTimeOrder.values,
  'DatePickerDialog': (props) => DatePickerDialog(
      key: props['key'],
      initialDate: props['initialDate'],
      firstDate: props['firstDate'],
      lastDate: props['lastDate'],
      currentDate: props['currentDate'],
      initialEntryMode:
          props['initialEntryMode'] ?? DatePickerEntryMode.calendar,
      selectableDayPredicate: props['selectableDayPredicate'],
      cancelText: props['cancelText'],
      confirmText: props['confirmText'],
      helpText: props['helpText'],
      initialCalendarMode: props['initialCalendarMode'] ?? DatePickerMode.day,
      errorFormatText: props['errorFormatText'],
      errorInvalidText: props['errorInvalidText'],
      fieldHintText: props['fieldHintText'],
      fieldLabelText: props['fieldLabelText'],
      keyboardType: props['keyboardType'],
      restorationId: props['restorationId'],
      onDatePickerModeChange: props['onDatePickerModeChange'],
      switchToInputEntryModeIcon: props['switchToInputEntryModeIcon'],
      switchToCalendarEntryModeIcon: props['switchToCalendarEntryModeIcon']),
  'DatePickerEntryMode.calendar': DatePickerEntryMode.calendar,
  'DatePickerEntryMode.calendarOnly': DatePickerEntryMode.calendarOnly,
  'DatePickerEntryMode.input': DatePickerEntryMode.input,
  'DatePickerEntryMode.inputOnly': DatePickerEntryMode.inputOnly,
  'DatePickerEntryMode.values': DatePickerEntryMode.values,
  'DatePickerMode.day': DatePickerMode.day,
  'DatePickerMode.values': DatePickerMode.values,
  'DatePickerMode.year': DatePickerMode.year,
  'DatePickerTheme': (props) => DatePickerTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'DatePickerTheme.defaults': (props) =>
      DatePickerTheme.defaults(props['pa'][0]),
  'DatePickerTheme.maybeOf': (props) => DatePickerTheme.maybeOf(props['pa'][0]),
  'DatePickerTheme.of': (props) => DatePickerTheme.of(props['pa'][0]),
  'DatePickerThemeData': (props) => DatePickerThemeData(
      backgroundColor: props['backgroundColor'],
      elevation: props['elevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      shape: props['shape'],
      headerBackgroundColor: props['headerBackgroundColor'],
      headerForegroundColor: props['headerForegroundColor'],
      headerHeadlineStyle: props['headerHeadlineStyle'],
      headerHelpStyle: props['headerHelpStyle'],
      weekdayStyle: props['weekdayStyle'],
      dayStyle: props['dayStyle'],
      dayForegroundColor: props['dayForegroundColor'],
      dayBackgroundColor: props['dayBackgroundColor'],
      dayOverlayColor: props['dayOverlayColor'],
      todayForegroundColor: props['todayForegroundColor'],
      todayBackgroundColor: props['todayBackgroundColor'],
      todayBorder: props['todayBorder'],
      yearStyle: props['yearStyle'],
      yearForegroundColor: props['yearForegroundColor'],
      yearBackgroundColor: props['yearBackgroundColor'],
      yearOverlayColor: props['yearOverlayColor'],
      rangePickerBackgroundColor: props['rangePickerBackgroundColor'],
      rangePickerElevation: props['rangePickerElevation']?.toDouble(),
      rangePickerShadowColor: props['rangePickerShadowColor'],
      rangePickerSurfaceTintColor: props['rangePickerSurfaceTintColor'],
      rangePickerShape: props['rangePickerShape'],
      rangePickerHeaderBackgroundColor:
          props['rangePickerHeaderBackgroundColor'],
      rangePickerHeaderForegroundColor:
          props['rangePickerHeaderForegroundColor'],
      rangePickerHeaderHeadlineStyle: props['rangePickerHeaderHeadlineStyle'],
      rangePickerHeaderHelpStyle: props['rangePickerHeaderHelpStyle'],
      rangeSelectionBackgroundColor: props['rangeSelectionBackgroundColor'],
      rangeSelectionOverlayColor: props['rangeSelectionOverlayColor'],
      dividerColor: props['dividerColor']),
  'DatePickerThemeData.lerp': (props) => DatePickerThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'DateRangePickerDialog': (props) => DateRangePickerDialog(
      key: props['key'],
      initialDateRange: props['initialDateRange'],
      firstDate: props['firstDate'],
      lastDate: props['lastDate'],
      currentDate: props['currentDate'],
      initialEntryMode:
          props['initialEntryMode'] ?? DatePickerEntryMode.calendar,
      helpText: props['helpText'],
      cancelText: props['cancelText'],
      confirmText: props['confirmText'],
      saveText: props['saveText'],
      errorInvalidRangeText: props['errorInvalidRangeText'],
      errorFormatText: props['errorFormatText'],
      errorInvalidText: props['errorInvalidText'],
      fieldStartHintText: props['fieldStartHintText'],
      fieldEndHintText: props['fieldEndHintText'],
      fieldStartLabelText: props['fieldStartLabelText'],
      fieldEndLabelText: props['fieldEndLabelText'],
      keyboardType: props['keyboardType'] ?? TextInputType.datetime,
      restorationId: props['restorationId'],
      switchToInputEntryModeIcon: props['switchToInputEntryModeIcon'],
      switchToCalendarEntryModeIcon: props['switchToCalendarEntryModeIcon']),
  'DateTimeRange': (props) =>
      DateTimeRange(start: props['start'], end: props['end']),
  'DayPeriod.am': DayPeriod.am,
  'DayPeriod.pm': DayPeriod.pm,
  'DayPeriod.values': DayPeriod.values,
  'DebugCreator': (props) => DebugCreator(props['pa'][0]),
  'DebugReassembleConfig': (props) =>
      DebugReassembleConfig(widgetName: props['widgetName']),
  'DebugSemanticsDumpOrder.inverseHitTest':
      DebugSemanticsDumpOrder.inverseHitTest,
  'DebugSemanticsDumpOrder.traversalOrder':
      DebugSemanticsDumpOrder.traversalOrder,
  'DebugSemanticsDumpOrder.values': DebugSemanticsDumpOrder.values,
  'DecoratedBox': (props) => DecoratedBox(
      key: props['key'],
      decoration: props['decoration'],
      position: props['position'] ?? DecorationPosition.background,
      child: props['child']),
  'DecoratedBoxTransition': (props) => DecoratedBoxTransition(
      key: props['key'],
      decoration: props['decoration'],
      position: props['position'] ?? DecorationPosition.background,
      child: props['child']),
  'DecorationImage': (props) => DecorationImage(
      image: props['image'],
      onError: props['onError'],
      colorFilter: props['colorFilter'],
      fit: props['fit'],
      alignment: props['alignment'] ?? Alignment.center,
      centerSlice: props['centerSlice'],
      repeat: props['repeat'] ?? ImageRepeat.noRepeat,
      matchTextDirection: props['matchTextDirection'] ?? false,
      scale: props['scale']?.toDouble() ?? 1.0,
      opacity: props['opacity']?.toDouble() ?? 1.0,
      filterQuality: props['filterQuality'] ?? FilterQuality.low,
      invertColors: props['invertColors'] ?? false,
      isAntiAlias: props['isAntiAlias'] ?? false),
  'DecorationPosition.background': DecorationPosition.background,
  'DecorationPosition.foreground': DecorationPosition.foreground,
  'DecorationPosition.values': DecorationPosition.values,
  'DecorationTween': (props) =>
      DecorationTween(begin: props['begin'], end: props['end']),
  'DefaultAssetBundle': (props) => DefaultAssetBundle(
      key: props['key'], bundle: props['bundle'], child: props['child']),
  'DefaultAssetBundle.of': (props) => DefaultAssetBundle.of(props['pa'][0]),
  'DefaultCupertinoLocalizations': (props) =>
      const DefaultCupertinoLocalizations(),
  'DefaultCupertinoLocalizations.delegate':
      DefaultCupertinoLocalizations.delegate,
  'DefaultCupertinoLocalizations.load': (props) =>
      DefaultCupertinoLocalizations.load(props['pa'][0]),
  'DefaultCupertinoLocalizations.shortWeekdays':
      DefaultCupertinoLocalizations.shortWeekdays,
  'DefaultMaterialLocalizations': (props) =>
      const DefaultMaterialLocalizations(),
  'DefaultMaterialLocalizations.delegate':
      DefaultMaterialLocalizations.delegate,
  'DefaultMaterialLocalizations.load': (props) =>
      DefaultMaterialLocalizations.load(props['pa'][0]),
  'DefaultPlatformMenuDelegate': (props) =>
      DefaultPlatformMenuDelegate(channel: props['channel']),
  'DefaultSelectionStyle': (props) => DefaultSelectionStyle(
      key: props['key'],
      cursorColor: props['cursorColor'],
      selectionColor: props['selectionColor'],
      mouseCursor: props['mouseCursor'],
      child: props['child']),
  'DefaultSelectionStyle.defaultColor': DefaultSelectionStyle.defaultColor,
  'DefaultSelectionStyle.fallback': (props) =>
      DefaultSelectionStyle.fallback(key: props['key']),
  'DefaultSelectionStyle.merge': (props) => DefaultSelectionStyle.merge(
      key: props['key'],
      cursorColor: props['cursorColor'],
      selectionColor: props['selectionColor'],
      mouseCursor: props['mouseCursor'],
      child: props['child']),
  'DefaultSelectionStyle.of': (props) =>
      DefaultSelectionStyle.of(props['pa'][0]),
  'DefaultSpellCheckService': (props) => DefaultSpellCheckService(),
  'DefaultSpellCheckService.mergeResults': (props) =>
      DefaultSpellCheckService.mergeResults(props['pa'][0], props['pa'][1]),
  'DefaultTabController': (props) => DefaultTabController(
      key: props['key'],
      length: props['length'],
      initialIndex: props['initialIndex'] ?? 0,
      child: props['child'],
      animationDuration: props['animationDuration']),
  'DefaultTabController.maybeOf': (props) =>
      DefaultTabController.maybeOf(props['pa'][0]),
  'DefaultTabController.of': (props) => DefaultTabController.of(props['pa'][0]),
  'DefaultTextEditingShortcuts': (props) =>
      DefaultTextEditingShortcuts(key: props['key'], child: props['child']),
  'DefaultTextHeightBehavior': (props) => DefaultTextHeightBehavior(
      key: props['key'],
      textHeightBehavior: props['textHeightBehavior'],
      child: props['child']),
  'DefaultTextHeightBehavior.maybeOf': (props) =>
      DefaultTextHeightBehavior.maybeOf(props['pa'][0]),
  'DefaultTextHeightBehavior.of': (props) =>
      DefaultTextHeightBehavior.of(props['pa'][0]),
  'DefaultTextStyle': (props) => DefaultTextStyle(
      key: props['key'],
      style: props['style'],
      textAlign: props['textAlign'],
      softWrap: props['softWrap'] ?? true,
      overflow: props['overflow'] ?? TextOverflow.clip,
      maxLines: props['maxLines'],
      textWidthBasis: props['textWidthBasis'] ?? TextWidthBasis.parent,
      textHeightBehavior: props['textHeightBehavior'],
      child: props['child']),
  'DefaultTextStyle.fallback': (props) =>
      DefaultTextStyle.fallback(key: props['key']),
  'DefaultTextStyle.merge': (props) => DefaultTextStyle.merge(
      key: props['key'],
      style: props['style'],
      textAlign: props['textAlign'],
      softWrap: props['softWrap'] ?? true,
      overflow: props['overflow'] ?? TextOverflow.clip,
      maxLines: props['maxLines'],
      textWidthBasis: props['textWidthBasis'] ?? TextWidthBasis.parent,
      child: props['child']),
  'DefaultTextStyle.of': (props) => DefaultTextStyle.of(props['pa'][0]),
  'DefaultTextStyleTransition': (props) => DefaultTextStyleTransition(
      key: props['key'],
      style: props['style'],
      child: props['child'],
      textAlign: props['textAlign'],
      softWrap: props['softWrap'] ?? true,
      overflow: props['overflow'] ?? TextOverflow.clip,
      maxLines: props['maxLines']),
  'DefaultTransitionDelegate': (props) => const DefaultTransitionDelegate(),
  'DefaultWidgetsLocalizations': (props) => const DefaultWidgetsLocalizations(),
  'DefaultWidgetsLocalizations.delegate': DefaultWidgetsLocalizations.delegate,
  'DefaultWidgetsLocalizations.load': (props) =>
      DefaultWidgetsLocalizations.load(props['pa'][0]),
  'DelayedMultiDragGestureRecognizer': (props) =>
      DelayedMultiDragGestureRecognizer(
          delay: props['delay'] ?? kLongPressTimeout,
          debugOwner: props['debugOwner'],
          supportedDevices: props['supportedDevices'],
          allowedButtonsFilter: props['allowedButtonsFilter']),
  'DeleteCharacterIntent': (props) =>
      DeleteCharacterIntent(forward: props['forward']),
  'DeleteToLineBreakIntent': (props) =>
      DeleteToLineBreakIntent(forward: props['forward']),
  'DeleteToNextWordBoundaryIntent': (props) =>
      DeleteToNextWordBoundaryIntent(forward: props['forward']),
  'DesktopTextSelectionControls': (props) => DesktopTextSelectionControls(),
  'DesktopTextSelectionToolbar': (props) => DesktopTextSelectionToolbar(
      key: props['key'],
      anchor: props['anchor'],
      children: as<Widget>(props['children']) ?? const []),
  'DesktopTextSelectionToolbarButton': (props) =>
      DesktopTextSelectionToolbarButton(
          key: props['key'],
          onPressed: props['onPressed'],
          child: props['child']),
  'DesktopTextSelectionToolbarButton.text': (props) =>
      DesktopTextSelectionToolbarButton.text(
          key: props['key'],
          context: props['context'],
          onPressed: props['onPressed'],
          text: props['text']),
  'DesktopTextSelectionToolbarLayoutDelegate': (props) =>
      DesktopTextSelectionToolbarLayoutDelegate(anchor: props['anchor']),
  'DeviceGestureSettings': (props) =>
      DeviceGestureSettings(touchSlop: props['touchSlop']?.toDouble()),
  'DeviceGestureSettings.fromView': (props) =>
      DeviceGestureSettings.fromView(props['pa'][0]),
  'DeviceOrientation.landscapeLeft': DeviceOrientation.landscapeLeft,
  'DeviceOrientation.landscapeRight': DeviceOrientation.landscapeRight,
  'DeviceOrientation.portraitDown': DeviceOrientation.portraitDown,
  'DeviceOrientation.portraitUp': DeviceOrientation.portraitUp,
  'DeviceOrientation.values': DeviceOrientation.values,
  'DiagnosticLevel.debug': DiagnosticLevel.debug,
  'DiagnosticLevel.error': DiagnosticLevel.error,
  'DiagnosticLevel.fine': DiagnosticLevel.fine,
  'DiagnosticLevel.hidden': DiagnosticLevel.hidden,
  'DiagnosticLevel.hint': DiagnosticLevel.hint,
  'DiagnosticLevel.info': DiagnosticLevel.info,
  'DiagnosticLevel.off': DiagnosticLevel.off,
  'DiagnosticLevel.summary': DiagnosticLevel.summary,
  'DiagnosticLevel.values': DiagnosticLevel.values,
  'DiagnosticLevel.warning': DiagnosticLevel.warning,
  'DiagnosticPropertiesBuilder': (props) => DiagnosticPropertiesBuilder(),
  'DiagnosticPropertiesBuilder.fromProperties': (props) =>
      DiagnosticPropertiesBuilder.fromProperties(props['pa'][0]),
  'DiagnosticableNode': (props) => DiagnosticableNode<Diagnosticable>(
      name: props['name'], value: props['value'], style: props['style']),
  'DiagnosticableTreeNode': (props) => DiagnosticableTreeNode(
      name: props['name'], value: props['value'], style: props['style']),
  'DiagnosticsBlock': (props) => DiagnosticsBlock(
      name: props['name'],
      style: props['style'] ?? DiagnosticsTreeStyle.whitespace,
      showName: props['showName'] ?? true,
      showSeparator: props['showSeparator'] ?? true,
      linePrefix: props['linePrefix'],
      value: props['value'],
      description: props['description'],
      level: props['level'] ?? DiagnosticLevel.info,
      allowTruncate: props['allowTruncate'] ?? false,
      children:
          as<DiagnosticsNode>(props['children']) ?? const <DiagnosticsNode>[],
      properties: as<DiagnosticsNode>(props['properties']) ??
          const <DiagnosticsNode>[]),
  'DiagnosticsDebugCreator': (props) => DiagnosticsDebugCreator(props['pa'][0]),
  'DiagnosticsProperty': (props) => DiagnosticsProperty(
      props['pa'][0], props['pa'][1],
      description: props['description'],
      ifNull: props['ifNull'],
      ifEmpty: props['ifEmpty'],
      showName: props['showName'] ?? true,
      showSeparator: props['showSeparator'] ?? true,
      defaultValue: props['defaultValue'] ?? kNoDefaultValue,
      tooltip: props['tooltip'],
      missingIfNull: props['missingIfNull'] ?? false,
      linePrefix: props['linePrefix'],
      expandableValue: props['expandableValue'] ?? false,
      allowWrap: props['allowWrap'] ?? true,
      allowNameWrap: props['allowNameWrap'] ?? true,
      style: props['style'] ?? DiagnosticsTreeStyle.singleLine,
      level: props['level'] ?? DiagnosticLevel.info),
  'DiagnosticsProperty.lazy': (props) => DiagnosticsProperty.lazy(
      props['pa'][0], props['pa'][1],
      description: props['description'],
      ifNull: props['ifNull'],
      ifEmpty: props['ifEmpty'],
      showName: props['showName'] ?? true,
      showSeparator: props['showSeparator'] ?? true,
      defaultValue: props['defaultValue'] ?? kNoDefaultValue,
      tooltip: props['tooltip'],
      missingIfNull: props['missingIfNull'] ?? false,
      expandableValue: props['expandableValue'] ?? false,
      allowWrap: props['allowWrap'] ?? true,
      allowNameWrap: props['allowNameWrap'] ?? true,
      style: props['style'] ?? DiagnosticsTreeStyle.singleLine,
      level: props['level'] ?? DiagnosticLevel.info),
  'DiagnosticsStackTrace': (props) => DiagnosticsStackTrace(
      props['pa'][0], props['pa'][1],
      stackFilter: props['stackFilter'],
      showSeparator: props['showSeparator'] ?? true),
  'DiagnosticsStackTrace.singleFrame': (props) =>
      DiagnosticsStackTrace.singleFrame(props['pa'][0],
          frame: props['frame'], showSeparator: props['showSeparator'] ?? true),
  'DiagnosticsTreeStyle.dense': DiagnosticsTreeStyle.dense,
  'DiagnosticsTreeStyle.error': DiagnosticsTreeStyle.error,
  'DiagnosticsTreeStyle.errorProperty': DiagnosticsTreeStyle.errorProperty,
  'DiagnosticsTreeStyle.flat': DiagnosticsTreeStyle.flat,
  'DiagnosticsTreeStyle.none': DiagnosticsTreeStyle.none,
  'DiagnosticsTreeStyle.offstage': DiagnosticsTreeStyle.offstage,
  'DiagnosticsTreeStyle.shallow': DiagnosticsTreeStyle.shallow,
  'DiagnosticsTreeStyle.singleLine': DiagnosticsTreeStyle.singleLine,
  'DiagnosticsTreeStyle.sparse': DiagnosticsTreeStyle.sparse,
  'DiagnosticsTreeStyle.transition': DiagnosticsTreeStyle.transition,
  'DiagnosticsTreeStyle.truncateChildren':
      DiagnosticsTreeStyle.truncateChildren,
  'DiagnosticsTreeStyle.values': DiagnosticsTreeStyle.values,
  'DiagnosticsTreeStyle.whitespace': DiagnosticsTreeStyle.whitespace,
  'Dialog': (props) => Dialog(
      key: props['key'],
      backgroundColor: props['backgroundColor'],
      elevation: props['elevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      insetAnimationDuration:
          props['insetAnimationDuration'] ?? const Duration(milliseconds: 100),
      insetAnimationCurve: props['insetAnimationCurve'] ?? Curves.decelerate,
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      shape: props['shape'],
      alignment: props['alignment'],
      child: props['child']),
  'Dialog.fullscreen': (props) => Dialog.fullscreen(
      key: props['key'],
      backgroundColor: props['backgroundColor'],
      insetAnimationDuration: props['insetAnimationDuration'] ?? Duration.zero,
      insetAnimationCurve: props['insetAnimationCurve'] ?? Curves.decelerate,
      child: props['child']),
  'DialogRoute': (props) => DialogRoute(
      context: props['context'],
      builder: props['builder'],
      themes: props['themes'],
      barrierColor: props['barrierColor'] ?? Colors.black54,
      barrierDismissible: props['barrierDismissible'] ?? true,
      barrierLabel: props['barrierLabel'],
      useSafeArea: props['useSafeArea'] ?? true,
      settings: props['settings'],
      anchorPoint: props['anchorPoint'],
      traversalEdgeBehavior: props['traversalEdgeBehavior']),
  'DialogTheme': (props) => DialogTheme(
      backgroundColor: props['backgroundColor'],
      elevation: props['elevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      shape: props['shape'],
      alignment: props['alignment'],
      iconColor: props['iconColor'],
      titleTextStyle: props['titleTextStyle'],
      contentTextStyle: props['contentTextStyle'],
      actionsPadding: props['actionsPadding']),
  'DialogTheme.lerp': (props) => DialogTheme.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'DialogTheme.of': (props) => DialogTheme.of(props['pa'][0]),
  'DirectionalFocusAction': (props) => DirectionalFocusAction(),
  'DirectionalFocusAction.forTextField': (props) =>
      DirectionalFocusAction.forTextField(),
  'DirectionalFocusIntent': (props) => DirectionalFocusIntent(props['pa'][0],
      ignoreTextFields: props['ignoreTextFields'] ?? true),
  'Directionality': (props) => Directionality(
      key: props['key'],
      textDirection: props['textDirection'],
      child: props['child']),
  'Directionality.maybeOf': (props) => Directionality.maybeOf(props['pa'][0]),
  'Directionality.of': (props) => Directionality.of(props['pa'][0]),
  'DirectionallyExtendSelectionEvent': (props) =>
      DirectionallyExtendSelectionEvent(
          dx: props['dx']?.toDouble() ?? 0,
          isEnd: props['isEnd'],
          direction: props['direction']),
  'DismissDirection.down': DismissDirection.down,
  'DismissDirection.endToStart': DismissDirection.endToStart,
  'DismissDirection.horizontal': DismissDirection.horizontal,
  'DismissDirection.none': DismissDirection.none,
  'DismissDirection.startToEnd': DismissDirection.startToEnd,
  'DismissDirection.up': DismissDirection.up,
  'DismissDirection.values': DismissDirection.values,
  'DismissDirection.vertical': DismissDirection.vertical,
  'DismissIntent': (props) => const DismissIntent(),
  'DismissMenuAction': (props) =>
      DismissMenuAction(controller: props['controller']),
  'DismissUpdateDetails': (props) => DismissUpdateDetails(
      direction: props['direction'] ?? DismissDirection.horizontal,
      reached: props['reached'] ?? false,
      previousReached: props['previousReached'] ?? false,
      progress: props['progress']?.toDouble() ?? 0.0),
  'Dismissible': (props) => Dismissible(
      key: props['key'],
      child: props['child'],
      background: props['background'],
      secondaryBackground: props['secondaryBackground'],
      confirmDismiss: props['confirmDismiss'],
      onResize: props['onResize'],
      onUpdate: props['onUpdate'],
      onDismissed: props['onDismissed'],
      direction: props['direction'] ?? DismissDirection.horizontal,
      resizeDuration:
          props['resizeDuration'] ?? const Duration(milliseconds: 300),
      dismissThresholds:
          props['dismissThresholds'] ?? const <DismissDirection, double>{},
      movementDuration:
          props['movementDuration'] ?? const Duration(milliseconds: 200),
      crossAxisEndOffset: props['crossAxisEndOffset']?.toDouble() ?? 0.0,
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      behavior: props['behavior'] ?? HitTestBehavior.opaque),
  'DisplayFeature': (props) => DisplayFeature(
      bounds: props['bounds'], type: props['type'], state: props['state']),
  'DisplayFeatureState.postureFlat': DisplayFeatureState.postureFlat,
  'DisplayFeatureState.postureHalfOpened':
      DisplayFeatureState.postureHalfOpened,
  'DisplayFeatureState.unknown': DisplayFeatureState.unknown,
  'DisplayFeatureState.values': DisplayFeatureState.values,
  'DisplayFeatureSubScreen': (props) => DisplayFeatureSubScreen(
      key: props['key'],
      anchorPoint: props['anchorPoint'],
      child: props['child']),
  'DisplayFeatureSubScreen.avoidBounds': (props) =>
      DisplayFeatureSubScreen.avoidBounds(props['pa'][0]),
  'DisplayFeatureSubScreen.subScreensInBounds': (props) =>
      DisplayFeatureSubScreen.subScreensInBounds(
          props['pa'][0], props['pa'][1]),
  'DisplayFeatureType.cutout': DisplayFeatureType.cutout,
  'DisplayFeatureType.fold': DisplayFeatureType.fold,
  'DisplayFeatureType.hinge': DisplayFeatureType.hinge,
  'DisplayFeatureType.unknown': DisplayFeatureType.unknown,
  'DisplayFeatureType.values': DisplayFeatureType.values,
  'DisposableBuildContext': (props) =>
      DisposableBuildContext<State>(props['pa'][0]),
  'Divider': (props) => Divider(
      key: props['key'],
      height: props['height']?.toDouble(),
      thickness: props['thickness']?.toDouble(),
      indent: props['indent']?.toDouble(),
      endIndent: props['endIndent']?.toDouble(),
      color: props['color']),
  'Divider.createBorderSide': (props) => Divider.createBorderSide(
      props['pa'][0],
      color: props['color'],
      width: props['width']?.toDouble()),
  'DividerTheme': (props) => DividerTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'DividerTheme.of': (props) => DividerTheme.of(props['pa'][0]),
  'DividerThemeData': (props) => DividerThemeData(
      color: props['color'],
      space: props['space']?.toDouble(),
      thickness: props['thickness']?.toDouble(),
      indent: props['indent']?.toDouble(),
      endIndent: props['endIndent']?.toDouble()),
  'DividerThemeData.lerp': (props) => DividerThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'DoNothingAction': (props) =>
      DoNothingAction(consumesKey: props['consumesKey'] ?? true),
  'DoNothingAndStopPropagationIntent': (props) =>
      const DoNothingAndStopPropagationIntent(),
  'DoNothingAndStopPropagationTextIntent': (props) =>
      const DoNothingAndStopPropagationTextIntent(),
  'DoNothingIntent': (props) => const DoNothingIntent(),
  'DocumentBoundary': (props) => DocumentBoundary(props['pa'][0]),
  'DocumentationIcon': (props) => DocumentationIcon(props['pa'][0]),
  'DomCSSStyleDeclaration': (props) => DomCSSStyleDeclaration(),
  'DomCSSStyleSheet': (props) => DomCSSStyleSheet(),
  'DomDocument': (props) => DomDocument(),
  'DomElement': (props) => DomElement(),
  'DomEvent': (props) => DomEvent(),
  'DomEventListener': (props) => DomEventListener(),
  'DomEventTarget': (props) => DomEventTarget(),
  'DomHTMLDivElement': (props) => DomHTMLDivElement(),
  'DomHTMLElement': (props) => DomHTMLElement(),
  'DomHTMLHeadElement': (props) => DomHTMLHeadElement(),
  'DomHTMLStyleElement': (props) => DomHTMLStyleElement(),
  'DomMediaQueryList': (props) => DomMediaQueryList(),
  'DomMouseEvent': (props) => DomMouseEvent(),
  'DomNavigator': (props) => DomNavigator(),
  'DomNode': (props) => DomNode(),
  'DomProgressEvent': (props) => DomProgressEvent(),
  'DomRange': (props) => DomRange(),
  'DomSelection': (props) => DomSelection(),
  'DomStyleSheet': (props) => DomStyleSheet(),
  'DomTokenList': (props) => DomTokenList(),
  'DomUIEvent': (props) => DomUIEvent(),
  'DomWindow': (props) => DomWindow(),
  'DomXMLHttpRequest': (props) => DomXMLHttpRequest(),
  'DoubleProperty': (props) => DoubleProperty(
      props['pa'][0], props['pa'][1]?.toDouble(),
      ifNull: props['ifNull'],
      unit: props['unit'],
      tooltip: props['tooltip'],
      defaultValue: props['defaultValue'] ?? kNoDefaultValue,
      showName: props['showName'] ?? true,
      style: props['style'] ?? DiagnosticsTreeStyle.singleLine,
      level: props['level'] ?? DiagnosticLevel.info),
  'DoubleProperty.lazy': (props) => DoubleProperty.lazy(
      props['pa'][0], props['pa'][1],
      ifNull: props['ifNull'],
      showName: props['showName'] ?? true,
      unit: props['unit'],
      tooltip: props['tooltip'],
      defaultValue: props['defaultValue'] ?? kNoDefaultValue,
      level: props['level'] ?? DiagnosticLevel.info),
  'DoubleTapGestureRecognizer': (props) => DoubleTapGestureRecognizer(
      debugOwner: props['debugOwner'],
      supportedDevices: props['supportedDevices'],
      allowedButtonsFilter: props['allowedButtonsFilter']),
  'DragDownDetails': (props) => DragDownDetails(
      globalPosition: props['globalPosition'] ?? Offset.zero,
      localPosition: props['localPosition']),
  'DragEndDetails': (props) => DragEndDetails(
      velocity: props['velocity'] ?? Velocity.zero,
      primaryVelocity: props['primaryVelocity']?.toDouble()),
  'DragScrollActivity': (props) =>
      DragScrollActivity(props['pa'][0], props['pa'][1]),
  'DragStartBehavior.down': DragStartBehavior.down,
  'DragStartBehavior.start': DragStartBehavior.start,
  'DragStartBehavior.values': DragStartBehavior.values,
  'DragStartDetails': (props) => DragStartDetails(
      sourceTimeStamp: props['sourceTimeStamp'],
      globalPosition: props['globalPosition'] ?? Offset.zero,
      localPosition: props['localPosition'],
      kind: props['kind']),
  'DragTarget': (props) => DragTarget(
      key: props['key'],
      builder: props['builder'],
      onWillAccept: props['onWillAccept'],
      onAccept: props['onAccept'],
      onAcceptWithDetails: props['onAcceptWithDetails'],
      onLeave: props['onLeave'],
      onMove: props['onMove'],
      hitTestBehavior: props['hitTestBehavior'] ?? HitTestBehavior.translucent),
  'DragTargetDetails': (props) =>
      DragTargetDetails(data: props['data'], offset: props['offset']),
  'DragUpdateDetails': (props) => DragUpdateDetails(
      sourceTimeStamp: props['sourceTimeStamp'],
      delta: props['delta'] ?? Offset.zero,
      primaryDelta: props['primaryDelta']?.toDouble(),
      globalPosition: props['globalPosition'],
      localPosition: props['localPosition']),
  'Draggable': (props) => Draggable(
      key: props['key'],
      child: props['child'],
      feedback: props['feedback'],
      data: props['data'],
      axis: props['axis'],
      childWhenDragging: props['childWhenDragging'],
      feedbackOffset: props['feedbackOffset'] ?? Offset.zero,
      dragAnchorStrategy:
          props['dragAnchorStrategy'] ?? childDragAnchorStrategy,
      affinity: props['affinity'],
      maxSimultaneousDrags: props['maxSimultaneousDrags'],
      onDragStarted: props['onDragStarted'],
      onDragUpdate: props['onDragUpdate'],
      onDraggableCanceled: props['onDraggableCanceled'],
      onDragEnd: props['onDragEnd'],
      onDragCompleted: props['onDragCompleted'],
      ignoringFeedbackSemantics: props['ignoringFeedbackSemantics'] ?? true,
      ignoringFeedbackPointer: props['ignoringFeedbackPointer'] ?? true,
      rootOverlay: props['rootOverlay'] ?? false,
      hitTestBehavior: props['hitTestBehavior'] ?? HitTestBehavior.deferToChild,
      allowedButtonsFilter: props['allowedButtonsFilter']),
  'DraggableDetails': (props) => DraggableDetails(
      wasAccepted: props['wasAccepted'] ?? false,
      velocity: props['velocity'],
      offset: props['offset']),
  'DraggableScrollableActuator': (props) =>
      DraggableScrollableActuator(key: props['key'], child: props['child']),
  'DraggableScrollableActuator.reset': (props) =>
      DraggableScrollableActuator.reset(props['pa'][0]),
  'DraggableScrollableController': (props) => DraggableScrollableController(),
  'DraggableScrollableNotification': (props) => DraggableScrollableNotification(
      extent: props['extent']?.toDouble() ?? 0,
      minExtent: props['minExtent']?.toDouble() ?? 0,
      maxExtent: props['maxExtent']?.toDouble() ?? 0,
      initialExtent: props['initialExtent']?.toDouble() ?? 0,
      context: props['context'],
      shouldCloseOnMinExtent: props['shouldCloseOnMinExtent'] ?? true),
  'DraggableScrollableSheet': (props) => DraggableScrollableSheet(
      key: props['key'],
      initialChildSize: props['initialChildSize']?.toDouble() ?? 0.5,
      minChildSize: props['minChildSize']?.toDouble() ?? 0.25,
      maxChildSize: props['maxChildSize']?.toDouble() ?? 1.0,
      expand: props['expand'] ?? true,
      snap: props['snap'] ?? false,
      snapSizes: as<double>(props['snapSizes']),
      snapAnimationDuration: props['snapAnimationDuration'],
      controller: props['controller'],
      shouldCloseOnMinExtent: props['shouldCloseOnMinExtent'] ?? true,
      builder: props['builder']),
  'Drawer': (props) => Drawer(
      key: props['key'],
      backgroundColor: props['backgroundColor'],
      elevation: props['elevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      shape: props['shape'],
      width: props['width']?.toDouble(),
      child: props['child'],
      semanticLabel: props['semanticLabel'],
      clipBehavior: props['clipBehavior']),
  'DrawerAlignment.end': DrawerAlignment.end,
  'DrawerAlignment.start': DrawerAlignment.start,
  'DrawerAlignment.values': DrawerAlignment.values,
  'DrawerButton': (props) => DrawerButton(
      key: props['key'], style: props['style'], onPressed: props['onPressed']),
  'DrawerButtonIcon': (props) => DrawerButtonIcon(key: props['key']),
  'DrawerController': (props) => DrawerController(
      key: props['key'],
      child: props['child'],
      alignment: props['alignment'],
      isDrawerOpen: props['isDrawerOpen'] ?? false,
      drawerCallback: props['drawerCallback'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      scrimColor: props['scrimColor'],
      edgeDragWidth: props['edgeDragWidth']?.toDouble(),
      enableOpenDragGesture: props['enableOpenDragGesture'] ?? true),
  'DrawerController.maybeOf': (props) =>
      DrawerController.maybeOf(props['pa'][0]),
  'DrawerController.of': (props) => DrawerController.of(props['pa'][0]),
  'DrawerHeader': (props) => DrawerHeader(
      key: props['key'],
      decoration: props['decoration'],
      margin: props['margin'] ?? const EdgeInsets.only(bottom: 8.0),
      padding:
          props['padding'] ?? const EdgeInsets.fromLTRB(16.0, 16.0, 16.0, 8.0),
      duration: props['duration'] ?? const Duration(milliseconds: 250),
      curve: props['curve'] ?? Curves.fastOutSlowIn,
      child: props['child']),
  'DrawerTheme': (props) => DrawerTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'DrawerTheme.of': (props) => DrawerTheme.of(props['pa'][0]),
  'DrawerThemeData': (props) => DrawerThemeData(
      backgroundColor: props['backgroundColor'],
      scrimColor: props['scrimColor'],
      elevation: props['elevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      shape: props['shape'],
      endShape: props['endShape'],
      width: props['width']?.toDouble()),
  'DrawerThemeData.lerp': (props) => DrawerThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'DrivenScrollActivity': (props) => DrivenScrollActivity(props['pa'][0],
      from: props['from']?.toDouble() ?? 0,
      to: props['to']?.toDouble() ?? 0,
      duration: props['duration'],
      curve: props['curve'],
      vsync: props['vsync']),
  'DropSliderValueIndicatorShape': (props) =>
      const DropSliderValueIndicatorShape(),
  'DropdownButton': (props) => DropdownButton(
      key: props['key'],
      items: as<DropdownMenuItem>(props['items']) ?? const [],
      selectedItemBuilder: props['selectedItemBuilder'],
      value: props['value'],
      hint: props['hint'],
      disabledHint: props['disabledHint'],
      onChanged: props['onChanged'],
      onTap: props['onTap'],
      elevation: props['elevation'] ?? 8,
      style: props['style'],
      underline: props['underline'],
      icon: props['icon'],
      iconDisabledColor: props['iconDisabledColor'],
      iconEnabledColor: props['iconEnabledColor'],
      iconSize: props['iconSize']?.toDouble() ?? 24.0,
      isDense: props['isDense'] ?? false,
      isExpanded: props['isExpanded'] ?? false,
      itemHeight: props['itemHeight']?.toDouble() ?? kMinInteractiveDimension,
      focusColor: props['focusColor'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      dropdownColor: props['dropdownColor'],
      menuMaxHeight: props['menuMaxHeight']?.toDouble(),
      enableFeedback: props['enableFeedback'],
      alignment: props['alignment'] ?? AlignmentDirectional.centerStart,
      borderRadius: props['borderRadius'],
      padding: props['padding']),
  'DropdownButtonFormField': (props) => DropdownButtonFormField(
      key: props['key'],
      items: as<DropdownMenuItem>(props['items']) ?? const [],
      selectedItemBuilder: props['selectedItemBuilder'],
      value: props['value'],
      hint: props['hint'],
      disabledHint: props['disabledHint'],
      onChanged: props['onChanged'],
      onTap: props['onTap'],
      elevation: props['elevation'] ?? 8,
      style: props['style'],
      icon: props['icon'],
      iconDisabledColor: props['iconDisabledColor'],
      iconEnabledColor: props['iconEnabledColor'],
      iconSize: props['iconSize']?.toDouble() ?? 24.0,
      isDense: props['isDense'] ?? true,
      isExpanded: props['isExpanded'] ?? false,
      itemHeight: props['itemHeight']?.toDouble(),
      focusColor: props['focusColor'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      dropdownColor: props['dropdownColor'],
      decoration: props['decoration'],
      onSaved: props['onSaved'],
      validator: props['validator'],
      autovalidateMode: props['autovalidateMode'],
      menuMaxHeight: props['menuMaxHeight']?.toDouble(),
      enableFeedback: props['enableFeedback'],
      alignment: props['alignment'] ?? AlignmentDirectional.centerStart,
      borderRadius: props['borderRadius'],
      padding: props['padding']),
  'DropdownButtonHideUnderline': (props) =>
      DropdownButtonHideUnderline(key: props['key'], child: props['child']),
  'DropdownButtonHideUnderline.at': (props) =>
      DropdownButtonHideUnderline.at(props['pa'][0]),
  'DropdownMenu': (props) => DropdownMenu(
      key: props['key'],
      enabled: props['enabled'] ?? true,
      width: props['width']?.toDouble(),
      menuHeight: props['menuHeight']?.toDouble(),
      leadingIcon: props['leadingIcon'],
      trailingIcon: props['trailingIcon'],
      label: props['label'],
      hintText: props['hintText'],
      helperText: props['helperText'],
      errorText: props['errorText'],
      selectedTrailingIcon: props['selectedTrailingIcon'],
      enableFilter: props['enableFilter'] ?? false,
      enableSearch: props['enableSearch'] ?? true,
      textStyle: props['textStyle'],
      inputDecorationTheme: props['inputDecorationTheme'],
      menuStyle: props['menuStyle'],
      controller: props['controller'],
      initialSelection: props['initialSelection'],
      onSelected: props['onSelected'],
      requestFocusOnTap: props['requestFocusOnTap'],
      dropdownMenuEntries:
          as<DropdownMenuEntry>(props['dropdownMenuEntries']) ?? const []),
  'DropdownMenuEntry': (props) => DropdownMenuEntry(
      value: props['value'],
      label: props['label'],
      leadingIcon: props['leadingIcon'],
      trailingIcon: props['trailingIcon'],
      enabled: props['enabled'] ?? true,
      style: props['style']),
  'DropdownMenuItem': (props) => DropdownMenuItem(
      key: props['key'],
      onTap: props['onTap'],
      value: props['value'],
      enabled: props['enabled'] ?? true,
      alignment: props['alignment'] ?? AlignmentDirectional.centerStart,
      child: props['child']),
  'DropdownMenuTheme': (props) => DropdownMenuTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'DropdownMenuTheme.maybeOf': (props) =>
      DropdownMenuTheme.maybeOf(props['pa'][0]),
  'DropdownMenuTheme.of': (props) => DropdownMenuTheme.of(props['pa'][0]),
  'DropdownMenuThemeData': (props) => DropdownMenuThemeData(
      textStyle: props['textStyle'],
      inputDecorationTheme: props['inputDecorationTheme'],
      menuStyle: props['menuStyle']),
  'DropdownMenuThemeData.lerp': (props) => DropdownMenuThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'DualTransitionBuilder': (props) => DualTransitionBuilder(
      key: props['key'],
      animation: props['animation'],
      forwardBuilder: props['forwardBuilder'],
      reverseBuilder: props['reverseBuilder'],
      child: props['child']),
  'EagerGestureRecognizer': (props) => EagerGestureRecognizer(
      supportedDevices: props['supportedDevices'],
      allowedButtonsFilter: props['allowedButtonsFilter']),
  'EdgeDraggingAutoScroller': (props) => EdgeDraggingAutoScroller(
      props['pa'][0],
      onScrollViewScrolled: props['onScrollViewScrolled'],
      velocityScalar: props['velocityScalar']?.toDouble()),
  'EdgeInsets.all': (props) => EdgeInsets.all(props['pa'][0]?.toDouble()),
  'EdgeInsets.fromLTRB': (props) => EdgeInsets.fromLTRB(
      props['pa'][0]?.toDouble(),
      props['pa'][1]?.toDouble(),
      props['pa'][2]?.toDouble(),
      props['pa'][3]?.toDouble()),
  'EdgeInsets.fromViewPadding': (props) =>
      EdgeInsets.fromViewPadding(props['pa'][0], props['pa'][1]?.toDouble()),
  'EdgeInsets.lerp': (props) => EdgeInsets.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'EdgeInsets.only': (props) => EdgeInsets.only(
      left: props['left']?.toDouble() ?? 0.0,
      top: props['top']?.toDouble() ?? 0.0,
      right: props['right']?.toDouble() ?? 0.0,
      bottom: props['bottom']?.toDouble() ?? 0.0),
  'EdgeInsets.symmetric': (props) => EdgeInsets.symmetric(
      vertical: props['vertical']?.toDouble() ?? 0.0,
      horizontal: props['horizontal']?.toDouble() ?? 0.0),
  'EdgeInsets.zero': EdgeInsets.zero,
  'EdgeInsetsDirectional.all': (props) =>
      EdgeInsetsDirectional.all(props['pa'][0]?.toDouble()),
  'EdgeInsetsDirectional.fromSTEB': (props) => EdgeInsetsDirectional.fromSTEB(
      props['pa'][0]?.toDouble(),
      props['pa'][1]?.toDouble(),
      props['pa'][2]?.toDouble(),
      props['pa'][3]?.toDouble()),
  'EdgeInsetsDirectional.lerp': (props) => EdgeInsetsDirectional.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'EdgeInsetsDirectional.only': (props) => EdgeInsetsDirectional.only(
      start: props['start']?.toDouble() ?? 0.0,
      top: props['top']?.toDouble() ?? 0.0,
      end: props['end']?.toDouble() ?? 0.0,
      bottom: props['bottom']?.toDouble() ?? 0.0),
  'EdgeInsetsDirectional.symmetric': (props) => EdgeInsetsDirectional.symmetric(
      horizontal: props['horizontal']?.toDouble() ?? 0.0,
      vertical: props['vertical']?.toDouble() ?? 0.0),
  'EdgeInsetsDirectional.zero': EdgeInsetsDirectional.zero,
  'EdgeInsetsGeometryTween': (props) =>
      EdgeInsetsGeometryTween(begin: props['begin'], end: props['end']),
  'EdgeInsetsTween': (props) =>
      EdgeInsetsTween(begin: props['begin'], end: props['end']),
  'EditableText': (props) => EditableText(
      key: props['key'],
      controller: props['controller'],
      focusNode: props['focusNode'],
      readOnly: props['readOnly'] ?? false,
      obscuringCharacter: props['obscuringCharacter'] ?? '•',
      obscureText: props['obscureText'] ?? false,
      autocorrect: props['autocorrect'] ?? true,
      smartDashesType: props['smartDashesType'],
      smartQuotesType: props['smartQuotesType'],
      enableSuggestions: props['enableSuggestions'] ?? true,
      style: props['style'],
      strutStyle: props['strutStyle'],
      cursorColor: props['cursorColor'],
      backgroundCursorColor: props['backgroundCursorColor'],
      textAlign: props['textAlign'] ?? TextAlign.start,
      textDirection: props['textDirection'],
      locale: props['locale'],
      textScaleFactor: props['textScaleFactor']?.toDouble(),
      maxLines: props['maxLines'] ?? 1,
      minLines: props['minLines'],
      expands: props['expands'] ?? false,
      forceLine: props['forceLine'] ?? true,
      textHeightBehavior: props['textHeightBehavior'],
      textWidthBasis: props['textWidthBasis'] ?? TextWidthBasis.parent,
      autofocus: props['autofocus'] ?? false,
      showCursor: props['showCursor'],
      showSelectionHandles: props['showSelectionHandles'] ?? false,
      selectionColor: props['selectionColor'],
      selectionControls: props['selectionControls'],
      keyboardType: props['keyboardType'],
      textInputAction: props['textInputAction'],
      textCapitalization:
          props['textCapitalization'] ?? TextCapitalization.none,
      onChanged: props['onChanged'],
      onEditingComplete: props['onEditingComplete'],
      onSubmitted: props['onSubmitted'],
      onAppPrivateCommand: props['onAppPrivateCommand'],
      onSelectionChanged: props['onSelectionChanged'],
      onSelectionHandleTapped: props['onSelectionHandleTapped'],
      onTapOutside: props['onTapOutside'],
      inputFormatters: as<TextInputFormatter>(props['inputFormatters']),
      mouseCursor: props['mouseCursor'],
      rendererIgnoresPointer: props['rendererIgnoresPointer'] ?? false,
      cursorWidth: props['cursorWidth']?.toDouble() ?? 2.0,
      cursorHeight: props['cursorHeight']?.toDouble(),
      cursorRadius: props['cursorRadius'],
      cursorOpacityAnimates: props['cursorOpacityAnimates'] ?? false,
      cursorOffset: props['cursorOffset'],
      paintCursorAboveText: props['paintCursorAboveText'] ?? false,
      selectionHeightStyle:
          props['selectionHeightStyle'] ?? ui.BoxHeightStyle.tight,
      selectionWidthStyle:
          props['selectionWidthStyle'] ?? ui.BoxWidthStyle.tight,
      scrollPadding: props['scrollPadding'] ?? const EdgeInsets.all(20.0),
      keyboardAppearance: props['keyboardAppearance'] ?? Brightness.light,
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      enableInteractiveSelection: props['enableInteractiveSelection'],
      scrollController: props['scrollController'],
      scrollPhysics: props['scrollPhysics'],
      autocorrectionTextRectColor: props['autocorrectionTextRectColor'],
      toolbarOptions: props['toolbarOptions'],
      autofillHints: props['autofillHints'] ?? const <String>[],
      autofillClient: props['autofillClient'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      restorationId: props['restorationId'],
      scrollBehavior: props['scrollBehavior'],
      scribbleEnabled: props['scribbleEnabled'] ?? true,
      enableIMEPersonalizedLearning:
          props['enableIMEPersonalizedLearning'] ?? true,
      contentInsertionConfiguration: props['contentInsertionConfiguration'],
      contextMenuBuilder: props['contextMenuBuilder'],
      spellCheckConfiguration: props['spellCheckConfiguration'],
      magnifierConfiguration: props['magnifierConfiguration'] ??
          TextMagnifierConfiguration.disabled,
      undoController: props['undoController']),
  'EditableText.debugDeterministicCursor':
      EditableText.debugDeterministicCursor,
  'EditableText.getEditableButtonItems': (props) =>
      EditableText.getEditableButtonItems(
          clipboardStatus: props['clipboardStatus'],
          onCopy: props['onCopy'],
          onCut: props['onCut'],
          onPaste: props['onPaste'],
          onSelectAll: props['onSelectAll']),
  'ElasticInCurve': (props) => ElasticInCurve(
      (props['pa'].length > 0 ? props['pa'][0] : null)?.toDouble() ?? 0.4),
  'ElasticInOutCurve': (props) => ElasticInOutCurve(
      (props['pa'].length > 0 ? props['pa'][0] : null)?.toDouble() ?? 0.4),
  'ElasticOutCurve': (props) => ElasticOutCurve(
      (props['pa'].length > 0 ? props['pa'][0] : null)?.toDouble() ?? 0.4),
  'ElevatedButton': (props) => ElevatedButton(
      key: props['key'],
      onPressed: props['onPressed'],
      onLongPress: props['onLongPress'],
      onHover: props['onHover'],
      onFocusChange: props['onFocusChange'],
      style: props['style'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      statesController: props['statesController'],
      child: props['child']),
  'ElevatedButton.icon': (props) => ElevatedButton.icon(
      key: props['key'],
      onPressed: props['onPressed'],
      onLongPress: props['onLongPress'],
      onHover: props['onHover'],
      onFocusChange: props['onFocusChange'],
      style: props['style'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      statesController: props['statesController'],
      icon: props['icon'],
      label: props['label']),
  'ElevatedButton.styleFrom': (props) => ElevatedButton.styleFrom(
      foregroundColor: props['foregroundColor'],
      backgroundColor: props['backgroundColor'],
      disabledForegroundColor: props['disabledForegroundColor'],
      disabledBackgroundColor: props['disabledBackgroundColor'],
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      elevation: props['elevation']?.toDouble(),
      textStyle: props['textStyle'],
      padding: props['padding'],
      minimumSize: props['minimumSize'],
      fixedSize: props['fixedSize'],
      maximumSize: props['maximumSize'],
      side: props['side'],
      shape: props['shape'],
      enabledMouseCursor: props['enabledMouseCursor'],
      disabledMouseCursor: props['disabledMouseCursor'],
      visualDensity: props['visualDensity'],
      tapTargetSize: props['tapTargetSize'],
      animationDuration: props['animationDuration'],
      enableFeedback: props['enableFeedback'],
      alignment: props['alignment'],
      splashFactory: props['splashFactory'],
      primary: props['primary'],
      onPrimary: props['onPrimary'],
      onSurface: props['onSurface']),
  'ElevatedButtonTheme': (props) => ElevatedButtonTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'ElevatedButtonTheme.of': (props) => ElevatedButtonTheme.of(props['pa'][0]),
  'ElevatedButtonThemeData': (props) =>
      ElevatedButtonThemeData(style: props['style']),
  'ElevatedButtonThemeData.lerp': (props) => ElevatedButtonThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'EmptyTextSelectionControls': (props) => EmptyTextSelectionControls(),
  'EndDrawerButton': (props) => EndDrawerButton(
      key: props['key'], style: props['style'], onPressed: props['onPressed']),
  'EndDrawerButtonIcon': (props) => EndDrawerButtonIcon(key: props['key']),
  'EnumProperty': (props) => EnumProperty(props['pa'][0], props['pa'][1],
      defaultValue: props['defaultValue'] ?? kNoDefaultValue,
      level: props['level'] ?? DiagnosticLevel.info),
  'ErrorDescription': (props) => ErrorDescription(props['pa'][0]),
  'ErrorHint': (props) => ErrorHint(props['pa'][0]),
  'ErrorSpacer': (props) => ErrorSpacer(),
  'ErrorSummary': (props) => ErrorSummary(props['pa'][0]),
  'ErrorWidget': (props) => ErrorWidget(props['pa'][0]),
  'ErrorWidget.builder': ErrorWidget.builder,
  'ErrorWidget.withDetails': (props) => ErrorWidget.withDetails(
      message: props['message'] ?? '', error: props['error']),
  'EventChannel': (props) => EventChannel(
      props['pa'][0],
      (props['pa'].length > 1 ? props['pa'][1] : null) ??
          const StandardMethodCodec(),
      (props['pa'].length > 2 ? props['pa'][2] : null)),
  'ExactAssetImage': (props) => ExactAssetImage(props['pa'][0],
      scale: props['scale']?.toDouble() ?? 1.0,
      bundle: props['bundle'],
      package: props['package']),
  'ExcludeFocus': (props) => ExcludeFocus(
      key: props['key'],
      excluding: props['excluding'] ?? true,
      child: props['child']),
  'ExcludeFocusTraversal': (props) => ExcludeFocusTraversal(
      key: props['key'],
      excluding: props['excluding'] ?? true,
      child: props['child']),
  'ExcludeSemantics': (props) => ExcludeSemantics(
      key: props['key'],
      excluding: props['excluding'] ?? true,
      child: props['child']),
  'ExpandIcon': (props) => ExpandIcon(
      key: props['key'],
      isExpanded: props['isExpanded'] ?? false,
      size: props['size']?.toDouble() ?? 24.0,
      onPressed: props['onPressed'],
      padding: props['padding'] ?? const EdgeInsets.all(8.0),
      color: props['color'],
      disabledColor: props['disabledColor'],
      expandedColor: props['expandedColor']),
  'ExpandSelectionToDocumentBoundaryIntent': (props) =>
      ExpandSelectionToDocumentBoundaryIntent(forward: props['forward']),
  'ExpandSelectionToLineBreakIntent': (props) =>
      ExpandSelectionToLineBreakIntent(forward: props['forward']),
  'Expanded': (props) => Expanded(
      key: props['key'], flex: props['flex'] ?? 1, child: props['child']),
  'ExpansionPanel': (props) => ExpansionPanel(
      headerBuilder: props['headerBuilder'],
      body: props['body'],
      isExpanded: props['isExpanded'] ?? false,
      canTapOnHeader: props['canTapOnHeader'] ?? false,
      backgroundColor: props['backgroundColor']),
  'ExpansionPanelList': (props) => ExpansionPanelList(
      key: props['key'],
      children:
          as<ExpansionPanel>(props['children']) ?? const <ExpansionPanel>[],
      expansionCallback: props['expansionCallback'],
      animationDuration: props['animationDuration'] ?? kThemeAnimationDuration,
      dividerColor: props['dividerColor'],
      elevation: props['elevation']?.toDouble() ?? 2,
      expandIconColor: props['expandIconColor'],
      materialGapSize: props['materialGapSize']?.toDouble() ?? 16.0),
  'ExpansionPanelList.radio': (props) => ExpansionPanelList.radio(
      key: props['key'],
      children: as<ExpansionPanel>(props['children']) ??
          const <ExpansionPanelRadio>[],
      expansionCallback: props['expansionCallback'],
      animationDuration: props['animationDuration'] ?? kThemeAnimationDuration,
      initialOpenPanelValue: props['initialOpenPanelValue'],
      dividerColor: props['dividerColor'],
      elevation: props['elevation']?.toDouble() ?? 2,
      expandIconColor: props['expandIconColor'],
      materialGapSize: props['materialGapSize']?.toDouble() ?? 16.0),
  'ExpansionPanelRadio': (props) => ExpansionPanelRadio(
      value: props['value'],
      headerBuilder: props['headerBuilder'],
      body: props['body'],
      canTapOnHeader: props['canTapOnHeader'] ?? false,
      backgroundColor: props['backgroundColor']),
  'ExpansionTile': (props) => ExpansionTile(
      key: props['key'],
      leading: props['leading'],
      title: props['title'],
      subtitle: props['subtitle'],
      onExpansionChanged: props['onExpansionChanged'],
      children: as<Widget>(props['children']) ?? const <Widget>[],
      trailing: props['trailing'],
      initiallyExpanded: props['initiallyExpanded'] ?? false,
      maintainState: props['maintainState'] ?? false,
      tilePadding: props['tilePadding'],
      expandedCrossAxisAlignment: props['expandedCrossAxisAlignment'],
      expandedAlignment: props['expandedAlignment'],
      childrenPadding: props['childrenPadding'],
      backgroundColor: props['backgroundColor'],
      collapsedBackgroundColor: props['collapsedBackgroundColor'],
      textColor: props['textColor'],
      collapsedTextColor: props['collapsedTextColor'],
      iconColor: props['iconColor'],
      collapsedIconColor: props['collapsedIconColor'],
      shape: props['shape'],
      collapsedShape: props['collapsedShape'],
      clipBehavior: props['clipBehavior'],
      controlAffinity: props['controlAffinity'],
      controller: props['controller']),
  'ExpansionTileController': (props) => ExpansionTileController(),
  'ExpansionTileController.maybeOf': (props) =>
      ExpansionTileController.maybeOf(props['pa'][0]),
  'ExpansionTileController.of': (props) =>
      ExpansionTileController.of(props['pa'][0]),
  'ExpansionTileTheme': (props) => ExpansionTileTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'ExpansionTileTheme.of': (props) => ExpansionTileTheme.of(props['pa'][0]),
  'ExpansionTileThemeData': (props) => ExpansionTileThemeData(
      backgroundColor: props['backgroundColor'],
      collapsedBackgroundColor: props['collapsedBackgroundColor'],
      tilePadding: props['tilePadding'],
      expandedAlignment: props['expandedAlignment'],
      childrenPadding: props['childrenPadding'],
      iconColor: props['iconColor'],
      collapsedIconColor: props['collapsedIconColor'],
      textColor: props['textColor'],
      collapsedTextColor: props['collapsedTextColor'],
      shape: props['shape'],
      collapsedShape: props['collapsedShape'],
      clipBehavior: props['clipBehavior']),
  'ExpansionTileThemeData.lerp': (props) => ExpansionTileThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'ExtendSelectionByCharacterIntent': (props) =>
      ExtendSelectionByCharacterIntent(
          forward: props['forward'],
          collapseSelection: props['collapseSelection']),
  'ExtendSelectionByPageIntent': (props) =>
      ExtendSelectionByPageIntent(forward: props['forward']),
  'ExtendSelectionToDocumentBoundaryIntent': (props) =>
      ExtendSelectionToDocumentBoundaryIntent(
          forward: props['forward'],
          collapseSelection: props['collapseSelection']),
  'ExtendSelectionToLineBreakIntent': (props) =>
      ExtendSelectionToLineBreakIntent(
          forward: props['forward'],
          collapseSelection: props['collapseSelection'],
          collapseAtReversal: props['collapseAtReversal'] ?? false,
          continuesAtWrap: props['continuesAtWrap'] ?? false),
  'ExtendSelectionToNextParagraphBoundaryIntent': (props) =>
      ExtendSelectionToNextParagraphBoundaryIntent(
          forward: props['forward'],
          collapseSelection: props['collapseSelection']),
  'ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent': (props) =>
      ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent(
          forward: props['forward']),
  'ExtendSelectionToNextWordBoundaryIntent': (props) =>
      ExtendSelectionToNextWordBoundaryIntent(
          forward: props['forward'],
          collapseSelection: props['collapseSelection']),
  'ExtendSelectionToNextWordBoundaryOrCaretLocationIntent': (props) =>
      ExtendSelectionToNextWordBoundaryOrCaretLocationIntent(
          forward: props['forward']),
  'ExtendSelectionVerticallyToAdjacentLineIntent': (props) =>
      ExtendSelectionVerticallyToAdjacentLineIntent(
          forward: props['forward'],
          collapseSelection: props['collapseSelection']),
  'ExtendSelectionVerticallyToAdjacentPageIntent': (props) =>
      ExtendSelectionVerticallyToAdjacentPageIntent(
          forward: props['forward'],
          collapseSelection: props['collapseSelection']),
  'Factory': (props) => Factory(props['pa'][0]),
  'FadeInImage': (props) => FadeInImage(
      key: props['key'],
      placeholder: props['placeholder'],
      placeholderErrorBuilder: props['placeholderErrorBuilder'],
      image: props['image'],
      imageErrorBuilder: props['imageErrorBuilder'],
      excludeFromSemantics: props['excludeFromSemantics'] ?? false,
      imageSemanticLabel: props['imageSemanticLabel'],
      fadeOutDuration:
          props['fadeOutDuration'] ?? const Duration(milliseconds: 300),
      fadeOutCurve: props['fadeOutCurve'] ?? Curves.easeOut,
      fadeInDuration:
          props['fadeInDuration'] ?? const Duration(milliseconds: 700),
      fadeInCurve: props['fadeInCurve'] ?? Curves.easeIn,
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      fit: props['fit'],
      placeholderFit: props['placeholderFit'],
      filterQuality: props['filterQuality'] ?? FilterQuality.low,
      placeholderFilterQuality: props['placeholderFilterQuality'],
      alignment: props['alignment'] ?? Alignment.center,
      repeat: props['repeat'] ?? ImageRepeat.noRepeat,
      matchTextDirection: props['matchTextDirection'] ?? false),
  'FadeInImage.assetNetwork': (props) => FadeInImage.assetNetwork(
      key: props['key'],
      placeholder: props['placeholder'],
      placeholderErrorBuilder: props['placeholderErrorBuilder'],
      image: props['image'],
      imageErrorBuilder: props['imageErrorBuilder'],
      bundle: props['bundle'],
      placeholderScale: props['placeholderScale']?.toDouble() ?? 1.0,
      imageScale: props['imageScale']?.toDouble() ?? 1.0,
      excludeFromSemantics: props['excludeFromSemantics'] ?? false,
      imageSemanticLabel: props['imageSemanticLabel'],
      fadeOutDuration:
          props['fadeOutDuration'] ?? const Duration(milliseconds: 300),
      fadeOutCurve: props['fadeOutCurve'] ?? Curves.easeOut,
      fadeInDuration:
          props['fadeInDuration'] ?? const Duration(milliseconds: 700),
      fadeInCurve: props['fadeInCurve'] ?? Curves.easeIn,
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      fit: props['fit'],
      placeholderFit: props['placeholderFit'],
      filterQuality: props['filterQuality'] ?? FilterQuality.low,
      placeholderFilterQuality: props['placeholderFilterQuality'],
      alignment: props['alignment'] ?? Alignment.center,
      repeat: props['repeat'] ?? ImageRepeat.noRepeat,
      matchTextDirection: props['matchTextDirection'] ?? false,
      placeholderCacheWidth: props['placeholderCacheWidth'],
      placeholderCacheHeight: props['placeholderCacheHeight'],
      imageCacheWidth: props['imageCacheWidth'],
      imageCacheHeight: props['imageCacheHeight']),
  'FadeInImage.memoryNetwork': (props) => FadeInImage.memoryNetwork(
      key: props['key'],
      placeholder: props['placeholder'],
      placeholderErrorBuilder: props['placeholderErrorBuilder'],
      image: props['image'],
      imageErrorBuilder: props['imageErrorBuilder'],
      placeholderScale: props['placeholderScale']?.toDouble() ?? 1.0,
      imageScale: props['imageScale']?.toDouble() ?? 1.0,
      excludeFromSemantics: props['excludeFromSemantics'] ?? false,
      imageSemanticLabel: props['imageSemanticLabel'],
      fadeOutDuration:
          props['fadeOutDuration'] ?? const Duration(milliseconds: 300),
      fadeOutCurve: props['fadeOutCurve'] ?? Curves.easeOut,
      fadeInDuration:
          props['fadeInDuration'] ?? const Duration(milliseconds: 700),
      fadeInCurve: props['fadeInCurve'] ?? Curves.easeIn,
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      fit: props['fit'],
      placeholderFit: props['placeholderFit'],
      filterQuality: props['filterQuality'] ?? FilterQuality.low,
      placeholderFilterQuality: props['placeholderFilterQuality'],
      alignment: props['alignment'] ?? Alignment.center,
      repeat: props['repeat'] ?? ImageRepeat.noRepeat,
      matchTextDirection: props['matchTextDirection'] ?? false,
      placeholderCacheWidth: props['placeholderCacheWidth'],
      placeholderCacheHeight: props['placeholderCacheHeight'],
      imageCacheWidth: props['imageCacheWidth'],
      imageCacheHeight: props['imageCacheHeight']),
  'FadeTransition': (props) => FadeTransition(
      key: props['key'],
      opacity: props['opacity'],
      alwaysIncludeSemantics: props['alwaysIncludeSemantics'] ?? false,
      child: props['child']),
  'FadeUpwardsPageTransitionsBuilder': (props) =>
      const FadeUpwardsPageTransitionsBuilder(),
  'FileImage': (props) =>
      FileImage(props['pa'][0], scale: props['scale']?.toDouble() ?? 1.0),
  'FilledButton': (props) => FilledButton(
      key: props['key'],
      onPressed: props['onPressed'],
      onLongPress: props['onLongPress'],
      onHover: props['onHover'],
      onFocusChange: props['onFocusChange'],
      style: props['style'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      statesController: props['statesController'],
      child: props['child']),
  'FilledButton.icon': (props) => FilledButton.icon(
      key: props['key'],
      onPressed: props['onPressed'],
      onLongPress: props['onLongPress'],
      onHover: props['onHover'],
      onFocusChange: props['onFocusChange'],
      style: props['style'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      statesController: props['statesController'],
      icon: props['icon'],
      label: props['label']),
  'FilledButton.styleFrom': (props) => FilledButton.styleFrom(
      foregroundColor: props['foregroundColor'],
      backgroundColor: props['backgroundColor'],
      disabledForegroundColor: props['disabledForegroundColor'],
      disabledBackgroundColor: props['disabledBackgroundColor'],
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      elevation: props['elevation']?.toDouble(),
      textStyle: props['textStyle'],
      padding: props['padding'],
      minimumSize: props['minimumSize'],
      fixedSize: props['fixedSize'],
      maximumSize: props['maximumSize'],
      side: props['side'],
      shape: props['shape'],
      enabledMouseCursor: props['enabledMouseCursor'],
      disabledMouseCursor: props['disabledMouseCursor'],
      visualDensity: props['visualDensity'],
      tapTargetSize: props['tapTargetSize'],
      animationDuration: props['animationDuration'],
      enableFeedback: props['enableFeedback'],
      alignment: props['alignment'],
      splashFactory: props['splashFactory']),
  'FilledButton.tonal': (props) => FilledButton.tonal(
      key: props['key'],
      onPressed: props['onPressed'],
      onLongPress: props['onLongPress'],
      onHover: props['onHover'],
      onFocusChange: props['onFocusChange'],
      style: props['style'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      statesController: props['statesController'],
      child: props['child']),
  'FilledButton.tonalIcon': (props) => FilledButton.tonalIcon(
      key: props['key'],
      onPressed: props['onPressed'],
      onLongPress: props['onLongPress'],
      onHover: props['onHover'],
      onFocusChange: props['onFocusChange'],
      style: props['style'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      statesController: props['statesController'],
      icon: props['icon'],
      label: props['label']),
  'FilledButtonTheme': (props) => FilledButtonTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'FilledButtonTheme.of': (props) => FilledButtonTheme.of(props['pa'][0]),
  'FilledButtonThemeData': (props) =>
      FilledButtonThemeData(style: props['style']),
  'FilledButtonThemeData.lerp': (props) => FilledButtonThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'FilterChip': (props) => FilterChip(
      key: props['key'],
      avatar: props['avatar'],
      label: props['label'],
      labelStyle: props['labelStyle'],
      labelPadding: props['labelPadding'],
      selected: props['selected'] ?? false,
      onSelected: props['onSelected'],
      pressElevation: props['pressElevation']?.toDouble(),
      disabledColor: props['disabledColor'],
      selectedColor: props['selectedColor'],
      tooltip: props['tooltip'],
      side: props['side'],
      shape: props['shape'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      backgroundColor: props['backgroundColor'],
      padding: props['padding'],
      visualDensity: props['visualDensity'],
      materialTapTargetSize: props['materialTapTargetSize'],
      elevation: props['elevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      iconTheme: props['iconTheme'],
      selectedShadowColor: props['selectedShadowColor'],
      showCheckmark: props['showCheckmark'],
      checkmarkColor: props['checkmarkColor'],
      avatarBorder: props['avatarBorder'] ?? const CircleBorder()),
  'FilterQuality.high': FilterQuality.high,
  'FilterQuality.low': FilterQuality.low,
  'FilterQuality.medium': FilterQuality.medium,
  'FilterQuality.none': FilterQuality.none,
  'FilterQuality.values': FilterQuality.values,
  'FilteringTextInputFormatter': (props) => FilteringTextInputFormatter(
      props['pa'][0],
      allow: props['allow'],
      replacementString: props['replacementString'] ?? ''),
  'FilteringTextInputFormatter.allow': (props) =>
      FilteringTextInputFormatter.allow(props['pa'][0],
          replacementString: props['replacementString'] ?? ''),
  'FilteringTextInputFormatter.deny': (props) =>
      FilteringTextInputFormatter.deny(props['pa'][0],
          replacementString: props['replacementString'] ?? ''),
  'FilteringTextInputFormatter.digitsOnly':
      FilteringTextInputFormatter.digitsOnly,
  'FilteringTextInputFormatter.singleLineFormatter':
      FilteringTextInputFormatter.singleLineFormatter,
  'FittedBox': (props) => FittedBox(
      key: props['key'],
      fit: props['fit'] ?? BoxFit.contain,
      alignment: props['alignment'] ?? Alignment.center,
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      child: props['child']),
  'FittedSizes': (props) => FittedSizes(props['pa'][0], props['pa'][1]),
  'FixedColumnWidth': (props) => FixedColumnWidth(props['pa'][0]?.toDouble()),
  'FixedExtentMetrics': (props) => FixedExtentMetrics(
      minScrollExtent: props['minScrollExtent']?.toDouble() ?? 0,
      maxScrollExtent: props['maxScrollExtent']?.toDouble() ?? 0,
      pixels: props['pixels']?.toDouble() ?? 0,
      viewportDimension: props['viewportDimension']?.toDouble() ?? 0,
      axisDirection: props['axisDirection'],
      itemIndex: props['itemIndex'],
      devicePixelRatio: props['devicePixelRatio']?.toDouble() ?? 0),
  'FixedExtentScrollController': (props) =>
      FixedExtentScrollController(initialItem: props['initialItem'] ?? 0),
  'FixedExtentScrollPhysics': (props) =>
      FixedExtentScrollPhysics(parent: props['parent']),
  'FixedScrollMetrics': (props) => FixedScrollMetrics(
      minScrollExtent: props['minScrollExtent']?.toDouble() ?? 0,
      maxScrollExtent: props['maxScrollExtent']?.toDouble() ?? 0,
      pixels: props['pixels']?.toDouble() ?? 0,
      viewportDimension: props['viewportDimension']?.toDouble() ?? 0,
      axisDirection: props['axisDirection'],
      devicePixelRatio: props['devicePixelRatio']?.toDouble() ?? 0),
  'FlagProperty': (props) => FlagProperty(props['pa'][0],
      value: props['value'],
      ifTrue: props['ifTrue'],
      ifFalse: props['ifFalse'],
      showName: props['showName'] ?? false,
      defaultValue: props['defaultValue'],
      level: props['level'] ?? DiagnosticLevel.info),
  'FlagsSummary': (props) => FlagsSummary(props['pa'][0], props['pa'][1],
      ifEmpty: props['ifEmpty'],
      showName: props['showName'] ?? true,
      showSeparator: props['showSeparator'] ?? true,
      level: props['level'] ?? DiagnosticLevel.info),
  'Flex': (props) => Flex(
      key: props['key'],
      direction: props['direction'],
      mainAxisAlignment: props['mainAxisAlignment'] ?? MainAxisAlignment.start,
      mainAxisSize: props['mainAxisSize'] ?? MainAxisSize.max,
      crossAxisAlignment:
          props['crossAxisAlignment'] ?? CrossAxisAlignment.center,
      textDirection: props['textDirection'],
      verticalDirection: props['verticalDirection'] ?? VerticalDirection.down,
      textBaseline: props['textBaseline'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      children: as<Widget>(props['children']) ?? const <Widget>[]),
  'FlexColumnWidth': (props) => FlexColumnWidth(
      (props['pa'].length > 0 ? props['pa'][0] : null)?.toDouble() ?? 1.0),
  'FlexFit.loose': FlexFit.loose,
  'FlexFit.tight': FlexFit.tight,
  'FlexFit.values': FlexFit.values,
  'FlexParentData': (props) => FlexParentData(),
  'Flexible': (props) => Flexible(
      key: props['key'],
      flex: props['flex'] ?? 1,
      fit: props['fit'] ?? FlexFit.loose,
      child: props['child']),
  'FlexibleSpaceBar': (props) => FlexibleSpaceBar(
      key: props['key'],
      title: props['title'],
      background: props['background'],
      centerTitle: props['centerTitle'],
      titlePadding: props['titlePadding'],
      collapseMode: props['collapseMode'] ?? CollapseMode.parallax,
      stretchModes: as<StretchMode>(props['stretchModes']) ??
          const <StretchMode>[StretchMode.zoomBackground],
      expandedTitleScale: props['expandedTitleScale']?.toDouble() ?? 1.5),
  'FlexibleSpaceBar.createSettings': (props) => FlexibleSpaceBar.createSettings(
      toolbarOpacity: props['toolbarOpacity']?.toDouble(),
      minExtent: props['minExtent']?.toDouble(),
      maxExtent: props['maxExtent']?.toDouble(),
      isScrolledUnder: props['isScrolledUnder'],
      currentExtent: props['currentExtent']?.toDouble() ?? 0,
      child: props['child']),
  'FlexibleSpaceBarSettings': (props) => FlexibleSpaceBarSettings(
      key: props['key'],
      toolbarOpacity: props['toolbarOpacity']?.toDouble() ?? 0,
      minExtent: props['minExtent']?.toDouble() ?? 0,
      maxExtent: props['maxExtent']?.toDouble() ?? 0,
      currentExtent: props['currentExtent']?.toDouble() ?? 0,
      child: props['child'],
      isScrolledUnder: props['isScrolledUnder']),
  'FlippedCurve': (props) => FlippedCurve(props['pa'][0]),
  'FlippedTweenSequence': (props) => FlippedTweenSequence(props['pa'][0]),
  'FloatingActionButton': (props) => FloatingActionButton(
      key: props['key'],
      child: props['child'],
      tooltip: props['tooltip'],
      foregroundColor: props['foregroundColor'],
      backgroundColor: props['backgroundColor'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      splashColor: props['splashColor'],
      heroTag: props['heroTag'] ?? const _DefaultHeroTag(),
      elevation: props['elevation']?.toDouble(),
      focusElevation: props['focusElevation']?.toDouble(),
      hoverElevation: props['hoverElevation']?.toDouble(),
      highlightElevation: props['highlightElevation']?.toDouble(),
      disabledElevation: props['disabledElevation']?.toDouble(),
      onPressed: props['onPressed'],
      mouseCursor: props['mouseCursor'],
      mini: props['mini'] ?? false,
      shape: props['shape'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      materialTapTargetSize: props['materialTapTargetSize'],
      isExtended: props['isExtended'] ?? false,
      enableFeedback: props['enableFeedback']),
  'FloatingActionButton.extended': (props) => FloatingActionButton.extended(
      key: props['key'],
      tooltip: props['tooltip'],
      foregroundColor: props['foregroundColor'],
      backgroundColor: props['backgroundColor'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      heroTag: props['heroTag'] ?? const _DefaultHeroTag(),
      elevation: props['elevation']?.toDouble(),
      focusElevation: props['focusElevation']?.toDouble(),
      hoverElevation: props['hoverElevation']?.toDouble(),
      splashColor: props['splashColor'],
      highlightElevation: props['highlightElevation']?.toDouble(),
      disabledElevation: props['disabledElevation']?.toDouble(),
      onPressed: props['onPressed'],
      mouseCursor: props['mouseCursor'] ?? SystemMouseCursors.click,
      shape: props['shape'],
      isExtended: props['isExtended'] ?? true,
      materialTapTargetSize: props['materialTapTargetSize'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      extendedIconLabelSpacing: props['extendedIconLabelSpacing']?.toDouble(),
      extendedPadding: props['extendedPadding'],
      extendedTextStyle: props['extendedTextStyle'],
      icon: props['icon'],
      label: props['label'],
      enableFeedback: props['enableFeedback']),
  'FloatingActionButton.large': (props) => FloatingActionButton.large(
      key: props['key'],
      child: props['child'],
      tooltip: props['tooltip'],
      foregroundColor: props['foregroundColor'],
      backgroundColor: props['backgroundColor'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      splashColor: props['splashColor'],
      heroTag: props['heroTag'] ?? const _DefaultHeroTag(),
      elevation: props['elevation']?.toDouble(),
      focusElevation: props['focusElevation']?.toDouble(),
      hoverElevation: props['hoverElevation']?.toDouble(),
      highlightElevation: props['highlightElevation']?.toDouble(),
      disabledElevation: props['disabledElevation']?.toDouble(),
      onPressed: props['onPressed'],
      mouseCursor: props['mouseCursor'],
      shape: props['shape'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      materialTapTargetSize: props['materialTapTargetSize'],
      enableFeedback: props['enableFeedback']),
  'FloatingActionButton.small': (props) => FloatingActionButton.small(
      key: props['key'],
      child: props['child'],
      tooltip: props['tooltip'],
      foregroundColor: props['foregroundColor'],
      backgroundColor: props['backgroundColor'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      splashColor: props['splashColor'],
      heroTag: props['heroTag'] ?? const _DefaultHeroTag(),
      elevation: props['elevation']?.toDouble(),
      focusElevation: props['focusElevation']?.toDouble(),
      hoverElevation: props['hoverElevation']?.toDouble(),
      highlightElevation: props['highlightElevation']?.toDouble(),
      disabledElevation: props['disabledElevation']?.toDouble(),
      onPressed: props['onPressed'],
      mouseCursor: props['mouseCursor'],
      shape: props['shape'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      materialTapTargetSize: props['materialTapTargetSize'],
      enableFeedback: props['enableFeedback']),
  'FloatingActionButtonThemeData': (props) => FloatingActionButtonThemeData(
      foregroundColor: props['foregroundColor'],
      backgroundColor: props['backgroundColor'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      splashColor: props['splashColor'],
      elevation: props['elevation']?.toDouble(),
      focusElevation: props['focusElevation']?.toDouble(),
      hoverElevation: props['hoverElevation']?.toDouble(),
      disabledElevation: props['disabledElevation']?.toDouble(),
      highlightElevation: props['highlightElevation']?.toDouble(),
      shape: props['shape'],
      enableFeedback: props['enableFeedback'],
      iconSize: props['iconSize']?.toDouble(),
      sizeConstraints: props['sizeConstraints'],
      smallSizeConstraints: props['smallSizeConstraints'],
      largeSizeConstraints: props['largeSizeConstraints'],
      extendedSizeConstraints: props['extendedSizeConstraints'],
      extendedIconLabelSpacing: props['extendedIconLabelSpacing']?.toDouble(),
      extendedPadding: props['extendedPadding'],
      extendedTextStyle: props['extendedTextStyle'],
      mouseCursor: props['mouseCursor']),
  'FloatingActionButtonThemeData.lerp': (props) =>
      FloatingActionButtonThemeData.lerp(
          props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'FloatingCursorDragState.End': FloatingCursorDragState.End,
  'FloatingCursorDragState.Start': FloatingCursorDragState.Start,
  'FloatingCursorDragState.Update': FloatingCursorDragState.Update,
  'FloatingCursorDragState.values': FloatingCursorDragState.values,
  'FloatingHeaderSnapConfiguration': (props) => FloatingHeaderSnapConfiguration(
      curve: props['curve'] ?? Curves.ease,
      duration: props['duration'] ?? const Duration(milliseconds: 300)),
  'FloatingLabelAlignment.center': FloatingLabelAlignment.center,
  'FloatingLabelAlignment.start': FloatingLabelAlignment.start,
  'FloatingLabelBehavior.always': FloatingLabelBehavior.always,
  'FloatingLabelBehavior.auto': FloatingLabelBehavior.auto,
  'FloatingLabelBehavior.never': FloatingLabelBehavior.never,
  'FloatingLabelBehavior.values': FloatingLabelBehavior.values,
  'Flow': (props) => Flow(
      key: props['key'],
      delegate: props['delegate'],
      children: as<Widget>(props['children']) ?? const <Widget>[],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'Flow.unwrapped': (props) => Flow.unwrapped(
      key: props['key'],
      delegate: props['delegate'],
      children: as<Widget>(props['children']) ?? const <Widget>[],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'FlowParentData': (props) => FlowParentData(),
  'FlutterError': (props) => FlutterError(props['pa'][0]),
  'FlutterError.addDefaultStackFilter': (props) =>
      FlutterError.addDefaultStackFilter(props['pa'][0]),
  'FlutterError.defaultStackFilter': (props) =>
      FlutterError.defaultStackFilter(props['pa'][0]),
  'FlutterError.demangleStackTrace': FlutterError.demangleStackTrace,
  'FlutterError.dumpErrorToConsole': (props) => FlutterError.dumpErrorToConsole(
      props['pa'][0],
      forceReport: props['forceReport'] ?? false),
  'FlutterError.fromParts': (props) => FlutterError.fromParts(props['pa'][0]),
  'FlutterError.onError': FlutterError.onError,
  'FlutterError.presentError': FlutterError.presentError,
  'FlutterError.reportError': (props) =>
      FlutterError.reportError(props['pa'][0]),
  'FlutterError.resetErrorCount': (props) => FlutterError.resetErrorCount(),
  'FlutterError.wrapWidth': FlutterError.wrapWidth,
  'FlutterErrorDetails': (props) => FlutterErrorDetails(
      exception: props['exception'],
      stack: props['stack'],
      library: props['library'] ?? 'Flutter framework',
      context: props['context'],
      stackFilter: props['stackFilter'],
      informationCollector: props['informationCollector'],
      silent: props['silent'] ?? false),
  'FlutterErrorDetails.propertiesTransformers':
      FlutterErrorDetails.propertiesTransformers,
  'FlutterErrorDetailsForPointerEventDispatcher': (props) =>
      FlutterErrorDetailsForPointerEventDispatcher(
          exception: props['exception'],
          stack: props['stack'],
          library: props['library'] ?? 'Flutter framework',
          context: props['context'],
          event: props['event'],
          hitTestEntry: props['hitTestEntry'],
          informationCollector: props['informationCollector'],
          silent: props['silent'] ?? false),
  'FlutterLogo': (props) => FlutterLogo(
      key: props['key'],
      size: props['size']?.toDouble(),
      textColor: props['textColor'] ?? const Color(0xFF757575),
      style: props['style'] ?? FlutterLogoStyle.markOnly,
      duration: props['duration'] ?? const Duration(milliseconds: 750),
      curve: props['curve'] ?? Curves.fastOutSlowIn),
  'FlutterLogoDecoration': (props) => FlutterLogoDecoration(
      textColor: props['textColor'] ?? const Color(0xFF757575),
      style: props['style'] ?? FlutterLogoStyle.markOnly,
      margin: props['margin'] ?? EdgeInsets.zero),
  'FlutterLogoDecoration.lerp': (props) => FlutterLogoDecoration.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'FlutterLogoStyle.horizontal': FlutterLogoStyle.horizontal,
  'FlutterLogoStyle.markOnly': FlutterLogoStyle.markOnly,
  'FlutterLogoStyle.stacked': FlutterLogoStyle.stacked,
  'FlutterLogoStyle.values': FlutterLogoStyle.values,
  'Focus': (props) => Focus(
      key: props['key'],
      child: props['child'],
      focusNode: props['focusNode'],
      parentNode: props['parentNode'],
      autofocus: props['autofocus'] ?? false,
      onFocusChange: props['onFocusChange'],
      onKeyEvent: props['onKeyEvent'],
      onKey: props['onKey'],
      canRequestFocus: props['canRequestFocus'],
      skipTraversal: props['skipTraversal'],
      descendantsAreFocusable: props['descendantsAreFocusable'],
      descendantsAreTraversable: props['descendantsAreTraversable'],
      includeSemantics: props['includeSemantics'] ?? true,
      debugLabel: props['debugLabel']),
  'Focus.isAt': (props) => Focus.isAt(props['pa'][0]),
  'Focus.maybeOf': (props) => Focus.maybeOf(props['pa'][0],
      scopeOk: props['scopeOk'] ?? false,
      createDependency: props['createDependency'] ?? true),
  'Focus.of': (props) => Focus.of(props['pa'][0],
      scopeOk: props['scopeOk'] ?? false,
      createDependency: props['createDependency'] ?? true),
  'Focus.withExternalFocusNode': (props) => Focus.withExternalFocusNode(
      key: props['key'],
      child: props['child'],
      focusNode: props['focusNode'],
      parentNode: props['parentNode'],
      autofocus: props['autofocus'] ?? false,
      onFocusChange: props['onFocusChange'],
      includeSemantics: props['includeSemantics'] ?? true),
  'FocusHighlightMode.touch': FocusHighlightMode.touch,
  'FocusHighlightMode.traditional': FocusHighlightMode.traditional,
  'FocusHighlightMode.values': FocusHighlightMode.values,
  'FocusHighlightStrategy.alwaysTouch': FocusHighlightStrategy.alwaysTouch,
  'FocusHighlightStrategy.alwaysTraditional':
      FocusHighlightStrategy.alwaysTraditional,
  'FocusHighlightStrategy.automatic': FocusHighlightStrategy.automatic,
  'FocusHighlightStrategy.values': FocusHighlightStrategy.values,
  'FocusManager': (props) => FocusManager(),
  'FocusManager.instance': FocusManager.instance,
  'FocusNode': (props) => FocusNode(
      debugLabel: props['debugLabel'],
      onKey: props['onKey'],
      onKeyEvent: props['onKeyEvent'],
      skipTraversal: props['skipTraversal'] ?? false,
      canRequestFocus: props['canRequestFocus'] ?? true,
      descendantsAreFocusable: props['descendantsAreFocusable'] ?? true,
      descendantsAreTraversable: props['descendantsAreTraversable'] ?? true),
  'FocusScope': (props) => FocusScope(
      key: props['key'],
      node: props['node'],
      parentNode: props['parentNode'],
      child: props['child'],
      autofocus: props['autofocus'] ?? false,
      onFocusChange: props['onFocusChange'],
      canRequestFocus: props['canRequestFocus'],
      skipTraversal: props['skipTraversal'],
      onKeyEvent: props['onKeyEvent'],
      onKey: props['onKey'],
      debugLabel: props['debugLabel']),
  'FocusScope.of': (props) => FocusScope.of(props['pa'][0],
      createDependency: props['createDependency'] ?? true),
  'FocusScope.withExternalFocusNode': (props) =>
      FocusScope.withExternalFocusNode(
          key: props['key'],
          child: props['child'],
          focusScopeNode: props['focusScopeNode'],
          parentNode: props['parentNode'],
          autofocus: props['autofocus'] ?? false,
          onFocusChange: props['onFocusChange']),
  'FocusScopeNode': (props) => FocusScopeNode(
      debugLabel: props['debugLabel'],
      onKeyEvent: props['onKeyEvent'],
      onKey: props['onKey'],
      skipTraversal: props['skipTraversal'] ?? false,
      canRequestFocus: props['canRequestFocus'] ?? true,
      traversalEdgeBehavior:
          props['traversalEdgeBehavior'] ?? TraversalEdgeBehavior.closedLoop),
  'FocusTraversalGroup': (props) => FocusTraversalGroup(
      key: props['key'],
      policy: props['policy'],
      descendantsAreFocusable: props['descendantsAreFocusable'] ?? true,
      descendantsAreTraversable: props['descendantsAreTraversable'] ?? true,
      child: props['child']),
  'FocusTraversalGroup.maybeOf': (props) =>
      FocusTraversalGroup.maybeOf(props['pa'][0]),
  'FocusTraversalGroup.maybeOfNode': (props) =>
      FocusTraversalGroup.maybeOfNode(props['pa'][0]),
  'FocusTraversalGroup.of': (props) => FocusTraversalGroup.of(props['pa'][0]),
  'FocusTraversalOrder': (props) => FocusTraversalOrder(
      key: props['key'], order: props['order'], child: props['child']),
  'FocusTraversalOrder.maybeOf': (props) =>
      FocusTraversalOrder.maybeOf(props['pa'][0]),
  'FocusTraversalOrder.of': (props) => FocusTraversalOrder.of(props['pa'][0]),
  'FocusableActionDetector': (props) => FocusableActionDetector(
      key: props['key'],
      enabled: props['enabled'] ?? true,
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      descendantsAreFocusable: props['descendantsAreFocusable'] ?? true,
      descendantsAreTraversable: props['descendantsAreTraversable'] ?? true,
      shortcuts: props['shortcuts'],
      actions: props['actions'],
      onShowFocusHighlight: props['onShowFocusHighlight'],
      onShowHoverHighlight: props['onShowHoverHighlight'],
      onFocusChange: props['onFocusChange'],
      mouseCursor: props['mouseCursor'] ?? MouseCursor.defer,
      includeFocusSemantics: props['includeFocusSemantics'] ?? true,
      child: props['child']),
  'FollowerLayer': (props) => FollowerLayer(
      link: props['link'],
      showWhenUnlinked: props['showWhenUnlinked'] ?? true,
      unlinkedOffset: props['unlinkedOffset'] ?? Offset.zero,
      linkedOffset: props['linkedOffset'] ?? Offset.zero),
  'FontFeature': (props) => FontFeature(
      props['pa'][0], (props['pa'].length > 1 ? props['pa'][1] : null) ?? 1),
  'FontFeature.alternative': (props) => FontFeature.alternative(props['pa'][0]),
  'FontFeature.alternativeFractions': (props) =>
      const FontFeature.alternativeFractions(),
  'FontFeature.caseSensitiveForms': (props) =>
      const FontFeature.caseSensitiveForms(),
  'FontFeature.characterVariant': (props) =>
      FontFeature.characterVariant(props['pa'][0]),
  'FontFeature.contextualAlternates': (props) =>
      const FontFeature.contextualAlternates(),
  'FontFeature.denominator': (props) => const FontFeature.denominator(),
  'FontFeature.disable': (props) => FontFeature.disable(props['pa'][0]),
  'FontFeature.enable': (props) => FontFeature.enable(props['pa'][0]),
  'FontFeature.fractions': (props) => const FontFeature.fractions(),
  'FontFeature.historicalForms': (props) => const FontFeature.historicalForms(),
  'FontFeature.historicalLigatures': (props) =>
      const FontFeature.historicalLigatures(),
  'FontFeature.liningFigures': (props) => const FontFeature.liningFigures(),
  'FontFeature.localeAware': (props) =>
      FontFeature.localeAware(enable: props['enable'] ?? true),
  'FontFeature.notationalForms': (props) => FontFeature.notationalForms(
      (props['pa'].length > 0 ? props['pa'][0] : null) ?? 1),
  'FontFeature.numerators': (props) => const FontFeature.numerators(),
  'FontFeature.oldstyleFigures': (props) => const FontFeature.oldstyleFigures(),
  'FontFeature.ordinalForms': (props) => const FontFeature.ordinalForms(),
  'FontFeature.proportionalFigures': (props) =>
      const FontFeature.proportionalFigures(),
  'FontFeature.randomize': (props) => const FontFeature.randomize(),
  'FontFeature.scientificInferiors': (props) =>
      const FontFeature.scientificInferiors(),
  'FontFeature.slashedZero': (props) => const FontFeature.slashedZero(),
  'FontFeature.stylisticAlternates': (props) =>
      const FontFeature.stylisticAlternates(),
  'FontFeature.stylisticSet': (props) =>
      FontFeature.stylisticSet(props['pa'][0]),
  'FontFeature.subscripts': (props) => const FontFeature.subscripts(),
  'FontFeature.superscripts': (props) => const FontFeature.superscripts(),
  'FontFeature.swash': (props) =>
      FontFeature.swash((props['pa'].length > 0 ? props['pa'][0] : null) ?? 1),
  'FontFeature.tabularFigures': (props) => const FontFeature.tabularFigures(),
  'FontLoader': (props) => FontLoader(props['pa'][0]),
  'FontStyle.italic': FontStyle.italic,
  'FontStyle.normal': FontStyle.normal,
  'FontStyle.values': FontStyle.values,
  'FontVariation': (props) =>
      FontVariation(props['pa'][0], props['pa'][1]?.toDouble()),
  'FontWeight.bold': FontWeight.bold,
  'FontWeight.lerp': (props) => FontWeight.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'FontWeight.normal': FontWeight.normal,
  'FontWeight.values': FontWeight.values,
  'FontWeight.w100': FontWeight.w100,
  'FontWeight.w200': FontWeight.w200,
  'FontWeight.w300': FontWeight.w300,
  'FontWeight.w400': FontWeight.w400,
  'FontWeight.w500': FontWeight.w500,
  'FontWeight.w600': FontWeight.w600,
  'FontWeight.w700': FontWeight.w700,
  'FontWeight.w800': FontWeight.w800,
  'FontWeight.w900': FontWeight.w900,
  'ForcePressDetails': (props) => ForcePressDetails(
      globalPosition: props['globalPosition'],
      localPosition: props['localPosition'],
      pressure: props['pressure']?.toDouble() ?? 0),
  'ForcePressGestureRecognizer': (props) => ForcePressGestureRecognizer(
      startPressure: props['startPressure']?.toDouble() ?? 0.4,
      peakPressure: props['peakPressure']?.toDouble() ?? 0.85,
      interpolation: props['interpolation'] ?? _inverseLerp,
      debugOwner: props['debugOwner'],
      supportedDevices: props['supportedDevices'],
      allowedButtonsFilter: props['allowedButtonsFilter']),
  'Form': (props) => Form(
      key: props['key'],
      child: props['child'],
      onWillPop: props['onWillPop'],
      onChanged: props['onChanged'],
      autovalidateMode: props['autovalidateMode']),
  'Form.maybeOf': (props) => Form.maybeOf(props['pa'][0]),
  'Form.of': (props) => Form.of(props['pa'][0]),
  'FormField': (props) => FormField(
      key: props['key'],
      builder: props['builder'],
      onSaved: props['onSaved'],
      validator: props['validator'],
      initialValue: props['initialValue'],
      enabled: props['enabled'] ?? true,
      autovalidateMode: props['autovalidateMode'],
      restorationId: props['restorationId']),
  'FoundationServiceExtensions.activeDevToolsServerAddress':
      FoundationServiceExtensions.activeDevToolsServerAddress,
  'FoundationServiceExtensions.brightnessOverride':
      FoundationServiceExtensions.brightnessOverride,
  'FoundationServiceExtensions.connectedVmServiceUri':
      FoundationServiceExtensions.connectedVmServiceUri,
  'FoundationServiceExtensions.exit': FoundationServiceExtensions.exit,
  'FoundationServiceExtensions.platformOverride':
      FoundationServiceExtensions.platformOverride,
  'FoundationServiceExtensions.reassemble':
      FoundationServiceExtensions.reassemble,
  'FoundationServiceExtensions.values': FoundationServiceExtensions.values,
  'FractionColumnWidth': (props) =>
      FractionColumnWidth(props['pa'][0]?.toDouble()),
  'FractionalOffset': (props) =>
      FractionalOffset(props['pa'][0]?.toDouble(), props['pa'][1]?.toDouble()),
  'FractionalOffset.bottomCenter': FractionalOffset.bottomCenter,
  'FractionalOffset.bottomLeft': FractionalOffset.bottomLeft,
  'FractionalOffset.bottomRight': FractionalOffset.bottomRight,
  'FractionalOffset.center': FractionalOffset.center,
  'FractionalOffset.centerLeft': FractionalOffset.centerLeft,
  'FractionalOffset.centerRight': FractionalOffset.centerRight,
  'FractionalOffset.fromOffsetAndRect': (props) =>
      FractionalOffset.fromOffsetAndRect(props['pa'][0], props['pa'][1]),
  'FractionalOffset.fromOffsetAndSize': (props) =>
      FractionalOffset.fromOffsetAndSize(props['pa'][0], props['pa'][1]),
  'FractionalOffset.lerp': (props) => FractionalOffset.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'FractionalOffset.topCenter': FractionalOffset.topCenter,
  'FractionalOffset.topLeft': FractionalOffset.topLeft,
  'FractionalOffset.topRight': FractionalOffset.topRight,
  'FractionalOffsetTween': (props) =>
      FractionalOffsetTween(begin: props['begin'], end: props['end']),
  'FractionalTranslation': (props) => FractionalTranslation(
      key: props['key'],
      translation: props['translation'],
      transformHitTests: props['transformHitTests'] ?? true,
      child: props['child']),
  'FractionallySizedBox': (props) => FractionallySizedBox(
      key: props['key'],
      alignment: props['alignment'] ?? Alignment.center,
      widthFactor: props['widthFactor']?.toDouble(),
      heightFactor: props['heightFactor']?.toDouble(),
      child: props['child']),
  'FragmentProgram.fromAsset': (props) =>
      FragmentProgram.fromAsset(props['pa'][0]),
  'FramePhase.buildFinish': FramePhase.buildFinish,
  'FramePhase.buildStart': FramePhase.buildStart,
  'FramePhase.rasterFinish': FramePhase.rasterFinish,
  'FramePhase.rasterFinishWallTime': FramePhase.rasterFinishWallTime,
  'FramePhase.rasterStart': FramePhase.rasterStart,
  'FramePhase.values': FramePhase.values,
  'FramePhase.vsyncStart': FramePhase.vsyncStart,
  'FrameTiming': (props) => FrameTiming(
      vsyncStart: props['vsyncStart'],
      buildStart: props['buildStart'],
      buildFinish: props['buildFinish'],
      rasterStart: props['rasterStart'],
      rasterFinish: props['rasterFinish'],
      rasterFinishWallTime: props['rasterFinishWallTime'],
      layerCacheCount: props['layerCacheCount'] ?? 0,
      layerCacheBytes: props['layerCacheBytes'] ?? 0,
      pictureCacheCount: props['pictureCacheCount'] ?? 0,
      pictureCacheBytes: props['pictureCacheBytes'] ?? 0,
      frameNumber: props['frameNumber'] ?? -1),
  'FrictionSimulation': (props) => FrictionSimulation(
      props['pa'][0]?.toDouble(),
      props['pa'][1]?.toDouble(),
      props['pa'][2]?.toDouble(),
      tolerance: props['tolerance'] ?? Tolerance.defaultTolerance,
      constantDeceleration: props['constantDeceleration']?.toDouble() ?? 0),
  'FrictionSimulation.through': (props) => FrictionSimulation.through(
      props['pa'][0]?.toDouble(),
      props['pa'][1]?.toDouble(),
      props['pa'][2]?.toDouble(),
      props['pa'][3]?.toDouble()),
  'FutureBuilder': (props) => FutureBuilder(
      key: props['key'],
      future: props['future'],
      initialData: props['initialData'],
      builder: props['builder']),
  'FutureBuilder.debugRethrowError': FutureBuilder.debugRethrowError,
  'GLFWKeyHelper': (props) => GLFWKeyHelper(),
  'GLFWKeyHelper.modifierAlt': GLFWKeyHelper.modifierAlt,
  'GLFWKeyHelper.modifierCapsLock': GLFWKeyHelper.modifierCapsLock,
  'GLFWKeyHelper.modifierControl': GLFWKeyHelper.modifierControl,
  'GLFWKeyHelper.modifierMeta': GLFWKeyHelper.modifierMeta,
  'GLFWKeyHelper.modifierNumericPad': GLFWKeyHelper.modifierNumericPad,
  'GLFWKeyHelper.modifierShift': GLFWKeyHelper.modifierShift,
  'GestureArenaManager': (props) => GestureArenaManager(),
  'GestureArenaTeam': (props) => GestureArenaTeam(),
  'GestureDetector': (props) => GestureDetector(
      key: props['key'],
      child: props['child'],
      onTapDown: props['onTapDown'],
      onTapUp: props['onTapUp'],
      onTap: props['onTap'],
      onTapCancel: props['onTapCancel'],
      onSecondaryTap: props['onSecondaryTap'],
      onSecondaryTapDown: props['onSecondaryTapDown'],
      onSecondaryTapUp: props['onSecondaryTapUp'],
      onSecondaryTapCancel: props['onSecondaryTapCancel'],
      onTertiaryTapDown: props['onTertiaryTapDown'],
      onTertiaryTapUp: props['onTertiaryTapUp'],
      onTertiaryTapCancel: props['onTertiaryTapCancel'],
      onDoubleTapDown: props['onDoubleTapDown'],
      onDoubleTap: props['onDoubleTap'],
      onDoubleTapCancel: props['onDoubleTapCancel'],
      onLongPressDown: props['onLongPressDown'],
      onLongPressCancel: props['onLongPressCancel'],
      onLongPress: props['onLongPress'],
      onLongPressStart: props['onLongPressStart'],
      onLongPressMoveUpdate: props['onLongPressMoveUpdate'],
      onLongPressUp: props['onLongPressUp'],
      onLongPressEnd: props['onLongPressEnd'],
      onSecondaryLongPressDown: props['onSecondaryLongPressDown'],
      onSecondaryLongPressCancel: props['onSecondaryLongPressCancel'],
      onSecondaryLongPress: props['onSecondaryLongPress'],
      onSecondaryLongPressStart: props['onSecondaryLongPressStart'],
      onSecondaryLongPressMoveUpdate: props['onSecondaryLongPressMoveUpdate'],
      onSecondaryLongPressUp: props['onSecondaryLongPressUp'],
      onSecondaryLongPressEnd: props['onSecondaryLongPressEnd'],
      onTertiaryLongPressDown: props['onTertiaryLongPressDown'],
      onTertiaryLongPressCancel: props['onTertiaryLongPressCancel'],
      onTertiaryLongPress: props['onTertiaryLongPress'],
      onTertiaryLongPressStart: props['onTertiaryLongPressStart'],
      onTertiaryLongPressMoveUpdate: props['onTertiaryLongPressMoveUpdate'],
      onTertiaryLongPressUp: props['onTertiaryLongPressUp'],
      onTertiaryLongPressEnd: props['onTertiaryLongPressEnd'],
      onVerticalDragDown: props['onVerticalDragDown'],
      onVerticalDragStart: props['onVerticalDragStart'],
      onVerticalDragUpdate: props['onVerticalDragUpdate'],
      onVerticalDragEnd: props['onVerticalDragEnd'],
      onVerticalDragCancel: props['onVerticalDragCancel'],
      onHorizontalDragDown: props['onHorizontalDragDown'],
      onHorizontalDragStart: props['onHorizontalDragStart'],
      onHorizontalDragUpdate: props['onHorizontalDragUpdate'],
      onHorizontalDragEnd: props['onHorizontalDragEnd'],
      onHorizontalDragCancel: props['onHorizontalDragCancel'],
      onForcePressStart: props['onForcePressStart'],
      onForcePressPeak: props['onForcePressPeak'],
      onForcePressUpdate: props['onForcePressUpdate'],
      onForcePressEnd: props['onForcePressEnd'],
      onPanDown: props['onPanDown'],
      onPanStart: props['onPanStart'],
      onPanUpdate: props['onPanUpdate'],
      onPanEnd: props['onPanEnd'],
      onPanCancel: props['onPanCancel'],
      onScaleStart: props['onScaleStart'],
      onScaleUpdate: props['onScaleUpdate'],
      onScaleEnd: props['onScaleEnd'],
      behavior: props['behavior'],
      excludeFromSemantics: props['excludeFromSemantics'] ?? false,
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      trackpadScrollCausesScale: props['trackpadScrollCausesScale'] ?? false,
      trackpadScrollToScaleFactor: props['trackpadScrollToScaleFactor'] ??
          kDefaultTrackpadScrollToScaleFactor,
      supportedDevices: props['supportedDevices']),
  'GestureDisposition.accepted': GestureDisposition.accepted,
  'GestureDisposition.rejected': GestureDisposition.rejected,
  'GestureDisposition.values': GestureDisposition.values,
  'GestureRecognizerFactoryWithHandlers': (props) =>
      GestureRecognizerFactoryWithHandlers(props['pa'][0], props['pa'][1]),
  'GestureRecognizerState.defunct': GestureRecognizerState.defunct,
  'GestureRecognizerState.possible': GestureRecognizerState.possible,
  'GestureRecognizerState.ready': GestureRecognizerState.ready,
  'GestureRecognizerState.values': GestureRecognizerState.values,
  'GestureSettings': (props) => GestureSettings(
      physicalTouchSlop: props['physicalTouchSlop']?.toDouble(),
      physicalDoubleTapSlop: props['physicalDoubleTapSlop']?.toDouble()),
  'GlobalObjectKey': (props) => GlobalObjectKey(props['pa'][0]),
  'GlowingOverscrollIndicator': (props) => GlowingOverscrollIndicator(
      key: props['key'],
      showLeading: props['showLeading'] ?? true,
      showTrailing: props['showTrailing'] ?? true,
      axisDirection: props['axisDirection'],
      color: props['color'],
      notificationPredicate:
          props['notificationPredicate'] ?? defaultScrollNotificationPredicate,
      child: props['child']),
  'GradientRotation': (props) => GradientRotation(props['pa'][0]?.toDouble()),
  'GranularlyExtendSelectionEvent': (props) => GranularlyExtendSelectionEvent(
      forward: props['forward'],
      isEnd: props['isEnd'],
      granularity: props['granularity']),
  'GravitySimulation': (props) => GravitySimulation(
      props['pa'][0]?.toDouble(),
      props['pa'][1]?.toDouble(),
      props['pa'][2]?.toDouble(),
      props['pa'][3]?.toDouble()),
  'GridPaper': (props) => GridPaper(
      key: props['key'],
      color: props['color'] ?? const Color(0x7FC3E8F3),
      interval: props['interval']?.toDouble() ?? 100.0,
      divisions: props['divisions'] ?? 2,
      subdivisions: props['subdivisions'] ?? 5,
      child: props['child']),
  'GridTile': (props) => GridTile(
      key: props['key'],
      header: props['header'],
      footer: props['footer'],
      child: props['child']),
  'GridTileBar': (props) => GridTileBar(
      key: props['key'],
      backgroundColor: props['backgroundColor'],
      leading: props['leading'],
      title: props['title'],
      subtitle: props['subtitle'],
      trailing: props['trailing']),
  'GridView': (props) => GridView(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      primary: props['primary'],
      physics: props['physics'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      padding: props['padding'],
      gridDelegate: props['gridDelegate'],
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true,
      cacheExtent: props['cacheExtent']?.toDouble(),
      children: as<Widget>(props['children']) ?? const <Widget>[],
      semanticChildCount: props['semanticChildCount'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual,
      restorationId: props['restorationId']),
  'GridView.builder': (props) => GridView.builder(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      primary: props['primary'],
      physics: props['physics'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      padding: props['padding'],
      gridDelegate: props['gridDelegate'],
      itemBuilder: props['itemBuilder'],
      findChildIndexCallback: props['findChildIndexCallback'],
      itemCount: props['itemCount'],
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true,
      cacheExtent: props['cacheExtent']?.toDouble(),
      semanticChildCount: props['semanticChildCount'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'GridView.count': (props) => GridView.count(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      primary: props['primary'],
      physics: props['physics'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      padding: props['padding'],
      crossAxisCount: props['crossAxisCount'],
      mainAxisSpacing: props['mainAxisSpacing']?.toDouble() ?? 0.0,
      crossAxisSpacing: props['crossAxisSpacing']?.toDouble() ?? 0.0,
      childAspectRatio: props['childAspectRatio']?.toDouble() ?? 1.0,
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true,
      cacheExtent: props['cacheExtent']?.toDouble(),
      children: as<Widget>(props['children']) ?? const <Widget>[],
      semanticChildCount: props['semanticChildCount'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'GridView.custom': (props) => GridView.custom(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      primary: props['primary'],
      physics: props['physics'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      padding: props['padding'],
      gridDelegate: props['gridDelegate'],
      childrenDelegate: props['childrenDelegate'],
      cacheExtent: props['cacheExtent']?.toDouble(),
      semanticChildCount: props['semanticChildCount'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'GridView.extent': (props) => GridView.extent(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      primary: props['primary'],
      physics: props['physics'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      padding: props['padding'],
      maxCrossAxisExtent: props['maxCrossAxisExtent']?.toDouble() ?? 0,
      mainAxisSpacing: props['mainAxisSpacing']?.toDouble() ?? 0.0,
      crossAxisSpacing: props['crossAxisSpacing']?.toDouble() ?? 0.0,
      childAspectRatio: props['childAspectRatio']?.toDouble() ?? 1.0,
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true,
      cacheExtent: props['cacheExtent']?.toDouble(),
      children: as<Widget>(props['children']) ?? const <Widget>[],
      semanticChildCount: props['semanticChildCount'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'GrowthDirection.forward': GrowthDirection.forward,
  'GrowthDirection.reverse': GrowthDirection.reverse,
  'GrowthDirection.values': GrowthDirection.values,
  'GtkKeyHelper': (props) => GtkKeyHelper(),
  'GtkKeyHelper.modifierCapsLock': GtkKeyHelper.modifierCapsLock,
  'GtkKeyHelper.modifierControl': GtkKeyHelper.modifierControl,
  'GtkKeyHelper.modifierMeta': GtkKeyHelper.modifierMeta,
  'GtkKeyHelper.modifierMod1': GtkKeyHelper.modifierMod1,
  'GtkKeyHelper.modifierMod2': GtkKeyHelper.modifierMod2,
  'GtkKeyHelper.modifierShift': GtkKeyHelper.modifierShift,
  'HSLColor.fromAHSL': (props) => HSLColor.fromAHSL(
      props['pa'][0]?.toDouble(),
      props['pa'][1]?.toDouble(),
      props['pa'][2]?.toDouble(),
      props['pa'][3]?.toDouble()),
  'HSLColor.fromColor': (props) => HSLColor.fromColor(props['pa'][0]),
  'HSLColor.lerp': (props) =>
      HSLColor.lerp(props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'HSVColor.fromAHSV': (props) => HSVColor.fromAHSV(
      props['pa'][0]?.toDouble(),
      props['pa'][1]?.toDouble(),
      props['pa'][2]?.toDouble(),
      props['pa'][3]?.toDouble()),
  'HSVColor.fromColor': (props) => HSVColor.fromColor(props['pa'][0]),
  'HSVColor.lerp': (props) =>
      HSVColor.lerp(props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'HardwareKeyboard': (props) => HardwareKeyboard(),
  'HardwareKeyboard.instance': HardwareKeyboard.instance,
  'HashedObserverList': (props) => HashedObserverList(),
  'Hero': (props) => Hero(
      key: props['key'],
      tag: props['tag'],
      createRectTween: props['createRectTween'],
      flightShuttleBuilder: props['flightShuttleBuilder'],
      placeholderBuilder: props['placeholderBuilder'],
      transitionOnUserGestures: props['transitionOnUserGestures'] ?? false,
      child: props['child']),
  'HeroController': (props) =>
      HeroController(createRectTween: props['createRectTween']),
  'HeroControllerScope': (props) => HeroControllerScope(
      key: props['key'],
      controller: props['controller'],
      child: props['child']),
  'HeroControllerScope.maybeOf': (props) =>
      HeroControllerScope.maybeOf(props['pa'][0]),
  'HeroControllerScope.none': (props) =>
      HeroControllerScope.none(key: props['key'], child: props['child']),
  'HeroControllerScope.of': (props) => HeroControllerScope.of(props['pa'][0]),
  'HeroFlightDirection.pop': HeroFlightDirection.pop,
  'HeroFlightDirection.push': HeroFlightDirection.push,
  'HeroFlightDirection.values': HeroFlightDirection.values,
  'HeroMode': (props) => HeroMode(
      key: props['key'],
      child: props['child'],
      enabled: props['enabled'] ?? true),
  'HitTestBehavior.deferToChild': HitTestBehavior.deferToChild,
  'HitTestBehavior.opaque': HitTestBehavior.opaque,
  'HitTestBehavior.translucent': HitTestBehavior.translucent,
  'HitTestBehavior.values': HitTestBehavior.values,
  'HitTestEntry': (props) => HitTestEntry<HitTestTarget>(props['pa'][0]),
  'HitTestResult': (props) => HitTestResult(),
  'HitTestResult.wrap': (props) => HitTestResult.wrap(props['pa'][0]),
  'HoldScrollActivity': (props) => HoldScrollActivity(
      delegate: props['delegate'], onHoldCanceled: props['onHoldCanceled']),
  'HorizontalDragGestureRecognizer': (props) => HorizontalDragGestureRecognizer(
      debugOwner: props['debugOwner'],
      supportedDevices: props['supportedDevices'],
      allowedButtonsFilter: props['allowedButtonsFilter']),
  'HorizontalMultiDragGestureRecognizer': (props) =>
      HorizontalMultiDragGestureRecognizer(
          debugOwner: props['debugOwner'],
          supportedDevices: props['supportedDevices'],
          allowedButtonsFilter: props['allowedButtonsFilter']),
  'HourFormat.H': HourFormat.H,
  'HourFormat.HH': HourFormat.HH,
  'HourFormat.h': HourFormat.h,
  'HourFormat.values': HourFormat.values,
  'HtmlElementView': (props) => HtmlElementView(
      key: props['key'],
      viewType: props['viewType'],
      onPlatformViewCreated: props['onPlatformViewCreated']),
  'IOSScrollViewFlingVelocityTracker': (props) =>
      IOSScrollViewFlingVelocityTracker(props['pa'][0]),
  'Icon': (props) => Icon(props['pa'][0],
      key: props['key'],
      size: props['size']?.toDouble(),
      fill: props['fill']?.toDouble(),
      weight: props['weight']?.toDouble(),
      grade: props['grade']?.toDouble(),
      opticalSize: props['opticalSize']?.toDouble(),
      color: props['color'],
      shadows: as<Shadow>(props['shadows']),
      semanticLabel: props['semanticLabel'],
      textDirection: props['textDirection']),
  'IconButton': (props) => IconButton(
      key: props['key'],
      iconSize: props['iconSize']?.toDouble(),
      visualDensity: props['visualDensity'],
      padding: props['padding'],
      alignment: props['alignment'],
      splashRadius: props['splashRadius']?.toDouble(),
      color: props['color'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      highlightColor: props['highlightColor'],
      splashColor: props['splashColor'],
      disabledColor: props['disabledColor'],
      onPressed: props['onPressed'],
      mouseCursor: props['mouseCursor'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      tooltip: props['tooltip'],
      enableFeedback: props['enableFeedback'],
      constraints: props['constraints'],
      style: props['style'],
      isSelected: props['isSelected'],
      selectedIcon: props['selectedIcon'],
      icon: props['icon']),
  'IconButton.filled': (props) => IconButton.filled(
      key: props['key'],
      iconSize: props['iconSize']?.toDouble(),
      visualDensity: props['visualDensity'],
      padding: props['padding'],
      alignment: props['alignment'],
      splashRadius: props['splashRadius']?.toDouble(),
      color: props['color'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      highlightColor: props['highlightColor'],
      splashColor: props['splashColor'],
      disabledColor: props['disabledColor'],
      onPressed: props['onPressed'],
      mouseCursor: props['mouseCursor'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      tooltip: props['tooltip'],
      enableFeedback: props['enableFeedback'],
      constraints: props['constraints'],
      style: props['style'],
      isSelected: props['isSelected'],
      selectedIcon: props['selectedIcon'],
      icon: props['icon']),
  'IconButton.filledTonal': (props) => IconButton.filledTonal(
      key: props['key'],
      iconSize: props['iconSize']?.toDouble(),
      visualDensity: props['visualDensity'],
      padding: props['padding'],
      alignment: props['alignment'],
      splashRadius: props['splashRadius']?.toDouble(),
      color: props['color'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      highlightColor: props['highlightColor'],
      splashColor: props['splashColor'],
      disabledColor: props['disabledColor'],
      onPressed: props['onPressed'],
      mouseCursor: props['mouseCursor'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      tooltip: props['tooltip'],
      enableFeedback: props['enableFeedback'],
      constraints: props['constraints'],
      style: props['style'],
      isSelected: props['isSelected'],
      selectedIcon: props['selectedIcon'],
      icon: props['icon']),
  'IconButton.outlined': (props) => IconButton.outlined(
      key: props['key'],
      iconSize: props['iconSize']?.toDouble(),
      visualDensity: props['visualDensity'],
      padding: props['padding'],
      alignment: props['alignment'],
      splashRadius: props['splashRadius']?.toDouble(),
      color: props['color'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      highlightColor: props['highlightColor'],
      splashColor: props['splashColor'],
      disabledColor: props['disabledColor'],
      onPressed: props['onPressed'],
      mouseCursor: props['mouseCursor'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      tooltip: props['tooltip'],
      enableFeedback: props['enableFeedback'],
      constraints: props['constraints'],
      style: props['style'],
      isSelected: props['isSelected'],
      selectedIcon: props['selectedIcon'],
      icon: props['icon']),
  'IconButton.styleFrom': (props) => IconButton.styleFrom(
      foregroundColor: props['foregroundColor'],
      backgroundColor: props['backgroundColor'],
      disabledForegroundColor: props['disabledForegroundColor'],
      disabledBackgroundColor: props['disabledBackgroundColor'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      highlightColor: props['highlightColor'],
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      elevation: props['elevation']?.toDouble(),
      minimumSize: props['minimumSize'],
      fixedSize: props['fixedSize'],
      maximumSize: props['maximumSize'],
      iconSize: props['iconSize']?.toDouble(),
      side: props['side'],
      shape: props['shape'],
      padding: props['padding'],
      enabledMouseCursor: props['enabledMouseCursor'],
      disabledMouseCursor: props['disabledMouseCursor'],
      visualDensity: props['visualDensity'],
      tapTargetSize: props['tapTargetSize'],
      animationDuration: props['animationDuration'],
      enableFeedback: props['enableFeedback'],
      alignment: props['alignment'],
      splashFactory: props['splashFactory']),
  'IconButtonTheme': (props) => IconButtonTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'IconButtonTheme.of': (props) => IconButtonTheme.of(props['pa'][0]),
  'IconButtonThemeData': (props) => IconButtonThemeData(style: props['style']),
  'IconButtonThemeData.lerp': (props) => IconButtonThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'IconDataProperty': (props) => IconDataProperty(
      props['pa'][0], props['pa'][1],
      ifNull: props['ifNull'],
      showName: props['showName'] ?? true,
      style: props['style'] ?? DiagnosticsTreeStyle.singleLine,
      level: props['level'] ?? DiagnosticLevel.info),
  'IconTheme': (props) =>
      IconTheme(key: props['key'], data: props['data'], child: props['child']),
  'IconTheme.merge': (props) => IconTheme.merge(
      key: props['key'], data: props['data'], child: props['child']),
  'IconTheme.of': (props) => IconTheme.of(props['pa'][0]),
  'IconThemeData': (props) => IconThemeData(
      size: props['size']?.toDouble(),
      fill: props['fill']?.toDouble(),
      weight: props['weight']?.toDouble(),
      grade: props['grade']?.toDouble(),
      opticalSize: props['opticalSize']?.toDouble(),
      color: props['color'],
      opacity: props['opacity']?.toDouble(),
      shadows: as<Shadow>(props['shadows'])),
  'IconThemeData.fallback': (props) => const IconThemeData.fallback(),
  'IconThemeData.lerp': (props) => IconThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'IdleScrollActivity': (props) => IdleScrollActivity(props['pa'][0]),
  'IgnorePointer': (props) => IgnorePointer(
      key: props['key'],
      ignoring: props['ignoring'] ?? true,
      ignoringSemantics: props['ignoringSemantics'],
      child: props['child']),
  'Image': (props) => Image(
      key: props['key'],
      image: props['image'],
      frameBuilder: props['frameBuilder'],
      loadingBuilder: props['loadingBuilder'],
      errorBuilder: props['errorBuilder'],
      semanticLabel: props['semanticLabel'],
      excludeFromSemantics: props['excludeFromSemantics'] ?? false,
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      color: props['color'],
      opacity: props['opacity'],
      colorBlendMode: props['colorBlendMode'],
      fit: props['fit'],
      alignment: props['alignment'] ?? Alignment.center,
      repeat: props['repeat'] ?? ImageRepeat.noRepeat,
      centerSlice: props['centerSlice'],
      matchTextDirection: props['matchTextDirection'] ?? false,
      gaplessPlayback: props['gaplessPlayback'] ?? false,
      isAntiAlias: props['isAntiAlias'] ?? false,
      filterQuality: props['filterQuality'] ?? FilterQuality.low),
  'Image.asset': (props) => Image.asset(props['pa'][0],
      key: props['key'],
      bundle: props['bundle'],
      frameBuilder: props['frameBuilder'],
      errorBuilder: props['errorBuilder'],
      semanticLabel: props['semanticLabel'],
      excludeFromSemantics: props['excludeFromSemantics'] ?? false,
      scale: props['scale']?.toDouble() ?? 1.0,
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      color: props['color'],
      opacity: props['opacity'],
      colorBlendMode: props['colorBlendMode'],
      fit: props['fit'],
      alignment: props['alignment'] ?? Alignment.center,
      repeat: props['repeat'] ?? ImageRepeat.noRepeat,
      centerSlice: props['centerSlice'],
      matchTextDirection: props['matchTextDirection'] ?? false,
      gaplessPlayback: props['gaplessPlayback'] ?? false,
      isAntiAlias: props['isAntiAlias'] ?? false,
      package: props['package'],
      filterQuality: props['filterQuality'] ?? FilterQuality.low,
      cacheWidth: props['cacheWidth'],
      cacheHeight: props['cacheHeight']),
  'Image.file': (props) => Image.file(props['pa'][0],
      key: props['key'],
      scale: props['scale']?.toDouble() ?? 1.0,
      frameBuilder: props['frameBuilder'],
      errorBuilder: props['errorBuilder'],
      semanticLabel: props['semanticLabel'],
      excludeFromSemantics: props['excludeFromSemantics'] ?? false,
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      color: props['color'],
      opacity: props['opacity'],
      colorBlendMode: props['colorBlendMode'],
      fit: props['fit'],
      alignment: props['alignment'] ?? Alignment.center,
      repeat: props['repeat'] ?? ImageRepeat.noRepeat,
      centerSlice: props['centerSlice'],
      matchTextDirection: props['matchTextDirection'] ?? false,
      gaplessPlayback: props['gaplessPlayback'] ?? false,
      isAntiAlias: props['isAntiAlias'] ?? false,
      filterQuality: props['filterQuality'] ?? FilterQuality.low,
      cacheWidth: props['cacheWidth'],
      cacheHeight: props['cacheHeight']),
  'Image.memory': (props) => Image.memory(props['pa'][0],
      key: props['key'],
      scale: props['scale']?.toDouble() ?? 1.0,
      frameBuilder: props['frameBuilder'],
      errorBuilder: props['errorBuilder'],
      semanticLabel: props['semanticLabel'],
      excludeFromSemantics: props['excludeFromSemantics'] ?? false,
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      color: props['color'],
      opacity: props['opacity'],
      colorBlendMode: props['colorBlendMode'],
      fit: props['fit'],
      alignment: props['alignment'] ?? Alignment.center,
      repeat: props['repeat'] ?? ImageRepeat.noRepeat,
      centerSlice: props['centerSlice'],
      matchTextDirection: props['matchTextDirection'] ?? false,
      gaplessPlayback: props['gaplessPlayback'] ?? false,
      isAntiAlias: props['isAntiAlias'] ?? false,
      filterQuality: props['filterQuality'] ?? FilterQuality.low,
      cacheWidth: props['cacheWidth'],
      cacheHeight: props['cacheHeight']),
  'Image.network': (props) => Image.network(props['pa'][0],
      key: props['key'],
      scale: props['scale']?.toDouble() ?? 1.0,
      frameBuilder: props['frameBuilder'],
      loadingBuilder: props['loadingBuilder'],
      errorBuilder: props['errorBuilder'],
      semanticLabel: props['semanticLabel'],
      excludeFromSemantics: props['excludeFromSemantics'] ?? false,
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      color: props['color'],
      opacity: props['opacity'],
      colorBlendMode: props['colorBlendMode'],
      fit: props['fit'],
      alignment: props['alignment'] ?? Alignment.center,
      repeat: props['repeat'] ?? ImageRepeat.noRepeat,
      centerSlice: props['centerSlice'],
      matchTextDirection: props['matchTextDirection'] ?? false,
      gaplessPlayback: props['gaplessPlayback'] ?? false,
      filterQuality: props['filterQuality'] ?? FilterQuality.low,
      isAntiAlias: props['isAntiAlias'] ?? false,
      headers: props['headers'],
      cacheWidth: props['cacheWidth'],
      cacheHeight: props['cacheHeight']),
  'Image.onCreate': Image.onCreate,
  'Image.onDispose': Image.onDispose,
  'ImageByteFormat.png': ImageByteFormat.png,
  'ImageByteFormat.rawExtendedRgba128': ImageByteFormat.rawExtendedRgba128,
  'ImageByteFormat.rawRgba': ImageByteFormat.rawRgba,
  'ImageByteFormat.rawStraightRgba': ImageByteFormat.rawStraightRgba,
  'ImageByteFormat.rawUnmodified': ImageByteFormat.rawUnmodified,
  'ImageByteFormat.values': ImageByteFormat.values,
  'ImageCache': (props) => ImageCache(),
  'ImageChunkEvent': (props) => ImageChunkEvent(
      cumulativeBytesLoaded: props['cumulativeBytesLoaded'],
      expectedTotalBytes: props['expectedTotalBytes']),
  'ImageConfiguration': (props) => ImageConfiguration(
      bundle: props['bundle'],
      devicePixelRatio: props['devicePixelRatio']?.toDouble(),
      locale: props['locale'],
      textDirection: props['textDirection'],
      size: props['size'],
      platform: props['platform']),
  'ImageConfiguration.empty': ImageConfiguration.empty,
  'ImageFilterLayer': (props) => ImageFilterLayer(
      imageFilter: props['imageFilter'],
      offset: props['offset'] ?? Offset.zero),
  'ImageFiltered': (props) => ImageFiltered(
      key: props['key'],
      imageFilter: props['imageFilter'],
      child: props['child'],
      enabled: props['enabled'] ?? true),
  'ImageIcon': (props) => ImageIcon(props['pa'][0],
      key: props['key'],
      size: props['size']?.toDouble(),
      color: props['color'],
      semanticLabel: props['semanticLabel']),
  'ImageInfo': (props) => ImageInfo(
      image: props['image'],
      scale: props['scale']?.toDouble() ?? 1.0,
      debugLabel: props['debugLabel']),
  'ImageRepeat.noRepeat': ImageRepeat.noRepeat,
  'ImageRepeat.repeat': ImageRepeat.repeat,
  'ImageRepeat.repeatX': ImageRepeat.repeatX,
  'ImageRepeat.repeatY': ImageRepeat.repeatY,
  'ImageRepeat.values': ImageRepeat.values,
  'ImageShader': (props) => ImageShader(
      props['pa'][0], props['pa'][1], props['pa'][2], props['pa'][3],
      filterQuality: props['filterQuality']),
  'ImageSizeInfo': (props) => ImageSizeInfo(
      source: props['source'],
      displaySize: props['displaySize'],
      imageSize: props['imageSize']),
  'ImageStream': (props) => ImageStream(),
  'ImageStreamListener': (props) => ImageStreamListener(props['pa'][0],
      onChunk: props['onChunk'], onError: props['onError']),
  'ImmediateMultiDragGestureRecognizer': (props) =>
      ImmediateMultiDragGestureRecognizer(
          debugOwner: props['debugOwner'],
          supportedDevices: props['supportedDevices'],
          allowedButtonsFilter: props['allowedButtonsFilter']),
  'ImmutableBuffer.fromAsset': (props) =>
      ImmutableBuffer.fromAsset(props['pa'][0]),
  'ImmutableBuffer.fromFilePath': (props) =>
      ImmutableBuffer.fromFilePath(props['pa'][0]),
  'ImmutableBuffer.fromUint8List': (props) =>
      ImmutableBuffer.fromUint8List(props['pa'][0]),
  'IndexedSemantics': (props) => IndexedSemantics(
      key: props['key'], index: props['index'], child: props['child']),
  'IndexedSlot': (props) =>
      IndexedSlot<Element?>(props['pa'][0], props['pa'][1]),
  'IndexedStack': (props) => IndexedStack(
      key: props['key'],
      alignment: props['alignment'] ?? AlignmentDirectional.topStart,
      textDirection: props['textDirection'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      sizing: props['sizing'] ?? StackFit.loose,
      index: props['index'] ?? 0,
      children: as<Widget>(props['children']) ?? const <Widget>[]),
  'InheritedElement': (props) => InheritedElement(props['pa'][0]),
  'InheritedModelElement': (props) => InheritedModelElement(props['pa'][0]),
  'Ink': (props) => Ink(
      key: props['key'],
      padding: props['padding'],
      color: props['color'],
      decoration: props['decoration'],
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      child: props['child']),
  'Ink.image': (props) => Ink.image(
      key: props['key'],
      padding: props['padding'],
      image: props['image'],
      onImageError: props['onImageError'],
      colorFilter: props['colorFilter'],
      fit: props['fit'],
      alignment: props['alignment'] ?? Alignment.center,
      centerSlice: props['centerSlice'],
      repeat: props['repeat'] ?? ImageRepeat.noRepeat,
      matchTextDirection: props['matchTextDirection'] ?? false,
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      child: props['child']),
  'InkDecoration': (props) => InkDecoration(
      decoration: props['decoration'],
      isVisible: props['isVisible'] ?? true,
      configuration: props['configuration'],
      controller: props['controller'],
      referenceBox: props['referenceBox'],
      onRemoved: props['onRemoved']),
  'InkHighlight': (props) => InkHighlight(
      controller: props['controller'],
      referenceBox: props['referenceBox'],
      color: props['color'],
      textDirection: props['textDirection'],
      shape: props['shape'] ?? BoxShape.rectangle,
      radius: props['radius']?.toDouble(),
      borderRadius: props['borderRadius'],
      customBorder: props['customBorder'],
      rectCallback: props['rectCallback'],
      onRemoved: props['onRemoved'],
      fadeDuration: props['fadeDuration'] ?? _kDefaultHighlightFadeDuration),
  'InkResponse': (props) => InkResponse(
      key: props['key'],
      child: props['child'],
      onTap: props['onTap'],
      onTapDown: props['onTapDown'],
      onTapUp: props['onTapUp'],
      onTapCancel: props['onTapCancel'],
      onDoubleTap: props['onDoubleTap'],
      onLongPress: props['onLongPress'],
      onSecondaryTap: props['onSecondaryTap'],
      onSecondaryTapUp: props['onSecondaryTapUp'],
      onSecondaryTapDown: props['onSecondaryTapDown'],
      onSecondaryTapCancel: props['onSecondaryTapCancel'],
      onHighlightChanged: props['onHighlightChanged'],
      onHover: props['onHover'],
      mouseCursor: props['mouseCursor'],
      containedInkWell: props['containedInkWell'] ?? false,
      highlightShape: props['highlightShape'] ?? BoxShape.circle,
      radius: props['radius']?.toDouble(),
      borderRadius: props['borderRadius'],
      customBorder: props['customBorder'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      highlightColor: props['highlightColor'],
      overlayColor: props['overlayColor'],
      splashColor: props['splashColor'],
      splashFactory: props['splashFactory'],
      enableFeedback: props['enableFeedback'] ?? true,
      excludeFromSemantics: props['excludeFromSemantics'] ?? false,
      focusNode: props['focusNode'],
      canRequestFocus: props['canRequestFocus'] ?? true,
      onFocusChange: props['onFocusChange'],
      autofocus: props['autofocus'] ?? false,
      statesController: props['statesController']),
  'InkRipple': (props) => InkRipple(
      controller: props['controller'],
      referenceBox: props['referenceBox'],
      position: props['position'],
      color: props['color'],
      textDirection: props['textDirection'],
      containedInkWell: props['containedInkWell'] ?? false,
      rectCallback: props['rectCallback'],
      borderRadius: props['borderRadius'],
      customBorder: props['customBorder'],
      radius: props['radius']?.toDouble(),
      onRemoved: props['onRemoved']),
  'InkRipple.splashFactory': InkRipple.splashFactory,
  'InkSparkle': (props) => InkSparkle(
      controller: props['controller'],
      referenceBox: props['referenceBox'],
      color: props['color'],
      position: props['position'],
      textDirection: props['textDirection'],
      containedInkWell: props['containedInkWell'] ?? true,
      rectCallback: props['rectCallback'],
      borderRadius: props['borderRadius'],
      customBorder: props['customBorder'],
      radius: props['radius']?.toDouble(),
      onRemoved: props['onRemoved'],
      turbulenceSeed: props['turbulenceSeed']?.toDouble()),
  'InkSparkle.constantTurbulenceSeedSplashFactory':
      InkSparkle.constantTurbulenceSeedSplashFactory,
  'InkSparkle.splashFactory': InkSparkle.splashFactory,
  'InkSplash': (props) => InkSplash(
      controller: props['controller'],
      referenceBox: props['referenceBox'],
      textDirection: props['textDirection'],
      position: props['position'],
      color: props['color'],
      containedInkWell: props['containedInkWell'] ?? false,
      rectCallback: props['rectCallback'],
      borderRadius: props['borderRadius'],
      customBorder: props['customBorder'],
      radius: props['radius']?.toDouble(),
      onRemoved: props['onRemoved']),
  'InkSplash.splashFactory': InkSplash.splashFactory,
  'InkWell': (props) => InkWell(
      key: props['key'],
      child: props['child'],
      onTap: props['onTap'],
      onDoubleTap: props['onDoubleTap'],
      onLongPress: props['onLongPress'],
      onTapDown: props['onTapDown'],
      onTapUp: props['onTapUp'],
      onTapCancel: props['onTapCancel'],
      onSecondaryTap: props['onSecondaryTap'],
      onSecondaryTapUp: props['onSecondaryTapUp'],
      onSecondaryTapDown: props['onSecondaryTapDown'],
      onSecondaryTapCancel: props['onSecondaryTapCancel'],
      onHighlightChanged: props['onHighlightChanged'],
      onHover: props['onHover'],
      mouseCursor: props['mouseCursor'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      highlightColor: props['highlightColor'],
      overlayColor: props['overlayColor'],
      splashColor: props['splashColor'],
      splashFactory: props['splashFactory'],
      radius: props['radius']?.toDouble(),
      borderRadius: props['borderRadius'],
      customBorder: props['customBorder'],
      enableFeedback: props['enableFeedback'] ?? true,
      excludeFromSemantics: props['excludeFromSemantics'] ?? false,
      focusNode: props['focusNode'],
      canRequestFocus: props['canRequestFocus'] ?? true,
      onFocusChange: props['onFocusChange'],
      autofocus: props['autofocus'] ?? false,
      statesController: props['statesController']),
  'InlineSpanSemanticsInformation': (props) => InlineSpanSemanticsInformation(
      props['pa'][0],
      isPlaceholder: props['isPlaceholder'] ?? false,
      semanticsLabel: props['semanticsLabel'],
      stringAttributes: as<StringAttribute>(props['stringAttributes']) ??
          const <ui.StringAttribute>[],
      recognizer: props['recognizer']),
  'InlineSpanSemanticsInformation.placeholder':
      InlineSpanSemanticsInformation.placeholder,
  'InputChip': (props) => InputChip(
      key: props['key'],
      avatar: props['avatar'],
      label: props['label'],
      labelStyle: props['labelStyle'],
      labelPadding: props['labelPadding'],
      selected: props['selected'] ?? false,
      isEnabled: props['isEnabled'] ?? true,
      onSelected: props['onSelected'],
      deleteIcon: props['deleteIcon'],
      onDeleted: props['onDeleted'],
      deleteIconColor: props['deleteIconColor'],
      deleteButtonTooltipMessage: props['deleteButtonTooltipMessage'],
      onPressed: props['onPressed'],
      pressElevation: props['pressElevation']?.toDouble(),
      disabledColor: props['disabledColor'],
      selectedColor: props['selectedColor'],
      tooltip: props['tooltip'],
      side: props['side'],
      shape: props['shape'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      backgroundColor: props['backgroundColor'],
      padding: props['padding'],
      visualDensity: props['visualDensity'],
      materialTapTargetSize: props['materialTapTargetSize'],
      elevation: props['elevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      iconTheme: props['iconTheme'],
      selectedShadowColor: props['selectedShadowColor'],
      showCheckmark: props['showCheckmark'],
      checkmarkColor: props['checkmarkColor'],
      avatarBorder: props['avatarBorder'] ?? const CircleBorder(),
      useDeleteButtonTooltip: props['useDeleteButtonTooltip'] ?? true),
  'InputDatePickerFormField': (props) => InputDatePickerFormField(
      key: props['key'],
      initialDate: props['initialDate'],
      firstDate: props['firstDate'],
      lastDate: props['lastDate'],
      onDateSubmitted: props['onDateSubmitted'],
      onDateSaved: props['onDateSaved'],
      selectableDayPredicate: props['selectableDayPredicate'],
      errorFormatText: props['errorFormatText'],
      errorInvalidText: props['errorInvalidText'],
      fieldHintText: props['fieldHintText'],
      fieldLabelText: props['fieldLabelText'],
      keyboardType: props['keyboardType'],
      autofocus: props['autofocus'] ?? false,
      acceptEmptyDate: props['acceptEmptyDate'] ?? false),
  'InputDecoration': (props) => InputDecoration(
      icon: props['icon'],
      iconColor: props['iconColor'],
      label: props['label'],
      labelText: props['labelText'],
      labelStyle: props['labelStyle'],
      floatingLabelStyle: props['floatingLabelStyle'],
      helperText: props['helperText'],
      helperStyle: props['helperStyle'],
      helperMaxLines: props['helperMaxLines'],
      hintText: props['hintText'],
      hintStyle: props['hintStyle'],
      hintTextDirection: props['hintTextDirection'],
      hintMaxLines: props['hintMaxLines'],
      errorText: props['errorText'],
      errorStyle: props['errorStyle'],
      errorMaxLines: props['errorMaxLines'],
      floatingLabelBehavior: props['floatingLabelBehavior'],
      floatingLabelAlignment: props['floatingLabelAlignment'],
      isCollapsed: props['isCollapsed'] ?? false,
      isDense: props['isDense'],
      contentPadding: props['contentPadding'],
      prefixIcon: props['prefixIcon'],
      prefixIconConstraints: props['prefixIconConstraints'],
      prefix: props['prefix'],
      prefixText: props['prefixText'],
      prefixStyle: props['prefixStyle'],
      prefixIconColor: props['prefixIconColor'],
      suffixIcon: props['suffixIcon'],
      suffix: props['suffix'],
      suffixText: props['suffixText'],
      suffixStyle: props['suffixStyle'],
      suffixIconColor: props['suffixIconColor'],
      suffixIconConstraints: props['suffixIconConstraints'],
      counter: props['counter'],
      counterText: props['counterText'],
      counterStyle: props['counterStyle'],
      filled: props['filled'],
      fillColor: props['fillColor'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      errorBorder: props['errorBorder'],
      focusedBorder: props['focusedBorder'],
      focusedErrorBorder: props['focusedErrorBorder'],
      disabledBorder: props['disabledBorder'],
      enabledBorder: props['enabledBorder'],
      border: props['border'],
      enabled: props['enabled'] ?? true,
      semanticCounterText: props['semanticCounterText'],
      alignLabelWithHint: props['alignLabelWithHint'],
      constraints: props['constraints']),
  'InputDecoration.collapsed': (props) => InputDecoration.collapsed(
      hintText: props['hintText'],
      floatingLabelBehavior: props['floatingLabelBehavior'],
      floatingLabelAlignment: props['floatingLabelAlignment'],
      hintStyle: props['hintStyle'],
      hintTextDirection: props['hintTextDirection'],
      filled: props['filled'] ?? false,
      fillColor: props['fillColor'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      border: props['border'] ?? InputBorder.none,
      enabled: props['enabled'] ?? true),
  'InputDecorationTheme': (props) => InputDecorationTheme(
      labelStyle: props['labelStyle'],
      floatingLabelStyle: props['floatingLabelStyle'],
      helperStyle: props['helperStyle'],
      helperMaxLines: props['helperMaxLines'],
      hintStyle: props['hintStyle'],
      errorStyle: props['errorStyle'],
      errorMaxLines: props['errorMaxLines'],
      floatingLabelBehavior:
          props['floatingLabelBehavior'] ?? FloatingLabelBehavior.auto,
      floatingLabelAlignment:
          props['floatingLabelAlignment'] ?? FloatingLabelAlignment.start,
      isDense: props['isDense'] ?? false,
      contentPadding: props['contentPadding'],
      isCollapsed: props['isCollapsed'] ?? false,
      iconColor: props['iconColor'],
      prefixStyle: props['prefixStyle'],
      prefixIconColor: props['prefixIconColor'],
      suffixStyle: props['suffixStyle'],
      suffixIconColor: props['suffixIconColor'],
      counterStyle: props['counterStyle'],
      filled: props['filled'] ?? false,
      fillColor: props['fillColor'],
      activeIndicatorBorder: props['activeIndicatorBorder'],
      outlineBorder: props['outlineBorder'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      errorBorder: props['errorBorder'],
      focusedBorder: props['focusedBorder'],
      focusedErrorBorder: props['focusedErrorBorder'],
      disabledBorder: props['disabledBorder'],
      enabledBorder: props['enabledBorder'],
      border: props['border'],
      alignLabelWithHint: props['alignLabelWithHint'] ?? false,
      constraints: props['constraints']),
  'InputDecorator': (props) => InputDecorator(
      key: props['key'],
      decoration: props['decoration'],
      baseStyle: props['baseStyle'],
      textAlign: props['textAlign'],
      textAlignVertical: props['textAlignVertical'],
      isFocused: props['isFocused'] ?? false,
      isHovering: props['isHovering'] ?? false,
      expands: props['expands'] ?? false,
      isEmpty: props['isEmpty'] ?? false,
      child: props['child']),
  'InputDecorator.containerOf': (props) =>
      InputDecorator.containerOf(props['pa'][0]),
  'IntProperty': (props) => IntProperty(props['pa'][0], props['pa'][1],
      ifNull: props['ifNull'],
      showName: props['showName'] ?? true,
      unit: props['unit'],
      defaultValue: props['defaultValue'] ?? kNoDefaultValue,
      style: props['style'] ?? DiagnosticsTreeStyle.singleLine,
      level: props['level'] ?? DiagnosticLevel.info),
  'IntTween': (props) => IntTween(begin: props['begin'], end: props['end']),
  'InteractiveViewer': (props) => InteractiveViewer(
      key: props['key'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      alignPanAxis: props['alignPanAxis'] ?? false,
      panAxis: props['panAxis'] ?? PanAxis.free,
      boundaryMargin: props['boundaryMargin'] ?? EdgeInsets.zero,
      constrained: props['constrained'] ?? true,
      maxScale: props['maxScale']?.toDouble() ?? 2.5,
      minScale: props['minScale']?.toDouble() ?? 0.8,
      interactionEndFrictionCoefficient:
          props['interactionEndFrictionCoefficient']?.toDouble() ?? _kDrag,
      onInteractionEnd: props['onInteractionEnd'],
      onInteractionStart: props['onInteractionStart'],
      onInteractionUpdate: props['onInteractionUpdate'],
      panEnabled: props['panEnabled'] ?? true,
      scaleEnabled: props['scaleEnabled'] ?? true,
      scaleFactor:
          props['scaleFactor']?.toDouble() ?? kDefaultMouseScrollToScaleFactor,
      transformationController: props['transformationController'],
      alignment: props['alignment'],
      trackpadScrollCausesScale: props['trackpadScrollCausesScale'] ?? false,
      child: props['child']),
  'InteractiveViewer.builder': (props) => InteractiveViewer.builder(
      key: props['key'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      alignPanAxis: props['alignPanAxis'] ?? false,
      panAxis: props['panAxis'] ?? PanAxis.free,
      boundaryMargin: props['boundaryMargin'] ?? EdgeInsets.zero,
      maxScale: props['maxScale']?.toDouble() ?? 2.5,
      minScale: props['minScale']?.toDouble() ?? 0.8,
      interactionEndFrictionCoefficient:
          props['interactionEndFrictionCoefficient']?.toDouble() ?? _kDrag,
      onInteractionEnd: props['onInteractionEnd'],
      onInteractionStart: props['onInteractionStart'],
      onInteractionUpdate: props['onInteractionUpdate'],
      panEnabled: props['panEnabled'] ?? true,
      scaleEnabled: props['scaleEnabled'] ?? true,
      scaleFactor: props['scaleFactor']?.toDouble() ?? 200.0,
      transformationController: props['transformationController'],
      alignment: props['alignment'],
      trackpadScrollCausesScale: props['trackpadScrollCausesScale'] ?? false,
      builder: props['builder']),
  'Interval': (props) => Interval(
      props['pa'][0]?.toDouble(), props['pa'][1]?.toDouble(),
      curve: props['curve'] ?? Curves.linear),
  'IntrinsicColumnWidth': (props) =>
      IntrinsicColumnWidth(flex: props['flex']?.toDouble()),
  'IntrinsicHeight': (props) =>
      IntrinsicHeight(key: props['key'], child: props['child']),
  'IntrinsicWidth': (props) => IntrinsicWidth(
      key: props['key'],
      stepWidth: props['stepWidth']?.toDouble(),
      stepHeight: props['stepHeight']?.toDouble(),
      child: props['child']),
  'IterableProperty': (props) => IterableProperty(
      props['pa'][0], props['pa'][1],
      defaultValue: props['defaultValue'] ?? kNoDefaultValue,
      ifNull: props['ifNull'],
      ifEmpty: props['ifEmpty'] ?? '[]',
      style: props['style'] ?? DiagnosticsTreeStyle.singleLine,
      showName: props['showName'] ?? true,
      showSeparator: props['showSeparator'] ?? true,
      level: props['level'] ?? DiagnosticLevel.info),
  'JSONMessageCodec': (props) => const JSONMessageCodec(),
  'JSONMethodCodec': (props) => const JSONMethodCodec(),
  'KeepAlive': (props) => KeepAlive(
      key: props['key'], keepAlive: props['keepAlive'], child: props['child']),
  'KeepAliveHandle': (props) => KeepAliveHandle(),
  'KeepAliveNotification': (props) => KeepAliveNotification(props['pa'][0]),
  'KeyData': (props) => KeyData(
      timeStamp: props['timeStamp'],
      type: props['type'],
      physical: props['physical'],
      logical: props['logical'],
      character: props['character'],
      synthesized: props['synthesized']),
  'KeyDataTransitMode.keyDataThenRawKeyData':
      KeyDataTransitMode.keyDataThenRawKeyData,
  'KeyDataTransitMode.rawKeyData': KeyDataTransitMode.rawKeyData,
  'KeyDataTransitMode.values': KeyDataTransitMode.values,
  'KeyDownEvent': (props) => KeyDownEvent(
      physicalKey: props['physicalKey'],
      logicalKey: props['logicalKey'],
      character: props['character'],
      timeStamp: props['timeStamp'],
      synthesized: props['synthesized'] ?? false),
  'KeyEventManager': (props) => KeyEventManager(props['pa'][0], props['pa'][1]),
  'KeyEventResult.handled': KeyEventResult.handled,
  'KeyEventResult.ignored': KeyEventResult.ignored,
  'KeyEventResult.skipRemainingHandlers': KeyEventResult.skipRemainingHandlers,
  'KeyEventResult.values': KeyEventResult.values,
  'KeyEventType.down': KeyEventType.down,
  'KeyEventType.repeat': KeyEventType.repeat,
  'KeyEventType.up': KeyEventType.up,
  'KeyEventType.values': KeyEventType.values,
  'KeyMessage': (props) => KeyMessage(props['pa'][0], props['pa'][1]),
  'KeyRepeatEvent': (props) => KeyRepeatEvent(
      physicalKey: props['physicalKey'],
      logicalKey: props['logicalKey'],
      character: props['character'],
      timeStamp: props['timeStamp']),
  'KeySet': (props) => KeySet<KeyboardKey>(
      props['pa'][0],
      (props['pa'].length > 1 ? props['pa'][1] : null),
      (props['pa'].length > 2 ? props['pa'][2] : null),
      (props['pa'].length > 3 ? props['pa'][3] : null)),
  'KeySet.fromSet': (props) => KeySet.fromSet(props['pa'][0]),
  'KeyUpEvent': (props) => KeyUpEvent(
      physicalKey: props['physicalKey'],
      logicalKey: props['logicalKey'],
      timeStamp: props['timeStamp'],
      synthesized: props['synthesized'] ?? false),
  'KeyboardInsertedContent': (props) => KeyboardInsertedContent(
      mimeType: props['mimeType'], uri: props['uri'], data: props['data']),
  'KeyboardInsertedContent.fromJson': (props) =>
      KeyboardInsertedContent.fromJson(props['pa'][0]),
  'KeyboardListener': (props) => KeyboardListener(
      key: props['key'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      includeSemantics: props['includeSemantics'] ?? true,
      onKeyEvent: props['onKeyEvent'],
      child: props['child']),
  'KeyboardLockMode.capsLock': KeyboardLockMode.capsLock,
  'KeyboardLockMode.findLockByLogicalKey': (props) =>
      KeyboardLockMode.findLockByLogicalKey(props['pa'][0]),
  'KeyboardLockMode.numLock': KeyboardLockMode.numLock,
  'KeyboardLockMode.scrollLock': KeyboardLockMode.scrollLock,
  'KeyboardLockMode.values': KeyboardLockMode.values,
  'KeyboardSide.all': KeyboardSide.all,
  'KeyboardSide.any': KeyboardSide.any,
  'KeyboardSide.left': KeyboardSide.left,
  'KeyboardSide.right': KeyboardSide.right,
  'KeyboardSide.values': KeyboardSide.values,
  'KeyedSubtree': (props) =>
      KeyedSubtree(key: props['key'], child: props['child']),
  'KeyedSubtree.ensureUniqueKeysForList': (props) =>
      KeyedSubtree.ensureUniqueKeysForList(props['pa'][0],
          baseIndex: props['baseIndex'] ?? 0),
  'KeyedSubtree.wrap': (props) =>
      KeyedSubtree.wrap(props['pa'][0], props['pa'][1]),
  'LabeledGlobalKey': (props) => LabeledGlobalKey(props['pa'][0]),
  'LayerHandle': (props) =>
      LayerHandle<Layer>((props['pa'].length > 0 ? props['pa'][0] : null)),
  'LayerLink': (props) => LayerLink(),
  'LayoutBuilder': (props) =>
      LayoutBuilder(key: props['key'], builder: props['builder']),
  'LayoutChangedNotification': (props) => const LayoutChangedNotification(),
  'LayoutId': (props) =>
      LayoutId(key: props['key'], id: props['id'], child: props['child']),
  'LeaderLayer': (props) =>
      LeaderLayer(link: props['link'], offset: props['offset'] ?? Offset.zero),
  'LeafRenderObjectElement': (props) => LeafRenderObjectElement(props['pa'][0]),
  'LeastSquaresSolver': (props) =>
      LeastSquaresSolver(props['pa'][0], props['pa'][1], props['pa'][2]),
  'LengthLimitingTextInputFormatter': (props) =>
      LengthLimitingTextInputFormatter(props['pa'][0],
          maxLengthEnforcement: props['maxLengthEnforcement']),
  'LengthLimitingTextInputFormatter.getDefaultMaxLengthEnforcement': (props) =>
      LengthLimitingTextInputFormatter.getDefaultMaxLengthEnforcement(
          (props['pa'].length > 0 ? props['pa'][0] : null)),
  'LexicalFocusOrder': (props) => LexicalFocusOrder(props['pa'][0]),
  'LicenseEntryWithLineBreaks': (props) =>
      LicenseEntryWithLineBreaks(props['pa'][0], props['pa'][1]),
  'LicensePage': (props) => LicensePage(
      key: props['key'],
      applicationName: props['applicationName'],
      applicationVersion: props['applicationVersion'],
      applicationIcon: props['applicationIcon'],
      applicationLegalese: props['applicationLegalese']),
  'LicenseParagraph': (props) =>
      LicenseParagraph(props['pa'][0], props['pa'][1]),
  'LicenseParagraph.centeredIndent': LicenseParagraph.centeredIndent,
  'LimitedBox': (props) => LimitedBox(
      key: props['key'],
      maxWidth: props['maxWidth']?.toDouble() ?? double.infinity,
      maxHeight: props['maxHeight']?.toDouble() ?? double.infinity,
      child: props['child']),
  'LineBoundary': (props) => LineBoundary(props['pa'][0]),
  'LineMetrics': (props) => LineMetrics(
      hardBreak: props['hardBreak'],
      ascent: props['ascent']?.toDouble() ?? 0,
      descent: props['descent']?.toDouble() ?? 0,
      unscaledAscent: props['unscaledAscent']?.toDouble() ?? 0,
      height: props['height']?.toDouble() ?? 0,
      width: props['width']?.toDouble() ?? 0,
      left: props['left']?.toDouble() ?? 0,
      baseline: props['baseline']?.toDouble() ?? 0,
      lineNumber: props['lineNumber']),
  'LinearBorder': (props) => LinearBorder(
      side: props['side'] ?? BorderSide.none,
      start: props['start'],
      end: props['end'],
      top: props['top'],
      bottom: props['bottom']),
  'LinearBorder.bottom': (props) => LinearBorder.bottom(
      side: props['side'] ?? BorderSide.none,
      alignment: props['alignment']?.toDouble() ?? 0.0,
      size: props['size']?.toDouble() ?? 1.0),
  'LinearBorder.end': (props) => LinearBorder.end(
      side: props['side'] ?? BorderSide.none,
      alignment: props['alignment']?.toDouble() ?? 0.0,
      size: props['size']?.toDouble() ?? 1.0),
  'LinearBorder.none': LinearBorder.none,
  'LinearBorder.start': (props) => LinearBorder.start(
      side: props['side'] ?? BorderSide.none,
      alignment: props['alignment']?.toDouble() ?? 0.0,
      size: props['size']?.toDouble() ?? 1.0),
  'LinearBorder.top': (props) => LinearBorder.top(
      side: props['side'] ?? BorderSide.none,
      alignment: props['alignment']?.toDouble() ?? 0.0,
      size: props['size']?.toDouble() ?? 1.0),
  'LinearBorderEdge': (props) => LinearBorderEdge(
      size: props['size']?.toDouble() ?? 1.0,
      alignment: props['alignment']?.toDouble() ?? 0.0),
  'LinearBorderEdge.lerp': (props) => LinearBorderEdge.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'LinearGradient': (props) => LinearGradient(
      begin: props['begin'] ?? Alignment.centerLeft,
      end: props['end'] ?? Alignment.centerRight,
      colors: as<Color>(props['colors']) ?? const [],
      stops: as<double>(props['stops']),
      tileMode: props['tileMode'] ?? TileMode.clamp,
      transform: props['transform']),
  'LinearGradient.lerp': (props) => LinearGradient.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'LinearProgressIndicator': (props) => LinearProgressIndicator(
      key: props['key'],
      value: props['value']?.toDouble(),
      backgroundColor: props['backgroundColor'],
      color: props['color'],
      valueColor: props['valueColor'],
      minHeight: props['minHeight']?.toDouble(),
      semanticsLabel: props['semanticsLabel'],
      semanticsValue: props['semanticsValue'],
      borderRadius: props['borderRadius'] ?? BorderRadius.zero),
  'ListBody': (props) => ListBody(
      key: props['key'],
      mainAxis: props['mainAxis'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      children: as<Widget>(props['children']) ?? const <Widget>[]),
  'ListBodyParentData': (props) => ListBodyParentData(),
  'ListTile': (props) => ListTile(
      key: props['key'],
      leading: props['leading'],
      title: props['title'],
      subtitle: props['subtitle'],
      trailing: props['trailing'],
      isThreeLine: props['isThreeLine'] ?? false,
      dense: props['dense'],
      visualDensity: props['visualDensity'],
      shape: props['shape'],
      style: props['style'],
      selectedColor: props['selectedColor'],
      iconColor: props['iconColor'],
      textColor: props['textColor'],
      titleTextStyle: props['titleTextStyle'],
      subtitleTextStyle: props['subtitleTextStyle'],
      leadingAndTrailingTextStyle: props['leadingAndTrailingTextStyle'],
      contentPadding: props['contentPadding'],
      enabled: props['enabled'] ?? true,
      onTap: props['onTap'],
      onLongPress: props['onLongPress'],
      onFocusChange: props['onFocusChange'],
      mouseCursor: props['mouseCursor'],
      selected: props['selected'] ?? false,
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      splashColor: props['splashColor'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      tileColor: props['tileColor'],
      selectedTileColor: props['selectedTileColor'],
      enableFeedback: props['enableFeedback'],
      horizontalTitleGap: props['horizontalTitleGap']?.toDouble(),
      minVerticalPadding: props['minVerticalPadding']?.toDouble(),
      minLeadingWidth: props['minLeadingWidth']?.toDouble(),
      titleAlignment: props['titleAlignment']),
  'ListTile.divideTiles': (props) => ListTile.divideTiles(
      context: props['context'], tiles: props['tiles'], color: props['color']),
  'ListTileControlAffinity.leading': ListTileControlAffinity.leading,
  'ListTileControlAffinity.platform': ListTileControlAffinity.platform,
  'ListTileControlAffinity.trailing': ListTileControlAffinity.trailing,
  'ListTileControlAffinity.values': ListTileControlAffinity.values,
  'ListTileStyle.drawer': ListTileStyle.drawer,
  'ListTileStyle.list': ListTileStyle.list,
  'ListTileStyle.values': ListTileStyle.values,
  'ListTileTheme': (props) => ListTileTheme(
      key: props['key'],
      data: props['data'],
      dense: props['dense'],
      shape: props['shape'],
      style: props['style'],
      selectedColor: props['selectedColor'],
      iconColor: props['iconColor'],
      textColor: props['textColor'],
      contentPadding: props['contentPadding'],
      tileColor: props['tileColor'],
      selectedTileColor: props['selectedTileColor'],
      enableFeedback: props['enableFeedback'],
      mouseCursor: props['mouseCursor'],
      horizontalTitleGap: props['horizontalTitleGap']?.toDouble(),
      minVerticalPadding: props['minVerticalPadding']?.toDouble(),
      minLeadingWidth: props['minLeadingWidth']?.toDouble(),
      child: props['child']),
  'ListTileTheme.merge': (props) => ListTileTheme.merge(
      key: props['key'],
      dense: props['dense'],
      shape: props['shape'],
      style: props['style'],
      selectedColor: props['selectedColor'],
      iconColor: props['iconColor'],
      textColor: props['textColor'],
      titleTextStyle: props['titleTextStyle'],
      subtitleTextStyle: props['subtitleTextStyle'],
      leadingAndTrailingTextStyle: props['leadingAndTrailingTextStyle'],
      contentPadding: props['contentPadding'],
      tileColor: props['tileColor'],
      selectedTileColor: props['selectedTileColor'],
      enableFeedback: props['enableFeedback'],
      horizontalTitleGap: props['horizontalTitleGap']?.toDouble(),
      minVerticalPadding: props['minVerticalPadding']?.toDouble(),
      minLeadingWidth: props['minLeadingWidth']?.toDouble(),
      titleAlignment: props['titleAlignment'],
      mouseCursor: props['mouseCursor'],
      visualDensity: props['visualDensity'],
      child: props['child']),
  'ListTileTheme.of': (props) => ListTileTheme.of(props['pa'][0]),
  'ListTileThemeData': (props) => ListTileThemeData(
      dense: props['dense'],
      shape: props['shape'],
      style: props['style'],
      selectedColor: props['selectedColor'],
      iconColor: props['iconColor'],
      textColor: props['textColor'],
      titleTextStyle: props['titleTextStyle'],
      subtitleTextStyle: props['subtitleTextStyle'],
      leadingAndTrailingTextStyle: props['leadingAndTrailingTextStyle'],
      contentPadding: props['contentPadding'],
      tileColor: props['tileColor'],
      selectedTileColor: props['selectedTileColor'],
      horizontalTitleGap: props['horizontalTitleGap']?.toDouble(),
      minVerticalPadding: props['minVerticalPadding']?.toDouble(),
      minLeadingWidth: props['minLeadingWidth']?.toDouble(),
      enableFeedback: props['enableFeedback'],
      mouseCursor: props['mouseCursor'],
      visualDensity: props['visualDensity'],
      titleAlignment: props['titleAlignment']),
  'ListTileThemeData.lerp': (props) => ListTileThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'ListTileTitleAlignment.bottom': ListTileTitleAlignment.bottom,
  'ListTileTitleAlignment.center': ListTileTitleAlignment.center,
  'ListTileTitleAlignment.threeLine': ListTileTitleAlignment.threeLine,
  'ListTileTitleAlignment.titleHeight': ListTileTitleAlignment.titleHeight,
  'ListTileTitleAlignment.top': ListTileTitleAlignment.top,
  'ListTileTitleAlignment.values': ListTileTitleAlignment.values,
  'ListView': (props) => ListView(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      primary: props['primary'],
      physics: props['physics'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      padding: props['padding'],
      itemExtent: props['itemExtent']?.toDouble(),
      prototypeItem: props['prototypeItem'],
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true,
      cacheExtent: props['cacheExtent']?.toDouble(),
      children: as<Widget>(props['children']) ?? const <Widget>[],
      semanticChildCount: props['semanticChildCount'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'ListView.builder': (props) => ListView.builder(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      primary: props['primary'],
      physics: props['physics'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      padding: props['padding'],
      itemExtent: props['itemExtent']?.toDouble(),
      prototypeItem: props['prototypeItem'],
      itemBuilder: props['itemBuilder'],
      findChildIndexCallback: props['findChildIndexCallback'],
      itemCount: props['itemCount'],
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true,
      cacheExtent: props['cacheExtent']?.toDouble(),
      semanticChildCount: props['semanticChildCount'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'ListView.custom': (props) => ListView.custom(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      primary: props['primary'],
      physics: props['physics'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      padding: props['padding'],
      itemExtent: props['itemExtent']?.toDouble(),
      prototypeItem: props['prototypeItem'],
      childrenDelegate: props['childrenDelegate'],
      cacheExtent: props['cacheExtent']?.toDouble(),
      semanticChildCount: props['semanticChildCount'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'ListView.separated': (props) => ListView.separated(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      primary: props['primary'],
      physics: props['physics'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      padding: props['padding'],
      itemBuilder: props['itemBuilder'],
      findChildIndexCallback: props['findChildIndexCallback'],
      separatorBuilder: props['separatorBuilder'],
      itemCount: props['itemCount'],
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true,
      cacheExtent: props['cacheExtent']?.toDouble(),
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'ListWheelChildBuilderDelegate': (props) => ListWheelChildBuilderDelegate(
      builder: props['builder'], childCount: props['childCount']),
  'ListWheelChildListDelegate': (props) => ListWheelChildListDelegate(
      children: as<Widget>(props['children']) ?? const []),
  'ListWheelChildLoopingListDelegate': (props) =>
      ListWheelChildLoopingListDelegate(
          children: as<Widget>(props['children']) ?? const []),
  'ListWheelElement': (props) => ListWheelElement(props['pa'][0]),
  'ListWheelScrollView': (props) => ListWheelScrollView(
      key: props['key'],
      controller: props['controller'],
      physics: props['physics'],
      diameterRatio: props['diameterRatio']?.toDouble() ??
          RenderListWheelViewport.defaultDiameterRatio,
      perspective: props['perspective']?.toDouble() ??
          RenderListWheelViewport.defaultPerspective,
      offAxisFraction: props['offAxisFraction']?.toDouble() ?? 0.0,
      useMagnifier: props['useMagnifier'] ?? false,
      magnification: props['magnification']?.toDouble() ?? 1.0,
      overAndUnderCenterOpacity:
          props['overAndUnderCenterOpacity']?.toDouble() ?? 1.0,
      itemExtent: props['itemExtent']?.toDouble() ?? 0,
      squeeze: props['squeeze']?.toDouble() ?? 1.0,
      onSelectedItemChanged: props['onSelectedItemChanged'],
      renderChildrenOutsideViewport:
          props['renderChildrenOutsideViewport'] ?? false,
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      restorationId: props['restorationId'],
      scrollBehavior: props['scrollBehavior'],
      children: as<Widget>(props['children']) ?? const []),
  'ListWheelScrollView.useDelegate': (props) => ListWheelScrollView.useDelegate(
      key: props['key'],
      controller: props['controller'],
      physics: props['physics'],
      diameterRatio: props['diameterRatio']?.toDouble() ??
          RenderListWheelViewport.defaultDiameterRatio,
      perspective: props['perspective']?.toDouble() ??
          RenderListWheelViewport.defaultPerspective,
      offAxisFraction: props['offAxisFraction']?.toDouble() ?? 0.0,
      useMagnifier: props['useMagnifier'] ?? false,
      magnification: props['magnification']?.toDouble() ?? 1.0,
      overAndUnderCenterOpacity:
          props['overAndUnderCenterOpacity']?.toDouble() ?? 1.0,
      itemExtent: props['itemExtent']?.toDouble() ?? 0,
      squeeze: props['squeeze']?.toDouble() ?? 1.0,
      onSelectedItemChanged: props['onSelectedItemChanged'],
      renderChildrenOutsideViewport:
          props['renderChildrenOutsideViewport'] ?? false,
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      restorationId: props['restorationId'],
      scrollBehavior: props['scrollBehavior'],
      childDelegate: props['childDelegate']),
  'ListWheelViewport': (props) => ListWheelViewport(
      key: props['key'],
      diameterRatio: props['diameterRatio']?.toDouble() ??
          RenderListWheelViewport.defaultDiameterRatio,
      perspective: props['perspective']?.toDouble() ??
          RenderListWheelViewport.defaultPerspective,
      offAxisFraction: props['offAxisFraction']?.toDouble() ?? 0.0,
      useMagnifier: props['useMagnifier'] ?? false,
      magnification: props['magnification']?.toDouble() ?? 1.0,
      overAndUnderCenterOpacity:
          props['overAndUnderCenterOpacity']?.toDouble() ?? 1.0,
      itemExtent: props['itemExtent']?.toDouble() ?? 0,
      squeeze: props['squeeze']?.toDouble() ?? 1.0,
      renderChildrenOutsideViewport:
          props['renderChildrenOutsideViewport'] ?? false,
      offset: props['offset'],
      childDelegate: props['childDelegate'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'ListenableBuilder': (props) => ListenableBuilder(
      key: props['key'],
      listenable: props['listenable'],
      builder: props['builder'],
      child: props['child']),
  'Listener': (props) => Listener(
      key: props['key'],
      onPointerDown: props['onPointerDown'],
      onPointerMove: props['onPointerMove'],
      onPointerUp: props['onPointerUp'],
      onPointerHover: props['onPointerHover'],
      onPointerCancel: props['onPointerCancel'],
      onPointerPanZoomStart: props['onPointerPanZoomStart'],
      onPointerPanZoomUpdate: props['onPointerPanZoomUpdate'],
      onPointerPanZoomEnd: props['onPointerPanZoomEnd'],
      onPointerSignal: props['onPointerSignal'],
      behavior: props['behavior'] ?? HitTestBehavior.deferToChild,
      child: props['child']),
  'LocalHistoryEntry': (props) => LocalHistoryEntry(
      onRemove: props['onRemove'],
      impliesAppBarDismissal: props['impliesAppBarDismissal'] ?? true),
  'Locale': (props) =>
      Locale(props['pa'][0], (props['pa'].length > 1 ? props['pa'][1] : null)),
  'Locale.fromSubtags': (props) => Locale.fromSubtags(
      languageCode: props['languageCode'] ?? 'und',
      scriptCode: props['scriptCode'],
      countryCode: props['countryCode']),
  'LocaleStringAttribute': (props) =>
      LocaleStringAttribute(range: props['range'], locale: props['locale']),
  'Localizations': (props) => Localizations(
      key: props['key'],
      locale: props['locale'],
      delegates: as<LocalizationsDelegate>(props['delegates']) ?? const [],
      child: props['child']),
  'Localizations.localeOf': (props) => Localizations.localeOf(props['pa'][0]),
  'Localizations.maybeLocaleOf': (props) =>
      Localizations.maybeLocaleOf(props['pa'][0]),
  'Localizations.of': (props) =>
      Localizations.of(props['pa'][0], props['pa'][1]),
  'Localizations.override': (props) => Localizations.override(
      key: props['key'],
      context: props['context'],
      locale: props['locale'],
      delegates: as<LocalizationsDelegate>(props['delegates']),
      child: props['child']),
  'LogicalKeySet': (props) => LogicalKeySet(
      props['pa'][0],
      (props['pa'].length > 1 ? props['pa'][1] : null),
      (props['pa'].length > 2 ? props['pa'][2] : null),
      (props['pa'].length > 3 ? props['pa'][3] : null)),
  'LogicalKeySet.fromSet': (props) => LogicalKeySet.fromSet(props['pa'][0]),
  'LongPressDownDetails': (props) => LongPressDownDetails(
      globalPosition: props['globalPosition'] ?? Offset.zero,
      localPosition: props['localPosition'],
      kind: props['kind']),
  'LongPressDraggable': (props) => LongPressDraggable(
      key: props['key'],
      child: props['child'],
      feedback: props['feedback'],
      data: props['data'],
      axis: props['axis'],
      childWhenDragging: props['childWhenDragging'],
      feedbackOffset: props['feedbackOffset'] ?? Offset.zero,
      dragAnchorStrategy:
          props['dragAnchorStrategy'] ?? childDragAnchorStrategy,
      maxSimultaneousDrags: props['maxSimultaneousDrags'],
      onDragStarted: props['onDragStarted'],
      onDragUpdate: props['onDragUpdate'],
      onDraggableCanceled: props['onDraggableCanceled'],
      onDragEnd: props['onDragEnd'],
      onDragCompleted: props['onDragCompleted'],
      hapticFeedbackOnStart: props['hapticFeedbackOnStart'] ?? true,
      ignoringFeedbackSemantics: props['ignoringFeedbackSemantics'] ?? true,
      ignoringFeedbackPointer: props['ignoringFeedbackPointer'] ?? true,
      delay: props['delay'] ?? kLongPressTimeout,
      allowedButtonsFilter: props['allowedButtonsFilter']),
  'LongPressEndDetails': (props) => LongPressEndDetails(
      globalPosition: props['globalPosition'] ?? Offset.zero,
      localPosition: props['localPosition'],
      velocity: props['velocity'] ?? Velocity.zero),
  'LongPressGestureRecognizer': (props) => LongPressGestureRecognizer(
      duration: props['duration'],
      postAcceptSlopTolerance: props['postAcceptSlopTolerance']?.toDouble(),
      supportedDevices: props['supportedDevices'],
      debugOwner: props['debugOwner'],
      allowedButtonsFilter: props['allowedButtonsFilter']),
  'LongPressMoveUpdateDetails': (props) => LongPressMoveUpdateDetails(
      globalPosition: props['globalPosition'] ?? Offset.zero,
      localPosition: props['localPosition'],
      offsetFromOrigin: props['offsetFromOrigin'] ?? Offset.zero,
      localOffsetFromOrigin: props['localOffsetFromOrigin']),
  'LongPressSemanticsEvent': (props) => const LongPressSemanticsEvent(),
  'LongPressStartDetails': (props) => LongPressStartDetails(
      globalPosition: props['globalPosition'] ?? Offset.zero,
      localPosition: props['localPosition']),
  'LookupBoundary': (props) =>
      LookupBoundary(key: props['key'], child: props['child']),
  'LookupBoundary.debugIsHidingAncestorRenderObjectOfType': (props) =>
      LookupBoundary.debugIsHidingAncestorRenderObjectOfType(props['pa'][0]),
  'LookupBoundary.debugIsHidingAncestorStateOfType': (props) =>
      LookupBoundary.debugIsHidingAncestorStateOfType(props['pa'][0]),
  'LookupBoundary.debugIsHidingAncestorWidgetOfExactType': (props) =>
      LookupBoundary.debugIsHidingAncestorWidgetOfExactType(props['pa'][0]),
  'LookupBoundary.dependOnInheritedWidgetOfExactType': (props) =>
      LookupBoundary.dependOnInheritedWidgetOfExactType(props['pa'][0],
          aspect: props['aspect']),
  'LookupBoundary.findAncestorRenderObjectOfType': (props) =>
      LookupBoundary.findAncestorRenderObjectOfType(props['pa'][0]),
  'LookupBoundary.findAncestorStateOfType': (props) =>
      LookupBoundary.findAncestorStateOfType(props['pa'][0]),
  'LookupBoundary.findAncestorWidgetOfExactType': (props) =>
      LookupBoundary.findAncestorWidgetOfExactType(props['pa'][0]),
  'LookupBoundary.findRootAncestorStateOfType': (props) =>
      LookupBoundary.findRootAncestorStateOfType(props['pa'][0]),
  'LookupBoundary.getElementForInheritedWidgetOfExactType': (props) =>
      LookupBoundary.getElementForInheritedWidgetOfExactType(props['pa'][0]),
  'LookupBoundary.visitAncestorElements': (props) =>
      LookupBoundary.visitAncestorElements(props['pa'][0], props['pa'][1]),
  'LookupBoundary.visitChildElements': (props) =>
      LookupBoundary.visitChildElements(props['pa'][0], props['pa'][1]),
  'MacOSScrollViewFlingVelocityTracker': (props) =>
      MacOSScrollViewFlingVelocityTracker(props['pa'][0]),
  'Magnifier': (props) => Magnifier(
      key: props['key'],
      additionalFocalPointOffset:
          props['additionalFocalPointOffset'] ?? Offset.zero,
      borderRadius: props['borderRadius'] ??
          const BorderRadius.all(Radius.circular(_borderRadius)),
      filmColor: props['filmColor'] ?? const Color.fromARGB(8, 158, 158, 158),
      shadows: as<BoxShadow>(props['shadows']) ??
          const <BoxShadow>[
            BoxShadow(
                blurRadius: 1.5,
                offset: Offset(0, 2),
                spreadRadius: 0.75,
                color: Color.fromARGB(25, 0, 0, 0))
          ],
      size: props['size'] ?? Magnifier.kDefaultMagnifierSize),
  'MagnifierController': (props) =>
      MagnifierController(animationController: props['animationController']),
  'MagnifierController.shiftWithinBounds': (props) =>
      MagnifierController.shiftWithinBounds(
          rect: props['rect'], bounds: props['bounds']),
  'MagnifierDecoration': (props) => MagnifierDecoration(
      opacity: props['opacity']?.toDouble() ?? 1,
      shadows: as<BoxShadow>(props['shadows']),
      shape: props['shape'] ?? const RoundedRectangleBorder()),
  'MagnifierInfo': (props) => MagnifierInfo(
      globalGesturePosition: props['globalGesturePosition'],
      caretRect: props['caretRect'],
      fieldBounds: props['fieldBounds'],
      currentLineBoundaries: props['currentLineBoundaries']),
  'MagnifierInfo.empty': MagnifierInfo.empty,
  'MainAxisAlignment.center': MainAxisAlignment.center,
  'MainAxisAlignment.end': MainAxisAlignment.end,
  'MainAxisAlignment.spaceAround': MainAxisAlignment.spaceAround,
  'MainAxisAlignment.spaceBetween': MainAxisAlignment.spaceBetween,
  'MainAxisAlignment.spaceEvenly': MainAxisAlignment.spaceEvenly,
  'MainAxisAlignment.start': MainAxisAlignment.start,
  'MainAxisAlignment.values': MainAxisAlignment.values,
  'MainAxisSize.max': MainAxisSize.max,
  'MainAxisSize.min': MainAxisSize.min,
  'MainAxisSize.values': MainAxisSize.values,
  'MaskFilter.blur': (props) =>
      MaskFilter.blur(props['pa'][0], props['pa'][1]?.toDouble()),
  'Material': (props) => Material(
      key: props['key'],
      type: props['type'] ?? MaterialType.canvas,
      elevation: props['elevation']?.toDouble() ?? 0.0,
      color: props['color'],
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      textStyle: props['textStyle'],
      borderRadius: props['borderRadius'],
      shape: props['shape'],
      borderOnForeground: props['borderOnForeground'] ?? true,
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      animationDuration: props['animationDuration'] ?? kThemeChangeDuration,
      child: props['child']),
  'Material.defaultSplashRadius': Material.defaultSplashRadius,
  'Material.maybeOf': (props) => Material.maybeOf(props['pa'][0]),
  'Material.of': (props) => Material.of(props['pa'][0]),
  'MaterialAccentColor': (props) =>
      MaterialAccentColor(props['pa'][0], props['pa'][1]),
  'MaterialApp': (props) => MaterialApp(
      key: props['key'],
      navigatorKey: props['navigatorKey'],
      scaffoldMessengerKey: props['scaffoldMessengerKey'],
      home: props['home'],
      routes: props['routes'] ?? const <String, WidgetBuilder>{},
      initialRoute: props['initialRoute'],
      onGenerateRoute: props['onGenerateRoute'],
      onGenerateInitialRoutes: props['onGenerateInitialRoutes'],
      onUnknownRoute: props['onUnknownRoute'],
      navigatorObservers: as<NavigatorObserver>(props['navigatorObservers']) ??
          const <NavigatorObserver>[],
      builder: props['builder'],
      title: props['title'] ?? '',
      onGenerateTitle: props['onGenerateTitle'],
      color: props['color'],
      theme: props['theme'],
      darkTheme: props['darkTheme'],
      highContrastTheme: props['highContrastTheme'],
      highContrastDarkTheme: props['highContrastDarkTheme'],
      themeMode: props['themeMode'] ?? ThemeMode.system,
      themeAnimationDuration:
          props['themeAnimationDuration'] ?? kThemeAnimationDuration,
      themeAnimationCurve: props['themeAnimationCurve'] ?? Curves.linear,
      locale: props['locale'],
      localizationsDelegates: props['localizationsDelegates'],
      localeListResolutionCallback: props['localeListResolutionCallback'],
      localeResolutionCallback: props['localeResolutionCallback'],
      supportedLocales:
          props['supportedLocales'] ?? const <Locale>[Locale('en', 'US')],
      debugShowMaterialGrid: props['debugShowMaterialGrid'] ?? false,
      showPerformanceOverlay: props['showPerformanceOverlay'] ?? false,
      checkerboardRasterCacheImages:
          props['checkerboardRasterCacheImages'] ?? false,
      checkerboardOffscreenLayers:
          props['checkerboardOffscreenLayers'] ?? false,
      showSemanticsDebugger: props['showSemanticsDebugger'] ?? false,
      debugShowCheckedModeBanner: props['debugShowCheckedModeBanner'] ?? true,
      shortcuts: props['shortcuts'],
      actions: props['actions'],
      restorationScopeId: props['restorationScopeId'],
      scrollBehavior: props['scrollBehavior'],
      useInheritedMediaQuery: props['useInheritedMediaQuery'] ?? false),
  'MaterialApp.createMaterialHeroController': (props) =>
      MaterialApp.createMaterialHeroController(),
  'MaterialApp.router': (props) => MaterialApp.router(
      key: props['key'],
      scaffoldMessengerKey: props['scaffoldMessengerKey'],
      routeInformationProvider: props['routeInformationProvider'],
      routeInformationParser: props['routeInformationParser'],
      routerDelegate: props['routerDelegate'],
      routerConfig: props['routerConfig'],
      backButtonDispatcher: props['backButtonDispatcher'],
      builder: props['builder'],
      title: props['title'] ?? '',
      onGenerateTitle: props['onGenerateTitle'],
      color: props['color'],
      theme: props['theme'],
      darkTheme: props['darkTheme'],
      highContrastTheme: props['highContrastTheme'],
      highContrastDarkTheme: props['highContrastDarkTheme'],
      themeMode: props['themeMode'] ?? ThemeMode.system,
      themeAnimationDuration:
          props['themeAnimationDuration'] ?? kThemeAnimationDuration,
      themeAnimationCurve: props['themeAnimationCurve'] ?? Curves.linear,
      locale: props['locale'],
      localizationsDelegates: props['localizationsDelegates'],
      localeListResolutionCallback: props['localeListResolutionCallback'],
      localeResolutionCallback: props['localeResolutionCallback'],
      supportedLocales:
          props['supportedLocales'] ?? const <Locale>[Locale('en', 'US')],
      debugShowMaterialGrid: props['debugShowMaterialGrid'] ?? false,
      showPerformanceOverlay: props['showPerformanceOverlay'] ?? false,
      checkerboardRasterCacheImages:
          props['checkerboardRasterCacheImages'] ?? false,
      checkerboardOffscreenLayers:
          props['checkerboardOffscreenLayers'] ?? false,
      showSemanticsDebugger: props['showSemanticsDebugger'] ?? false,
      debugShowCheckedModeBanner: props['debugShowCheckedModeBanner'] ?? true,
      shortcuts: props['shortcuts'],
      actions: props['actions'],
      restorationScopeId: props['restorationScopeId'],
      scrollBehavior: props['scrollBehavior'],
      useInheritedMediaQuery: props['useInheritedMediaQuery'] ?? false),
  'MaterialBanner': (props) => MaterialBanner(
      key: props['key'],
      content: props['content'],
      contentTextStyle: props['contentTextStyle'],
      actions: as<Widget>(props['actions']) ?? const [],
      elevation: props['elevation']?.toDouble(),
      leading: props['leading'],
      backgroundColor: props['backgroundColor'],
      surfaceTintColor: props['surfaceTintColor'],
      shadowColor: props['shadowColor'],
      dividerColor: props['dividerColor'],
      padding: props['padding'],
      margin: props['margin'],
      leadingPadding: props['leadingPadding'],
      forceActionsBelow: props['forceActionsBelow'] ?? false,
      overflowAlignment: props['overflowAlignment'] ?? OverflowBarAlignment.end,
      animation: props['animation'],
      onVisible: props['onVisible']),
  'MaterialBanner.createAnimationController': (props) =>
      MaterialBanner.createAnimationController(vsync: props['vsync']),
  'MaterialBannerClosedReason.dismiss': MaterialBannerClosedReason.dismiss,
  'MaterialBannerClosedReason.hide': MaterialBannerClosedReason.hide,
  'MaterialBannerClosedReason.remove': MaterialBannerClosedReason.remove,
  'MaterialBannerClosedReason.swipe': MaterialBannerClosedReason.swipe,
  'MaterialBannerClosedReason.values': MaterialBannerClosedReason.values,
  'MaterialBannerTheme': (props) => MaterialBannerTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'MaterialBannerTheme.of': (props) => MaterialBannerTheme.of(props['pa'][0]),
  'MaterialBannerThemeData': (props) => MaterialBannerThemeData(
      backgroundColor: props['backgroundColor'],
      surfaceTintColor: props['surfaceTintColor'],
      shadowColor: props['shadowColor'],
      dividerColor: props['dividerColor'],
      contentTextStyle: props['contentTextStyle'],
      elevation: props['elevation']?.toDouble(),
      padding: props['padding'],
      leadingPadding: props['leadingPadding']),
  'MaterialBannerThemeData.lerp': (props) => MaterialBannerThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'MaterialBasedCupertinoThemeData': (props) =>
      MaterialBasedCupertinoThemeData(materialTheme: props['materialTheme']),
  'MaterialButton': (props) => MaterialButton(
      key: props['key'],
      onPressed: props['onPressed'],
      onLongPress: props['onLongPress'],
      onHighlightChanged: props['onHighlightChanged'],
      mouseCursor: props['mouseCursor'],
      textTheme: props['textTheme'],
      textColor: props['textColor'],
      disabledTextColor: props['disabledTextColor'],
      color: props['color'],
      disabledColor: props['disabledColor'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      highlightColor: props['highlightColor'],
      splashColor: props['splashColor'],
      colorBrightness: props['colorBrightness'],
      elevation: props['elevation']?.toDouble(),
      focusElevation: props['focusElevation']?.toDouble(),
      hoverElevation: props['hoverElevation']?.toDouble(),
      highlightElevation: props['highlightElevation']?.toDouble(),
      disabledElevation: props['disabledElevation']?.toDouble(),
      padding: props['padding'],
      visualDensity: props['visualDensity'],
      shape: props['shape'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      materialTapTargetSize: props['materialTapTargetSize'],
      animationDuration: props['animationDuration'],
      minWidth: props['minWidth']?.toDouble(),
      height: props['height']?.toDouble(),
      enableFeedback: props['enableFeedback'] ?? true,
      child: props['child']),
  'MaterialColor': (props) => MaterialColor(props['pa'][0], props['pa'][1]),
  'MaterialGap': (props) =>
      MaterialGap(key: props['key'], size: props['size']?.toDouble() ?? 16.0),
  'MaterialPage': (props) => MaterialPage(
      child: props['child'],
      maintainState: props['maintainState'] ?? true,
      fullscreenDialog: props['fullscreenDialog'] ?? false,
      allowSnapshotting: props['allowSnapshotting'] ?? true,
      key: props['key'],
      name: props['name'],
      arguments: props['arguments'],
      restorationId: props['restorationId']),
  'MaterialPageRoute': (props) => MaterialPageRoute(
      builder: props['builder'],
      settings: props['settings'],
      maintainState: props['maintainState'] ?? true,
      fullscreenDialog: props['fullscreenDialog'] ?? false,
      allowSnapshotting: props['allowSnapshotting'] ?? true),
  'MaterialPointArcTween': (props) =>
      MaterialPointArcTween(begin: props['begin'], end: props['end']),
  'MaterialRectArcTween': (props) =>
      MaterialRectArcTween(begin: props['begin'], end: props['end']),
  'MaterialRectCenterArcTween': (props) =>
      MaterialRectCenterArcTween(begin: props['begin'], end: props['end']),
  'MaterialScrollBehavior': (props) => MaterialScrollBehavior(
      androidOverscrollIndicator: props['androidOverscrollIndicator']),
  'MaterialSlice': (props) => MaterialSlice(
      key: props['key'], child: props['child'], color: props['color']),
  'MaterialState.disabled': MaterialState.disabled,
  'MaterialState.dragged': MaterialState.dragged,
  'MaterialState.error': MaterialState.error,
  'MaterialState.focused': MaterialState.focused,
  'MaterialState.hovered': MaterialState.hovered,
  'MaterialState.pressed': MaterialState.pressed,
  'MaterialState.scrolledUnder': MaterialState.scrolledUnder,
  'MaterialState.selected': MaterialState.selected,
  'MaterialState.values': MaterialState.values,
  'MaterialStatePropertyAll': (props) =>
      MaterialStatePropertyAll(props['pa'][0]),
  'MaterialStatesController': (props) => MaterialStatesController(
      (props['pa'].length > 0 ? props['pa'][0] : null)),
  'MaterialTapTargetSize.padded': MaterialTapTargetSize.padded,
  'MaterialTapTargetSize.shrinkWrap': MaterialTapTargetSize.shrinkWrap,
  'MaterialTapTargetSize.values': MaterialTapTargetSize.values,
  'MaterialTextSelectionControls': (props) => MaterialTextSelectionControls(),
  'MaterialType.button': MaterialType.button,
  'MaterialType.canvas': MaterialType.canvas,
  'MaterialType.card': MaterialType.card,
  'MaterialType.circle': MaterialType.circle,
  'MaterialType.transparency': MaterialType.transparency,
  'MaterialType.values': MaterialType.values,
  'Matrix4Tween': (props) =>
      Matrix4Tween(begin: props['begin'], end: props['end']),
  'MaxColumnWidth': (props) => MaxColumnWidth(props['pa'][0], props['pa'][1]),
  'MaxLengthEnforcement.enforced': MaxLengthEnforcement.enforced,
  'MaxLengthEnforcement.none': MaxLengthEnforcement.none,
  'MaxLengthEnforcement.truncateAfterCompositionEnds':
      MaxLengthEnforcement.truncateAfterCompositionEnds,
  'MaxLengthEnforcement.values': MaxLengthEnforcement.values,
  'MediaQuery': (props) =>
      MediaQuery(key: props['key'], data: props['data'], child: props['child']),
  'MediaQuery.accessibleNavigationOf': (props) =>
      MediaQuery.accessibleNavigationOf(props['pa'][0]),
  'MediaQuery.alwaysUse24HourFormatOf': (props) =>
      MediaQuery.alwaysUse24HourFormatOf(props['pa'][0]),
  'MediaQuery.boldTextOf': (props) => MediaQuery.boldTextOf(props['pa'][0]),
  'MediaQuery.devicePixelRatioOf': (props) =>
      MediaQuery.devicePixelRatioOf(props['pa'][0]),
  'MediaQuery.disableAnimationsOf': (props) =>
      MediaQuery.disableAnimationsOf(props['pa'][0]),
  'MediaQuery.displayFeaturesOf': (props) =>
      MediaQuery.displayFeaturesOf(props['pa'][0]),
  'MediaQuery.fromView': (props) => MediaQuery.fromView(
      key: props['key'], view: props['view'], child: props['child']),
  'MediaQuery.gestureSettingsOf': (props) =>
      MediaQuery.gestureSettingsOf(props['pa'][0]),
  'MediaQuery.highContrastOf': (props) =>
      MediaQuery.highContrastOf(props['pa'][0]),
  'MediaQuery.invertColorsOf': (props) =>
      MediaQuery.invertColorsOf(props['pa'][0]),
  'MediaQuery.maybeAccessibleNavigationOf': (props) =>
      MediaQuery.maybeAccessibleNavigationOf(props['pa'][0]),
  'MediaQuery.maybeAlwaysUse24HourFormatOf': (props) =>
      MediaQuery.maybeAlwaysUse24HourFormatOf(props['pa'][0]),
  'MediaQuery.maybeBoldTextOf': (props) =>
      MediaQuery.maybeBoldTextOf(props['pa'][0]),
  'MediaQuery.maybeDevicePixelRatioOf': (props) =>
      MediaQuery.maybeDevicePixelRatioOf(props['pa'][0]),
  'MediaQuery.maybeDisableAnimationsOf': (props) =>
      MediaQuery.maybeDisableAnimationsOf(props['pa'][0]),
  'MediaQuery.maybeDisplayFeaturesOf': (props) =>
      MediaQuery.maybeDisplayFeaturesOf(props['pa'][0]),
  'MediaQuery.maybeGestureSettingsOf': (props) =>
      MediaQuery.maybeGestureSettingsOf(props['pa'][0]),
  'MediaQuery.maybeHighContrastOf': (props) =>
      MediaQuery.maybeHighContrastOf(props['pa'][0]),
  'MediaQuery.maybeInvertColorsOf': (props) =>
      MediaQuery.maybeInvertColorsOf(props['pa'][0]),
  'MediaQuery.maybeNavigationModeOf': (props) =>
      MediaQuery.maybeNavigationModeOf(props['pa'][0]),
  'MediaQuery.maybeOf': (props) => MediaQuery.maybeOf(props['pa'][0]),
  'MediaQuery.maybeOrientationOf': (props) =>
      MediaQuery.maybeOrientationOf(props['pa'][0]),
  'MediaQuery.maybePaddingOf': (props) =>
      MediaQuery.maybePaddingOf(props['pa'][0]),
  'MediaQuery.maybePlatformBrightnessOf': (props) =>
      MediaQuery.maybePlatformBrightnessOf(props['pa'][0]),
  'MediaQuery.maybeSizeOf': (props) => MediaQuery.maybeSizeOf(props['pa'][0]),
  'MediaQuery.maybeSystemGestureInsetsOf': (props) =>
      MediaQuery.maybeSystemGestureInsetsOf(props['pa'][0]),
  'MediaQuery.maybeTextScaleFactorOf': (props) =>
      MediaQuery.maybeTextScaleFactorOf(props['pa'][0]),
  'MediaQuery.maybeViewInsetsOf': (props) =>
      MediaQuery.maybeViewInsetsOf(props['pa'][0]),
  'MediaQuery.maybeViewPaddingOf': (props) =>
      MediaQuery.maybeViewPaddingOf(props['pa'][0]),
  'MediaQuery.navigationModeOf': (props) =>
      MediaQuery.navigationModeOf(props['pa'][0]),
  'MediaQuery.of': (props) => MediaQuery.of(props['pa'][0]),
  'MediaQuery.orientationOf': (props) =>
      MediaQuery.orientationOf(props['pa'][0]),
  'MediaQuery.paddingOf': (props) => MediaQuery.paddingOf(props['pa'][0]),
  'MediaQuery.platformBrightnessOf': (props) =>
      MediaQuery.platformBrightnessOf(props['pa'][0]),
  'MediaQuery.removePadding': (props) => MediaQuery.removePadding(
      key: props['key'],
      context: props['context'],
      removeLeft: props['removeLeft'] ?? false,
      removeTop: props['removeTop'] ?? false,
      removeRight: props['removeRight'] ?? false,
      removeBottom: props['removeBottom'] ?? false,
      child: props['child']),
  'MediaQuery.removeViewInsets': (props) => MediaQuery.removeViewInsets(
      key: props['key'],
      context: props['context'],
      removeLeft: props['removeLeft'] ?? false,
      removeTop: props['removeTop'] ?? false,
      removeRight: props['removeRight'] ?? false,
      removeBottom: props['removeBottom'] ?? false,
      child: props['child']),
  'MediaQuery.removeViewPadding': (props) => MediaQuery.removeViewPadding(
      key: props['key'],
      context: props['context'],
      removeLeft: props['removeLeft'] ?? false,
      removeTop: props['removeTop'] ?? false,
      removeRight: props['removeRight'] ?? false,
      removeBottom: props['removeBottom'] ?? false,
      child: props['child']),
  'MediaQuery.sizeOf': (props) => MediaQuery.sizeOf(props['pa'][0]),
  'MediaQuery.systemGestureInsetsOf': (props) =>
      MediaQuery.systemGestureInsetsOf(props['pa'][0]),
  'MediaQuery.textScaleFactorOf': (props) =>
      MediaQuery.textScaleFactorOf(props['pa'][0]),
  'MediaQuery.viewInsetsOf': (props) => MediaQuery.viewInsetsOf(props['pa'][0]),
  'MediaQuery.viewPaddingOf': (props) =>
      MediaQuery.viewPaddingOf(props['pa'][0]),
  'MediaQueryData': (props) => MediaQueryData(
      size: props['size'] ?? Size.zero,
      devicePixelRatio: props['devicePixelRatio']?.toDouble() ?? 1.0,
      textScaleFactor: props['textScaleFactor']?.toDouble() ?? 1.0,
      platformBrightness: props['platformBrightness'] ?? Brightness.light,
      padding: props['padding'] ?? EdgeInsets.zero,
      viewInsets: props['viewInsets'] ?? EdgeInsets.zero,
      systemGestureInsets: props['systemGestureInsets'] ?? EdgeInsets.zero,
      viewPadding: props['viewPadding'] ?? EdgeInsets.zero,
      alwaysUse24HourFormat: props['alwaysUse24HourFormat'] ?? false,
      accessibleNavigation: props['accessibleNavigation'] ?? false,
      invertColors: props['invertColors'] ?? false,
      highContrast: props['highContrast'] ?? false,
      disableAnimations: props['disableAnimations'] ?? false,
      boldText: props['boldText'] ?? false,
      navigationMode: props['navigationMode'] ?? NavigationMode.traditional,
      gestureSettings: props['gestureSettings'] ??
          const DeviceGestureSettings(touchSlop: kTouchSlop),
      displayFeatures: as<DisplayFeature>(props['displayFeatures']) ??
          const <ui.DisplayFeature>[]),
  'MediaQueryData.fromView': (props) => MediaQueryData.fromView(props['pa'][0],
      platformData: props['platformData']),
  'MemoryAllocations.instance': MemoryAllocations.instance,
  'MemoryImage': (props) =>
      MemoryImage(props['pa'][0], scale: props['scale']?.toDouble() ?? 1.0),
  'MenuAcceleratorCallbackBinding': (props) => MenuAcceleratorCallbackBinding(
      key: props['key'],
      onInvoke: props['onInvoke'],
      hasSubmenu: props['hasSubmenu'] ?? false,
      child: props['child']),
  'MenuAcceleratorCallbackBinding.maybeOf': (props) =>
      MenuAcceleratorCallbackBinding.maybeOf(props['pa'][0]),
  'MenuAcceleratorCallbackBinding.of': (props) =>
      MenuAcceleratorCallbackBinding.of(props['pa'][0]),
  'MenuAcceleratorLabel': (props) => MenuAcceleratorLabel(props['pa'][0],
      key: props['key'], builder: props['builder'] ?? defaultLabelBuilder),
  'MenuAcceleratorLabel.defaultLabelBuilder': (props) =>
      MenuAcceleratorLabel.defaultLabelBuilder(
          props['pa'][0], props['pa'][1], props['pa'][2]),
  'MenuAcceleratorLabel.stripAcceleratorMarkers': (props) =>
      MenuAcceleratorLabel.stripAcceleratorMarkers(props['pa'][0],
          setIndex: props['setIndex']),
  'MenuAnchor': (props) => MenuAnchor(
      key: props['key'],
      controller: props['controller'],
      childFocusNode: props['childFocusNode'],
      style: props['style'],
      alignmentOffset: props['alignmentOffset'] ?? Offset.zero,
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      anchorTapClosesMenu: props['anchorTapClosesMenu'] ?? false,
      onOpen: props['onOpen'],
      onClose: props['onClose'],
      crossAxisUnconstrained: props['crossAxisUnconstrained'] ?? true,
      menuChildren: as<Widget>(props['menuChildren']) ?? const [],
      builder: props['builder'],
      child: props['child']),
  'MenuBar': (props) => MenuBar(
      key: props['key'],
      style: props['style'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      controller: props['controller'],
      children: as<Widget>(props['children']) ?? const []),
  'MenuBarTheme': (props) => MenuBarTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'MenuBarTheme.of': (props) => MenuBarTheme.of(props['pa'][0]),
  'MenuBarThemeData': (props) => MenuBarThemeData(style: props['style']),
  'MenuBarThemeData.lerp': (props) => MenuBarThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'MenuButtonTheme': (props) => MenuButtonTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'MenuButtonTheme.of': (props) => MenuButtonTheme.of(props['pa'][0]),
  'MenuButtonThemeData': (props) => MenuButtonThemeData(style: props['style']),
  'MenuButtonThemeData.lerp': (props) => MenuButtonThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'MenuController': (props) => MenuController(),
  'MenuItemButton': (props) => MenuItemButton(
      key: props['key'],
      onPressed: props['onPressed'],
      onHover: props['onHover'],
      requestFocusOnHover: props['requestFocusOnHover'] ?? true,
      onFocusChange: props['onFocusChange'],
      focusNode: props['focusNode'],
      shortcut: props['shortcut'],
      style: props['style'],
      statesController: props['statesController'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      leadingIcon: props['leadingIcon'],
      trailingIcon: props['trailingIcon'],
      closeOnActivate: props['closeOnActivate'] ?? true,
      child: props['child']),
  'MenuItemButton.styleFrom': (props) => MenuItemButton.styleFrom(
      foregroundColor: props['foregroundColor'],
      backgroundColor: props['backgroundColor'],
      disabledForegroundColor: props['disabledForegroundColor'],
      disabledBackgroundColor: props['disabledBackgroundColor'],
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      iconColor: props['iconColor'],
      textStyle: props['textStyle'],
      elevation: props['elevation']?.toDouble(),
      padding: props['padding'],
      minimumSize: props['minimumSize'],
      fixedSize: props['fixedSize'],
      maximumSize: props['maximumSize'],
      enabledMouseCursor: props['enabledMouseCursor'],
      disabledMouseCursor: props['disabledMouseCursor'],
      side: props['side'],
      shape: props['shape'],
      visualDensity: props['visualDensity'],
      tapTargetSize: props['tapTargetSize'],
      animationDuration: props['animationDuration'],
      enableFeedback: props['enableFeedback'],
      alignment: props['alignment'],
      splashFactory: props['splashFactory']),
  'MenuStyle': (props) => MenuStyle(
      backgroundColor: props['backgroundColor'],
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      elevation: props['elevation'],
      padding: props['padding'],
      minimumSize: props['minimumSize'],
      fixedSize: props['fixedSize'],
      maximumSize: props['maximumSize'],
      side: props['side'],
      shape: props['shape'],
      mouseCursor: props['mouseCursor'],
      visualDensity: props['visualDensity'],
      alignment: props['alignment']),
  'MenuStyle.lerp': (props) => MenuStyle.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'MenuTheme': (props) =>
      MenuTheme(key: props['key'], data: props['data'], child: props['child']),
  'MenuTheme.of': (props) => MenuTheme.of(props['pa'][0]),
  'MenuThemeData': (props) => MenuThemeData(style: props['style']),
  'MenuThemeData.lerp': (props) => MenuThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'MergeSemantics': (props) =>
      MergeSemantics(key: props['key'], child: props['child']),
  'MergeableMaterial': (props) => MergeableMaterial(
      key: props['key'],
      mainAxis: props['mainAxis'] ?? Axis.vertical,
      elevation: props['elevation']?.toDouble() ?? 2,
      hasDividers: props['hasDividers'] ?? false,
      children: as<MergeableMaterialItem>(props['children']) ??
          const <MergeableMaterialItem>[],
      dividerColor: props['dividerColor']),
  'MessageProperty': (props) => MessageProperty(props['pa'][0], props['pa'][1],
      style: props['style'] ?? DiagnosticsTreeStyle.singleLine,
      level: props['level'] ?? DiagnosticLevel.info),
  'MetaData': (props) => MetaData(
      key: props['key'],
      metaData: props['metaData'],
      behavior: props['behavior'] ?? HitTestBehavior.deferToChild,
      child: props['child']),
  'MethodCall': (props) => MethodCall(
      props['pa'][0], (props['pa'].length > 1 ? props['pa'][1] : null)),
  'MethodChannel': (props) => MethodChannel(
      props['pa'][0],
      (props['pa'].length > 1 ? props['pa'][1] : null) ??
          const StandardMethodCodec(),
      (props['pa'].length > 2 ? props['pa'][2] : null)),
  'MinColumnWidth': (props) => MinColumnWidth(props['pa'][0], props['pa'][1]),
  'MissingPluginException': (props) =>
      MissingPluginException((props['pa'].length > 0 ? props['pa'][0] : null)),
  'ModalBarrier': (props) => ModalBarrier(
      key: props['key'],
      color: props['color'],
      dismissible: props['dismissible'] ?? true,
      onDismiss: props['onDismiss'],
      semanticsLabel: props['semanticsLabel'],
      barrierSemanticsDismissible: props['barrierSemanticsDismissible'] ?? true,
      clipDetailsNotifier: props['clipDetailsNotifier'],
      semanticsOnTapHint: props['semanticsOnTapHint']),
  'ModalBottomSheetRoute': (props) => ModalBottomSheetRoute(
      builder: props['builder'],
      capturedThemes: props['capturedThemes'],
      barrierLabel: props['barrierLabel'],
      barrierOnTapHint: props['barrierOnTapHint'],
      backgroundColor: props['backgroundColor'],
      elevation: props['elevation']?.toDouble(),
      shape: props['shape'],
      clipBehavior: props['clipBehavior'],
      constraints: props['constraints'],
      modalBarrierColor: props['modalBarrierColor'],
      isDismissible: props['isDismissible'] ?? true,
      enableDrag: props['enableDrag'] ?? true,
      showDragHandle: props['showDragHandle'],
      isScrollControlled: props['isScrollControlled'],
      settings: props['settings'],
      transitionAnimationController: props['transitionAnimationController'],
      anchorPoint: props['anchorPoint'],
      useSafeArea: props['useSafeArea'] ?? false),
  'ModifierKey.altModifier': ModifierKey.altModifier,
  'ModifierKey.capsLockModifier': ModifierKey.capsLockModifier,
  'ModifierKey.controlModifier': ModifierKey.controlModifier,
  'ModifierKey.functionModifier': ModifierKey.functionModifier,
  'ModifierKey.metaModifier': ModifierKey.metaModifier,
  'ModifierKey.numLockModifier': ModifierKey.numLockModifier,
  'ModifierKey.scrollLockModifier': ModifierKey.scrollLockModifier,
  'ModifierKey.shiftModifier': ModifierKey.shiftModifier,
  'ModifierKey.symbolModifier': ModifierKey.symbolModifier,
  'ModifierKey.values': ModifierKey.values,
  'MouseCursorManager': (props) => MouseCursorManager(props['pa'][0]),
  'MouseRegion': (props) => MouseRegion(
      key: props['key'],
      onEnter: props['onEnter'],
      onExit: props['onExit'],
      onHover: props['onHover'],
      cursor: props['cursor'] ?? MouseCursor.defer,
      opaque: props['opaque'] ?? true,
      hitTestBehavior: props['hitTestBehavior'],
      child: props['child']),
  'MouseTracker': (props) => MouseTracker(),
  'MouseTrackerAnnotation': (props) => MouseTrackerAnnotation(
      onEnter: props['onEnter'],
      onExit: props['onExit'],
      cursor: props['cursor'] ?? MouseCursor.defer,
      validForMouseTracker: props['validForMouseTracker'] ?? true),
  'MultiChildLayoutParentData': (props) => MultiChildLayoutParentData(),
  'MultiChildRenderObjectElement': (props) =>
      MultiChildRenderObjectElement(props['pa'][0]),
  'MultiFrameImageStreamCompleter': (props) => MultiFrameImageStreamCompleter(
      codec: props['codec'],
      scale: props['scale']?.toDouble() ?? 0,
      debugLabel: props['debugLabel'],
      chunkEvents: props['chunkEvents'],
      informationCollector: props['informationCollector']),
  'MultiTapGestureRecognizer': (props) => MultiTapGestureRecognizer(
      longTapDelay: props['longTapDelay'] ?? Duration.zero,
      debugOwner: props['debugOwner'],
      supportedDevices: props['supportedDevices'],
      allowedButtonsFilter: props['allowedButtonsFilter']),
  'NavigationBar': (props) => NavigationBar(
      key: props['key'],
      animationDuration: props['animationDuration'],
      selectedIndex: props['selectedIndex'] ?? 0,
      destinations: as<Widget>(props['destinations']) ?? const [],
      onDestinationSelected: props['onDestinationSelected'],
      backgroundColor: props['backgroundColor'],
      elevation: props['elevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      indicatorColor: props['indicatorColor'],
      indicatorShape: props['indicatorShape'],
      height: props['height']?.toDouble(),
      labelBehavior: props['labelBehavior']),
  'NavigationBarTheme': (props) => NavigationBarTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'NavigationBarTheme.of': (props) => NavigationBarTheme.of(props['pa'][0]),
  'NavigationBarThemeData': (props) => NavigationBarThemeData(
      height: props['height']?.toDouble(),
      backgroundColor: props['backgroundColor'],
      elevation: props['elevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      indicatorColor: props['indicatorColor'],
      indicatorShape: props['indicatorShape'],
      labelTextStyle: props['labelTextStyle'],
      iconTheme: props['iconTheme'],
      labelBehavior: props['labelBehavior']),
  'NavigationBarThemeData.lerp': (props) => NavigationBarThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'NavigationDestination': (props) => NavigationDestination(
      key: props['key'],
      icon: props['icon'],
      selectedIcon: props['selectedIcon'],
      label: props['label'],
      tooltip: props['tooltip']),
  'NavigationDestinationLabelBehavior.alwaysHide':
      NavigationDestinationLabelBehavior.alwaysHide,
  'NavigationDestinationLabelBehavior.alwaysShow':
      NavigationDestinationLabelBehavior.alwaysShow,
  'NavigationDestinationLabelBehavior.onlyShowSelected':
      NavigationDestinationLabelBehavior.onlyShowSelected,
  'NavigationDestinationLabelBehavior.values':
      NavigationDestinationLabelBehavior.values,
  'NavigationDrawer': (props) => NavigationDrawer(
      key: props['key'],
      children: as<Widget>(props['children']) ?? const [],
      backgroundColor: props['backgroundColor'],
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      elevation: props['elevation']?.toDouble(),
      indicatorColor: props['indicatorColor'],
      indicatorShape: props['indicatorShape'],
      onDestinationSelected: props['onDestinationSelected'],
      selectedIndex: props['selectedIndex'] ?? 0,
      tilePadding:
          props['tilePadding'] ?? const EdgeInsets.symmetric(horizontal: 12.0)),
  'NavigationDrawerDestination': (props) => NavigationDrawerDestination(
      key: props['key'],
      backgroundColor: props['backgroundColor'],
      icon: props['icon'],
      selectedIcon: props['selectedIcon'],
      label: props['label']),
  'NavigationDrawerTheme': (props) => NavigationDrawerTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'NavigationDrawerTheme.of': (props) =>
      NavigationDrawerTheme.of(props['pa'][0]),
  'NavigationDrawerThemeData': (props) => NavigationDrawerThemeData(
      tileHeight: props['tileHeight']?.toDouble(),
      backgroundColor: props['backgroundColor'],
      elevation: props['elevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      indicatorColor: props['indicatorColor'],
      indicatorShape: props['indicatorShape'],
      indicatorSize: props['indicatorSize'],
      labelTextStyle: props['labelTextStyle'],
      iconTheme: props['iconTheme']),
  'NavigationDrawerThemeData.lerp': (props) => NavigationDrawerThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'NavigationIndicator': (props) => NavigationIndicator(
      key: props['key'],
      animation: props['animation'],
      color: props['color'],
      width: props['width']?.toDouble() ?? _kIndicatorWidth,
      height: props['height']?.toDouble() ?? _kIndicatorHeight,
      borderRadius:
          props['borderRadius'] ?? const BorderRadius.all(Radius.circular(16)),
      shape: props['shape']),
  'NavigationMode.directional': NavigationMode.directional,
  'NavigationMode.traditional': NavigationMode.traditional,
  'NavigationMode.values': NavigationMode.values,
  'NavigationRail': (props) => NavigationRail(
      key: props['key'],
      backgroundColor: props['backgroundColor'],
      extended: props['extended'] ?? false,
      leading: props['leading'],
      trailing: props['trailing'],
      destinations:
          as<NavigationRailDestination>(props['destinations']) ?? const [],
      selectedIndex: props['selectedIndex'],
      onDestinationSelected: props['onDestinationSelected'],
      elevation: props['elevation']?.toDouble(),
      groupAlignment: props['groupAlignment']?.toDouble(),
      labelType: props['labelType'],
      unselectedLabelTextStyle: props['unselectedLabelTextStyle'],
      selectedLabelTextStyle: props['selectedLabelTextStyle'],
      unselectedIconTheme: props['unselectedIconTheme'],
      selectedIconTheme: props['selectedIconTheme'],
      minWidth: props['minWidth']?.toDouble(),
      minExtendedWidth: props['minExtendedWidth']?.toDouble(),
      useIndicator: props['useIndicator'],
      indicatorColor: props['indicatorColor'],
      indicatorShape: props['indicatorShape']),
  'NavigationRail.extendedAnimation': (props) =>
      NavigationRail.extendedAnimation(props['pa'][0]),
  'NavigationRailDestination': (props) => NavigationRailDestination(
      icon: props['icon'],
      selectedIcon: props['selectedIcon'],
      indicatorColor: props['indicatorColor'],
      indicatorShape: props['indicatorShape'],
      label: props['label'],
      padding: props['padding']),
  'NavigationRailLabelType.all': NavigationRailLabelType.all,
  'NavigationRailLabelType.none': NavigationRailLabelType.none,
  'NavigationRailLabelType.selected': NavigationRailLabelType.selected,
  'NavigationRailLabelType.values': NavigationRailLabelType.values,
  'NavigationRailTheme': (props) => NavigationRailTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'NavigationRailTheme.of': (props) => NavigationRailTheme.of(props['pa'][0]),
  'NavigationRailThemeData': (props) => NavigationRailThemeData(
      backgroundColor: props['backgroundColor'],
      elevation: props['elevation']?.toDouble(),
      unselectedLabelTextStyle: props['unselectedLabelTextStyle'],
      selectedLabelTextStyle: props['selectedLabelTextStyle'],
      unselectedIconTheme: props['unselectedIconTheme'],
      selectedIconTheme: props['selectedIconTheme'],
      groupAlignment: props['groupAlignment']?.toDouble(),
      labelType: props['labelType'],
      useIndicator: props['useIndicator'],
      indicatorColor: props['indicatorColor'],
      indicatorShape: props['indicatorShape'],
      minWidth: props['minWidth']?.toDouble(),
      minExtendedWidth: props['minExtendedWidth']?.toDouble()),
  'NavigationRailThemeData.lerp': (props) => NavigationRailThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'NavigationToolbar': (props) => NavigationToolbar(
      key: props['key'],
      leading: props['leading'],
      middle: props['middle'],
      trailing: props['trailing'],
      centerMiddle: props['centerMiddle'] ?? true,
      middleSpacing: props['middleSpacing']?.toDouble() ?? kMiddleSpacing),
  'NavigationToolbar.kMiddleSpacing': NavigationToolbar.kMiddleSpacing,
  'Navigator': (props) => Navigator(
      key: props['key'],
      pages: as<Page>(props['pages']) ?? const <Page<dynamic>>[],
      onPopPage: props['onPopPage'],
      initialRoute: props['initialRoute'],
      onGenerateInitialRoutes: props['onGenerateInitialRoutes'] ??
          Navigator.defaultGenerateInitialRoutes,
      onGenerateRoute: props['onGenerateRoute'],
      onUnknownRoute: props['onUnknownRoute'],
      transitionDelegate: props['transitionDelegate'] ??
          const DefaultTransitionDelegate<dynamic>(),
      reportsRouteUpdateToEngine: props['reportsRouteUpdateToEngine'] ?? false,
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      observers: as<NavigatorObserver>(props['observers']) ??
          const <NavigatorObserver>[],
      requestFocus: props['requestFocus'] ?? true,
      restorationScopeId: props['restorationScopeId'],
      routeTraversalEdgeBehavior: props['routeTraversalEdgeBehavior'] ??
          kDefaultRouteTraversalEdgeBehavior),
  'Navigator.canPop': (props) => Navigator.canPop(props['pa'][0]),
  'Navigator.defaultGenerateInitialRoutes': (props) =>
      Navigator.defaultGenerateInitialRoutes(props['pa'][0], props['pa'][1]),
  'Navigator.defaultRouteName': Navigator.defaultRouteName,
  'Navigator.maybeOf': (props) => Navigator.maybeOf(props['pa'][0],
      rootNavigator: props['rootNavigator'] ?? false),
  'Navigator.maybePop': (props) => Navigator.maybePop(
      props['pa'][0], (props['pa'].length > 1 ? props['pa'][1] : null)),
  'Navigator.of': (props) => Navigator.of(props['pa'][0],
      rootNavigator: props['rootNavigator'] ?? false),
  'Navigator.pop': (props) => Navigator.pop(
      props['pa'][0], (props['pa'].length > 1 ? props['pa'][1] : null)),
  'Navigator.popAndPushNamed': (props) => Navigator.popAndPushNamed(
      props['pa'][0], props['pa'][1],
      result: props['result'], arguments: props['arguments']),
  'Navigator.popUntil': (props) =>
      Navigator.popUntil(props['pa'][0], props['pa'][1]),
  'Navigator.push': (props) => Navigator.push(props['pa'][0], props['pa'][1]),
  'Navigator.pushAndRemoveUntil': (props) => Navigator.pushAndRemoveUntil(
      props['pa'][0], props['pa'][1], props['pa'][2]),
  'Navigator.pushNamed': (props) => Navigator.pushNamed(
      props['pa'][0], props['pa'][1],
      arguments: props['arguments']),
  'Navigator.pushNamedAndRemoveUntil': (props) =>
      Navigator.pushNamedAndRemoveUntil(
          props['pa'][0], props['pa'][1], props['pa'][2],
          arguments: props['arguments']),
  'Navigator.pushReplacement': (props) => Navigator.pushReplacement(
      props['pa'][0], props['pa'][1],
      result: props['result']),
  'Navigator.pushReplacementNamed': (props) => Navigator.pushReplacementNamed(
      props['pa'][0], props['pa'][1],
      result: props['result'], arguments: props['arguments']),
  'Navigator.removeRoute': (props) =>
      Navigator.removeRoute(props['pa'][0], props['pa'][1]),
  'Navigator.removeRouteBelow': (props) =>
      Navigator.removeRouteBelow(props['pa'][0], props['pa'][1]),
  'Navigator.replace': (props) => Navigator.replace(props['pa'][0],
      oldRoute: props['oldRoute'], newRoute: props['newRoute']),
  'Navigator.replaceRouteBelow': (props) => Navigator.replaceRouteBelow(
      props['pa'][0],
      anchorRoute: props['anchorRoute'],
      newRoute: props['newRoute']),
  'Navigator.restorablePopAndPushNamed': (props) =>
      Navigator.restorablePopAndPushNamed(props['pa'][0], props['pa'][1],
          result: props['result'], arguments: props['arguments']),
  'Navigator.restorablePush': (props) => Navigator.restorablePush(
      props['pa'][0], props['pa'][1],
      arguments: props['arguments']),
  'Navigator.restorablePushAndRemoveUntil': (props) =>
      Navigator.restorablePushAndRemoveUntil(
          props['pa'][0], props['pa'][1], props['pa'][2],
          arguments: props['arguments']),
  'Navigator.restorablePushNamed': (props) => Navigator.restorablePushNamed(
      props['pa'][0], props['pa'][1],
      arguments: props['arguments']),
  'Navigator.restorablePushNamedAndRemoveUntil': (props) =>
      Navigator.restorablePushNamedAndRemoveUntil(
          props['pa'][0], props['pa'][1], props['pa'][2],
          arguments: props['arguments']),
  'Navigator.restorablePushReplacement': (props) =>
      Navigator.restorablePushReplacement(props['pa'][0], props['pa'][1],
          result: props['result'], arguments: props['arguments']),
  'Navigator.restorablePushReplacementNamed': (props) =>
      Navigator.restorablePushReplacementNamed(props['pa'][0], props['pa'][1],
          result: props['result'], arguments: props['arguments']),
  'Navigator.restorableReplace': (props) => Navigator.restorableReplace(
      props['pa'][0],
      oldRoute: props['oldRoute'],
      newRouteBuilder: props['newRouteBuilder'],
      arguments: props['arguments']),
  'Navigator.restorableReplaceRouteBelow': (props) =>
      Navigator.restorableReplaceRouteBelow(props['pa'][0],
          anchorRoute: props['anchorRoute'],
          newRouteBuilder: props['newRouteBuilder'],
          arguments: props['arguments']),
  'NavigatorObserver': (props) => NavigatorObserver(),
  'NestedScrollView': (props) => NestedScrollView(
      key: props['key'],
      controller: props['controller'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      physics: props['physics'],
      headerSliverBuilder: props['headerSliverBuilder'],
      body: props['body'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      floatHeaderSlivers: props['floatHeaderSlivers'] ?? false,
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      restorationId: props['restorationId'],
      scrollBehavior: props['scrollBehavior']),
  'NestedScrollView.sliverOverlapAbsorberHandleFor': (props) =>
      NestedScrollView.sliverOverlapAbsorberHandleFor(props['pa'][0]),
  'NestedScrollViewViewport': (props) => NestedScrollViewViewport(
      key: props['key'],
      axisDirection: props['axisDirection'] ?? AxisDirection.down,
      crossAxisDirection: props['crossAxisDirection'],
      anchor: props['anchor']?.toDouble() ?? 0.0,
      offset: props['offset'],
      center: props['center'],
      slivers: as<Widget>(props['slivers']) ?? const <Widget>[],
      handle: props['handle'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'NetworkAssetBundle': (props) => NetworkAssetBundle(props['pa'][0]),
  'NetworkImage': (props) => NetworkImage(props['pa'][0],
      scale: props['scale']?.toDouble() ?? 1.0, headers: props['headers']),
  'NetworkImageLoadException': (props) => NetworkImageLoadException(
      statusCode: props['statusCode'], uri: props['uri']),
  'NeverScrollableScrollPhysics': (props) =>
      NeverScrollableScrollPhysics(parent: props['parent']),
  'NextFocusAction': (props) => NextFocusAction(),
  'NextFocusIntent': (props) => const NextFocusIntent(),
  'NoDefaultCupertinoThemeData': (props) => NoDefaultCupertinoThemeData(
      brightness: props['brightness'],
      primaryColor: props['primaryColor'],
      primaryContrastingColor: props['primaryContrastingColor'],
      textTheme: props['textTheme'],
      barBackgroundColor: props['barBackgroundColor'],
      scaffoldBackgroundColor: props['scaffoldBackgroundColor'],
      applyThemeToAll: props['applyThemeToAll']),
  'NoSplash': (props) => NoSplash(
      controller: props['controller'],
      referenceBox: props['referenceBox'],
      color: props['color'],
      onRemoved: props['onRemoved']),
  'NoSplash.splashFactory': NoSplash.splashFactory,
  'NotificationListener': (props) => NotificationListener(
      key: props['key'],
      child: props['child'],
      onNotification: props['onNotification']),
  'NumericFocusOrder': (props) => NumericFocusOrder(props['pa'][0]?.toDouble()),
  'ObjectCreated': (props) => ObjectCreated(
      library: props['library'],
      className: props['className'],
      object: props['object']),
  'ObjectDisposed': (props) => ObjectDisposed(object: props['object']),
  'ObjectFlagProperty': (props) => ObjectFlagProperty(
      props['pa'][0], props['pa'][1],
      ifPresent: props['ifPresent'],
      ifNull: props['ifNull'],
      showName: props['showName'] ?? false,
      level: props['level'] ?? DiagnosticLevel.info),
  'ObjectFlagProperty.has': (props) => ObjectFlagProperty.has(
      props['pa'][0], props['pa'][1],
      level: props['level'] ?? DiagnosticLevel.info),
  'ObjectKey': (props) => ObjectKey(props['pa'][0]),
  'ObserverList': (props) => ObserverList(),
  'Offset': (props) =>
      Offset(props['pa'][0]?.toDouble(), props['pa'][1]?.toDouble()),
  'Offset.fromDirection': (props) => Offset.fromDirection(
      props['pa'][0]?.toDouble(),
      (props['pa'].length > 1 ? props['pa'][1] : null)?.toDouble() ?? 1.0),
  'Offset.infinite': Offset.infinite,
  'Offset.lerp': (props) =>
      Offset.lerp(props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'Offset.zero': Offset.zero,
  'OffsetLayer': (props) => OffsetLayer(offset: props['offset'] ?? Offset.zero),
  'OffsetPair': (props) =>
      OffsetPair(local: props['local'], global: props['global']),
  'OffsetPair.fromEventDelta': (props) =>
      OffsetPair.fromEventDelta(props['pa'][0]),
  'OffsetPair.fromEventPosition': (props) =>
      OffsetPair.fromEventPosition(props['pa'][0]),
  'OffsetPair.zero': OffsetPair.zero,
  'Offstage': (props) => Offstage(
      key: props['key'],
      offstage: props['offstage'] ?? true,
      child: props['child']),
  'OneFrameImageStreamCompleter': (props) => OneFrameImageStreamCompleter(
      props['pa'][0],
      informationCollector: props['informationCollector']),
  'Opacity': (props) => Opacity(
      key: props['key'],
      opacity: props['opacity']?.toDouble() ?? 0,
      alwaysIncludeSemantics: props['alwaysIncludeSemantics'] ?? false,
      child: props['child']),
  'OpacityLayer': (props) => OpacityLayer(
      alpha: props['alpha'], offset: props['offset'] ?? Offset.zero),
  'OpenUpwardsPageTransitionsBuilder': (props) =>
      const OpenUpwardsPageTransitionsBuilder(),
  'OptionalMethodChannel': (props) => OptionalMethodChannel(
      props['pa'][0],
      (props['pa'].length > 1 ? props['pa'][1] : null) ??
          const StandardMethodCodec(),
      (props['pa'].length > 2 ? props['pa'][2] : null)),
  'OrderedTraversalPolicy': (props) => OrderedTraversalPolicy(
      secondary: props['secondary'],
      requestFocusCallback: props['requestFocusCallback']),
  'OrdinalSortKey': (props) =>
      OrdinalSortKey(props['pa'][0]?.toDouble(), name: props['name']),
  'Orientation.landscape': Orientation.landscape,
  'Orientation.portrait': Orientation.portrait,
  'Orientation.values': Orientation.values,
  'OrientationBuilder': (props) =>
      OrientationBuilder(key: props['key'], builder: props['builder']),
  'OutlineInputBorder': (props) => OutlineInputBorder(
      borderSide: props['borderSide'] ?? const BorderSide(),
      borderRadius:
          props['borderRadius'] ?? const BorderRadius.all(Radius.circular(4.0)),
      gapPadding: props['gapPadding']?.toDouble() ?? 4.0),
  'OutlinedButton': (props) => OutlinedButton(
      key: props['key'],
      onPressed: props['onPressed'],
      onLongPress: props['onLongPress'],
      onHover: props['onHover'],
      onFocusChange: props['onFocusChange'],
      style: props['style'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      statesController: props['statesController'],
      child: props['child']),
  'OutlinedButton.icon': (props) => OutlinedButton.icon(
      key: props['key'],
      onPressed: props['onPressed'],
      onLongPress: props['onLongPress'],
      style: props['style'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      statesController: props['statesController'],
      icon: props['icon'],
      label: props['label']),
  'OutlinedButton.styleFrom': (props) => OutlinedButton.styleFrom(
      foregroundColor: props['foregroundColor'],
      backgroundColor: props['backgroundColor'],
      disabledForegroundColor: props['disabledForegroundColor'],
      disabledBackgroundColor: props['disabledBackgroundColor'],
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      elevation: props['elevation']?.toDouble(),
      textStyle: props['textStyle'],
      padding: props['padding'],
      minimumSize: props['minimumSize'],
      fixedSize: props['fixedSize'],
      maximumSize: props['maximumSize'],
      side: props['side'],
      shape: props['shape'],
      enabledMouseCursor: props['enabledMouseCursor'],
      disabledMouseCursor: props['disabledMouseCursor'],
      visualDensity: props['visualDensity'],
      tapTargetSize: props['tapTargetSize'],
      animationDuration: props['animationDuration'],
      enableFeedback: props['enableFeedback'],
      alignment: props['alignment'],
      splashFactory: props['splashFactory'],
      primary: props['primary'],
      onSurface: props['onSurface']),
  'OutlinedButtonTheme': (props) => OutlinedButtonTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'OutlinedButtonTheme.of': (props) => OutlinedButtonTheme.of(props['pa'][0]),
  'OutlinedButtonThemeData': (props) =>
      OutlinedButtonThemeData(style: props['style']),
  'OutlinedButtonThemeData.lerp': (props) => OutlinedButtonThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'OvalBorder': (props) => OvalBorder(
      side: props['side'] ?? BorderSide.none,
      eccentricity: props['eccentricity']?.toDouble() ?? 1.0),
  'OverScrollHeaderStretchConfiguration': (props) =>
      OverScrollHeaderStretchConfiguration(
          stretchTriggerOffset:
              props['stretchTriggerOffset']?.toDouble() ?? 100.0,
          onStretchTrigger: props['onStretchTrigger']),
  'OverflowBar': (props) => OverflowBar(
      key: props['key'],
      spacing: props['spacing']?.toDouble() ?? 0.0,
      alignment: props['alignment'],
      overflowSpacing: props['overflowSpacing']?.toDouble() ?? 0.0,
      overflowAlignment:
          props['overflowAlignment'] ?? OverflowBarAlignment.start,
      overflowDirection: props['overflowDirection'] ?? VerticalDirection.down,
      textDirection: props['textDirection'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      children: as<Widget>(props['children']) ?? const <Widget>[]),
  'OverflowBarAlignment.center': OverflowBarAlignment.center,
  'OverflowBarAlignment.end': OverflowBarAlignment.end,
  'OverflowBarAlignment.start': OverflowBarAlignment.start,
  'OverflowBarAlignment.values': OverflowBarAlignment.values,
  'OverflowBox': (props) => OverflowBox(
      key: props['key'],
      alignment: props['alignment'] ?? Alignment.center,
      minWidth: props['minWidth']?.toDouble(),
      maxWidth: props['maxWidth']?.toDouble(),
      minHeight: props['minHeight']?.toDouble(),
      maxHeight: props['maxHeight']?.toDouble(),
      child: props['child']),
  'Overlay': (props) => Overlay(
      key: props['key'],
      initialEntries:
          as<OverlayEntry>(props['initialEntries']) ?? const <OverlayEntry>[],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'Overlay.maybeOf': (props) => Overlay.maybeOf(props['pa'][0],
      rootOverlay: props['rootOverlay'] ?? false),
  'Overlay.of': (props) => Overlay.of(props['pa'][0],
      rootOverlay: props['rootOverlay'] ?? false,
      debugRequiredFor: props['debugRequiredFor']),
  'OverlayEntry': (props) => OverlayEntry(
      builder: props['builder'],
      opaque: props['opaque'] ?? false,
      maintainState: props['maintainState'] ?? false),
  'OverlayPortal': (props) => OverlayPortal(
      key: props['key'],
      controller: props['controller'],
      overlayChildBuilder: props['overlayChildBuilder'],
      child: props['child']),
  'OverlayPortal.targetsRootOverlay': (props) =>
      OverlayPortal.targetsRootOverlay(
          key: props['key'],
          controller: props['controller'],
          overlayChildBuilder: props['overlayChildBuilder'],
          child: props['child']),
  'OverlayPortalController': (props) =>
      OverlayPortalController(debugLabel: props['debugLabel']),
  'OverlayVisibilityMode.always': OverlayVisibilityMode.always,
  'OverlayVisibilityMode.editing': OverlayVisibilityMode.editing,
  'OverlayVisibilityMode.never': OverlayVisibilityMode.never,
  'OverlayVisibilityMode.notEditing': OverlayVisibilityMode.notEditing,
  'OverlayVisibilityMode.values': OverlayVisibilityMode.values,
  'OverscrollIndicatorNotification': (props) =>
      OverscrollIndicatorNotification(leading: props['leading']),
  'OverscrollNotification': (props) => OverscrollNotification(
      metrics: props['metrics'],
      context: props['context'],
      dragDetails: props['dragDetails'],
      overscroll: props['overscroll']?.toDouble() ?? 0,
      velocity: props['velocity']?.toDouble() ?? 0.0),
  'Padding': (props) => Padding(
      key: props['key'], padding: props['padding'], child: props['child']),
  'PaddleRangeSliderValueIndicatorShape': (props) =>
      const PaddleRangeSliderValueIndicatorShape(),
  'PaddleSliderValueIndicatorShape': (props) =>
      const PaddleSliderValueIndicatorShape(),
  'PageController': (props) => PageController(
      initialPage: props['initialPage'] ?? 0,
      keepPage: props['keepPage'] ?? true,
      viewportFraction: props['viewportFraction']?.toDouble() ?? 1.0),
  'PageMetrics': (props) => PageMetrics(
      minScrollExtent: props['minScrollExtent']?.toDouble() ?? 0,
      maxScrollExtent: props['maxScrollExtent']?.toDouble() ?? 0,
      pixels: props['pixels']?.toDouble() ?? 0,
      viewportDimension: props['viewportDimension']?.toDouble() ?? 0,
      axisDirection: props['axisDirection'],
      viewportFraction: props['viewportFraction']?.toDouble() ?? 0,
      devicePixelRatio: props['devicePixelRatio']?.toDouble() ?? 0),
  'PageRouteBuilder': (props) => PageRouteBuilder(
      settings: props['settings'],
      pageBuilder: props['pageBuilder'],
      transitionsBuilder:
          props['transitionsBuilder'] ?? _defaultTransitionsBuilder,
      transitionDuration:
          props['transitionDuration'] ?? const Duration(milliseconds: 300),
      reverseTransitionDuration: props['reverseTransitionDuration'] ??
          const Duration(milliseconds: 300),
      opaque: props['opaque'] ?? true,
      barrierDismissible: props['barrierDismissible'] ?? false,
      barrierColor: props['barrierColor'],
      barrierLabel: props['barrierLabel'],
      maintainState: props['maintainState'] ?? true,
      fullscreenDialog: props['fullscreenDialog'] ?? false,
      allowSnapshotting: props['allowSnapshotting'] ?? true),
  'PageScrollPhysics': (props) => PageScrollPhysics(parent: props['parent']),
  'PageStorage': (props) => PageStorage(
      key: props['key'], bucket: props['bucket'], child: props['child']),
  'PageStorage.maybeOf': (props) => PageStorage.maybeOf(props['pa'][0]),
  'PageStorage.of': (props) => PageStorage.of(props['pa'][0]),
  'PageStorageBucket': (props) => PageStorageBucket(),
  'PageStorageKey': (props) => PageStorageKey(props['pa'][0]),
  'PageTransitionsTheme': (props) =>
      PageTransitionsTheme(builders: props['builders'] ?? _defaultBuilders),
  'PageView': (props) => PageView(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.horizontal,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      physics: props['physics'],
      pageSnapping: props['pageSnapping'] ?? true,
      onPageChanged: props['onPageChanged'],
      children: as<Widget>(props['children']) ?? const <Widget>[],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      allowImplicitScrolling: props['allowImplicitScrolling'] ?? false,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      scrollBehavior: props['scrollBehavior'],
      padEnds: props['padEnds'] ?? true),
  'PageView.builder': (props) => PageView.builder(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.horizontal,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      physics: props['physics'],
      pageSnapping: props['pageSnapping'] ?? true,
      onPageChanged: props['onPageChanged'],
      itemBuilder: props['itemBuilder'],
      findChildIndexCallback: props['findChildIndexCallback'],
      itemCount: props['itemCount'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      allowImplicitScrolling: props['allowImplicitScrolling'] ?? false,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      scrollBehavior: props['scrollBehavior'],
      padEnds: props['padEnds'] ?? true),
  'PageView.custom': (props) => PageView.custom(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.horizontal,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      physics: props['physics'],
      pageSnapping: props['pageSnapping'] ?? true,
      onPageChanged: props['onPageChanged'],
      childrenDelegate: props['childrenDelegate'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      allowImplicitScrolling: props['allowImplicitScrolling'] ?? false,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      scrollBehavior: props['scrollBehavior'],
      padEnds: props['padEnds'] ?? true),
  'PaginatedDataTable': (props) => PaginatedDataTable(
      key: props['key'],
      header: props['header'],
      actions: as<Widget>(props['actions']),
      columns: as<DataColumn>(props['columns']) ?? const [],
      sortColumnIndex: props['sortColumnIndex'],
      sortAscending: props['sortAscending'] ?? true,
      onSelectAll: props['onSelectAll'],
      dataRowHeight: props['dataRowHeight']?.toDouble(),
      dataRowMinHeight: props['dataRowMinHeight']?.toDouble(),
      dataRowMaxHeight: props['dataRowMaxHeight']?.toDouble(),
      headingRowHeight: props['headingRowHeight']?.toDouble() ?? 56.0,
      horizontalMargin: props['horizontalMargin']?.toDouble() ?? 24.0,
      columnSpacing: props['columnSpacing']?.toDouble() ?? 56.0,
      showCheckboxColumn: props['showCheckboxColumn'] ?? true,
      showFirstLastButtons: props['showFirstLastButtons'] ?? false,
      initialFirstRowIndex: props['initialFirstRowIndex'] ?? 0,
      onPageChanged: props['onPageChanged'],
      rowsPerPage: props['rowsPerPage'] ?? defaultRowsPerPage,
      availableRowsPerPage: as<int>(props['availableRowsPerPage']) ??
          const <int>[
            defaultRowsPerPage,
            defaultRowsPerPage * 2,
            defaultRowsPerPage * 5,
            defaultRowsPerPage * 10
          ],
      onRowsPerPageChanged: props['onRowsPerPageChanged'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      arrowHeadColor: props['arrowHeadColor'],
      source: props['source'],
      checkboxHorizontalMargin: props['checkboxHorizontalMargin']?.toDouble(),
      controller: props['controller'],
      primary: props['primary']),
  'PaginatedDataTable.defaultRowsPerPage':
      PaginatedDataTable.defaultRowsPerPage,
  'Paint': (props) => Paint(),
  'Paint.enableDithering': Paint.enableDithering,
  'PaintingContext': (props) => PaintingContext(props['pa'][0], props['pa'][1]),
  'PaintingContext.debugInstrumentRepaintCompositedChild': (props) =>
      PaintingContext.debugInstrumentRepaintCompositedChild(props['pa'][0],
          debugAlsoPaintedParent: props['debugAlsoPaintedParent'] ?? false,
          customContext: props['customContext']),
  'PaintingContext.repaintCompositedChild': (props) =>
      PaintingContext.repaintCompositedChild(props['pa'][0],
          debugAlsoPaintedParent: props['debugAlsoPaintedParent'] ?? false),
  'PaintingContext.updateLayerProperties': (props) =>
      PaintingContext.updateLayerProperties(props['pa'][0]),
  'PaintingStyle.fill': PaintingStyle.fill,
  'PaintingStyle.stroke': PaintingStyle.stroke,
  'PaintingStyle.values': PaintingStyle.values,
  'PanAxis.aligned': PanAxis.aligned,
  'PanAxis.free': PanAxis.free,
  'PanAxis.horizontal': PanAxis.horizontal,
  'PanAxis.values': PanAxis.values,
  'PanAxis.vertical': PanAxis.vertical,
  'PanGestureRecognizer': (props) => PanGestureRecognizer(
      debugOwner: props['debugOwner'],
      supportedDevices: props['supportedDevices'],
      allowedButtonsFilter: props['allowedButtonsFilter']),
  'ParagraphBoundary': (props) => ParagraphBoundary(props['pa'][0]),
  'ParagraphConstraints': (props) =>
      ParagraphConstraints(width: props['width']?.toDouble() ?? 0),
  'ParagraphStyle': (props) => ParagraphStyle(
      textAlign: props['textAlign'],
      textDirection: props['textDirection'],
      maxLines: props['maxLines'],
      fontFamily: props['fontFamily'],
      fontSize: props['fontSize']?.toDouble(),
      height: props['height']?.toDouble(),
      textHeightBehavior: props['textHeightBehavior'],
      fontWeight: props['fontWeight'],
      fontStyle: props['fontStyle'],
      strutStyle: props['strutStyle'],
      ellipsis: props['ellipsis'],
      locale: props['locale']),
  'ParentData': (props) => ParentData(),
  'ParentDataElement': (props) => ParentDataElement(props['pa'][0]),
  'PartialStackFrame': (props) => PartialStackFrame(
      package: props['package'],
      className: props['className'],
      method: props['method']),
  'PartialStackFrame.asynchronousSuspension':
      PartialStackFrame.asynchronousSuspension,
  'PasteTextIntent': (props) => PasteTextIntent(props['pa'][0]),
  'PathFillType.evenOdd': PathFillType.evenOdd,
  'PathFillType.nonZero': PathFillType.nonZero,
  'PathFillType.values': PathFillType.values,
  'PathOperation.difference': PathOperation.difference,
  'PathOperation.intersect': PathOperation.intersect,
  'PathOperation.reverseDifference': PathOperation.reverseDifference,
  'PathOperation.union': PathOperation.union,
  'PathOperation.values': PathOperation.values,
  'PathOperation.xor': PathOperation.xor,
  'PercentProperty': (props) => PercentProperty(
      props['pa'][0], props['pa'][1]?.toDouble(),
      ifNull: props['ifNull'],
      showName: props['showName'] ?? true,
      tooltip: props['tooltip'],
      unit: props['unit'],
      level: props['level'] ?? DiagnosticLevel.info),
  'PerformanceOverlayLayer': (props) => PerformanceOverlayLayer(
      overlayRect: props['overlayRect'],
      optionsMask: props['optionsMask'],
      rasterizerThreshold: props['rasterizerThreshold'],
      checkerboardRasterCacheImages: props['checkerboardRasterCacheImages'],
      checkerboardOffscreenLayers: props['checkerboardOffscreenLayers']),
  'PersistentHashMap.empty': (props) => const PersistentHashMap.empty(),
  'PersistentHeaderShowOnScreenConfiguration': (props) =>
      PersistentHeaderShowOnScreenConfiguration(
          minShowOnScreenExtent: props['minShowOnScreenExtent']?.toDouble() ??
              double.negativeInfinity,
          maxShowOnScreenExtent:
              props['maxShowOnScreenExtent']?.toDouble() ?? double.infinity),
  'PhysicalModel': (props) => PhysicalModel(
      key: props['key'],
      shape: props['shape'] ?? BoxShape.rectangle,
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      borderRadius: props['borderRadius'],
      elevation: props['elevation']?.toDouble() ?? 0.0,
      color: props['color'],
      shadowColor: props['shadowColor'] ?? const Color(0xFF000000),
      child: props['child']),
  'PhysicalShape': (props) => PhysicalShape(
      key: props['key'],
      clipper: props['clipper'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      elevation: props['elevation']?.toDouble() ?? 0.0,
      color: props['color'],
      shadowColor: props['shadowColor'] ?? const Color(0xFF000000),
      child: props['child']),
  'PictureLayer': (props) => PictureLayer(props['pa'][0]),
  'PipelineOwner': (props) => PipelineOwner(
      onNeedVisualUpdate: props['onNeedVisualUpdate'],
      onSemanticsOwnerCreated: props['onSemanticsOwnerCreated'],
      onSemanticsUpdate: props['onSemanticsUpdate'],
      onSemanticsOwnerDisposed: props['onSemanticsOwnerDisposed']),
  'PixelFormat.bgra8888': PixelFormat.bgra8888,
  'PixelFormat.rgba8888': PixelFormat.rgba8888,
  'PixelFormat.rgbaFloat32': PixelFormat.rgbaFloat32,
  'PixelFormat.values': PixelFormat.values,
  'Placeholder': (props) => Placeholder(
      key: props['key'],
      color: props['color'] ?? const Color(0xFF455A64),
      strokeWidth: props['strokeWidth']?.toDouble() ?? 2.0,
      fallbackWidth: props['fallbackWidth']?.toDouble() ?? 400.0,
      fallbackHeight: props['fallbackHeight']?.toDouble() ?? 400.0,
      child: props['child']),
  'PlaceholderAlignment.aboveBaseline': PlaceholderAlignment.aboveBaseline,
  'PlaceholderAlignment.baseline': PlaceholderAlignment.baseline,
  'PlaceholderAlignment.belowBaseline': PlaceholderAlignment.belowBaseline,
  'PlaceholderAlignment.bottom': PlaceholderAlignment.bottom,
  'PlaceholderAlignment.middle': PlaceholderAlignment.middle,
  'PlaceholderAlignment.top': PlaceholderAlignment.top,
  'PlaceholderAlignment.values': PlaceholderAlignment.values,
  'PlaceholderDimensions': (props) => PlaceholderDimensions(
      size: props['size'],
      alignment: props['alignment'],
      baseline: props['baseline'],
      baselineOffset: props['baselineOffset']?.toDouble()),
  'PlaceholderDimensions.empty': PlaceholderDimensions.empty,
  'PlaceholderSpanIndexSemanticsTag': (props) =>
      PlaceholderSpanIndexSemanticsTag(props['pa'][0]),
  'PlatformAssetBundle': (props) => PlatformAssetBundle(),
  'PlatformDispatcher.instance': PlatformDispatcher.instance,
  'PlatformException': (props) => PlatformException(
      code: props['code'],
      message: props['message'],
      details: props['details'],
      stacktrace: props['stacktrace']),
  'PlatformMenu': (props) => PlatformMenu(
      label: props['label'],
      onOpen: props['onOpen'],
      onClose: props['onClose'],
      menus: as<PlatformMenuItem>(props['menus']) ?? const []),
  'PlatformMenu.getDescendants': (props) =>
      PlatformMenu.getDescendants(props['pa'][0]),
  'PlatformMenu.serialize': (props) =>
      PlatformMenu.serialize(props['pa'][0], props['pa'][1], props['pa'][2]),
  'PlatformMenuBar': (props) => PlatformMenuBar(
      key: props['key'],
      menus: as<PlatformMenuItem>(props['menus']) ?? const [],
      child: props['child'],
      body: props['body']),
  'PlatformMenuItem': (props) => PlatformMenuItem(
      label: props['label'],
      shortcut: props['shortcut'],
      onSelected: props['onSelected'],
      onSelectedIntent: props['onSelectedIntent']),
  'PlatformMenuItem.serialize': (props) => PlatformMenuItem.serialize(
      props['pa'][0], props['pa'][1], props['pa'][2]),
  'PlatformMenuItemGroup': (props) => PlatformMenuItemGroup(
      members: as<PlatformMenuItem>(props['members']) ?? const []),
  'PlatformMenuItemGroup.serialize': (props) => PlatformMenuItemGroup.serialize(
      props['pa'][0], props['pa'][1],
      getId: props['getId']),
  'PlatformProvidedMenuItem': (props) => PlatformProvidedMenuItem(
      type: props['type'], enabled: props['enabled'] ?? true),
  'PlatformProvidedMenuItem.hasMenu': (props) =>
      PlatformProvidedMenuItem.hasMenu(props['pa'][0]),
  'PlatformProvidedMenuItemType.about': PlatformProvidedMenuItemType.about,
  'PlatformProvidedMenuItemType.arrangeWindowsInFront':
      PlatformProvidedMenuItemType.arrangeWindowsInFront,
  'PlatformProvidedMenuItemType.hide': PlatformProvidedMenuItemType.hide,
  'PlatformProvidedMenuItemType.hideOtherApplications':
      PlatformProvidedMenuItemType.hideOtherApplications,
  'PlatformProvidedMenuItemType.minimizeWindow':
      PlatformProvidedMenuItemType.minimizeWindow,
  'PlatformProvidedMenuItemType.quit': PlatformProvidedMenuItemType.quit,
  'PlatformProvidedMenuItemType.servicesSubmenu':
      PlatformProvidedMenuItemType.servicesSubmenu,
  'PlatformProvidedMenuItemType.showAllApplications':
      PlatformProvidedMenuItemType.showAllApplications,
  'PlatformProvidedMenuItemType.startSpeaking':
      PlatformProvidedMenuItemType.startSpeaking,
  'PlatformProvidedMenuItemType.stopSpeaking':
      PlatformProvidedMenuItemType.stopSpeaking,
  'PlatformProvidedMenuItemType.toggleFullScreen':
      PlatformProvidedMenuItemType.toggleFullScreen,
  'PlatformProvidedMenuItemType.values': PlatformProvidedMenuItemType.values,
  'PlatformProvidedMenuItemType.zoomWindow':
      PlatformProvidedMenuItemType.zoomWindow,
  'PlatformRouteInformationProvider': (props) =>
      PlatformRouteInformationProvider(
          initialRouteInformation: props['initialRouteInformation']),
  'PlatformSelectableRegionContextMenu': (props) =>
      PlatformSelectableRegionContextMenu(
          child: props['child'], key: props['key']),
  'PlatformSelectableRegionContextMenu.attach': (props) =>
      PlatformSelectableRegionContextMenu.attach(props['pa'][0]),
  'PlatformSelectableRegionContextMenu.detach': (props) =>
      PlatformSelectableRegionContextMenu.detach(props['pa'][0]),
  'PlatformViewHitTestBehavior.opaque': PlatformViewHitTestBehavior.opaque,
  'PlatformViewHitTestBehavior.translucent':
      PlatformViewHitTestBehavior.translucent,
  'PlatformViewHitTestBehavior.transparent':
      PlatformViewHitTestBehavior.transparent,
  'PlatformViewHitTestBehavior.values': PlatformViewHitTestBehavior.values,
  'PlatformViewLayer': (props) =>
      PlatformViewLayer(rect: props['rect'], viewId: props['viewId']),
  'PlatformViewLink': (props) => PlatformViewLink(
      key: props['key'],
      surfaceFactory: props['surfaceFactory'],
      onCreatePlatformView: props['onCreatePlatformView'],
      viewType: props['viewType']),
  'PlatformViewRenderBox': (props) => PlatformViewRenderBox(
      controller: props['controller'],
      hitTestBehavior: props['hitTestBehavior'],
      gestureRecognizers: props['gestureRecognizers']),
  'PlatformViewSurface': (props) => PlatformViewSurface(
      key: props['key'],
      controller: props['controller'],
      hitTestBehavior: props['hitTestBehavior'],
      gestureRecognizers: props['gestureRecognizers']),
  'PlatformViewsService.initAndroidView': (props) =>
      PlatformViewsService.initAndroidView(
          id: props['id'],
          viewType: props['viewType'],
          layoutDirection: props['layoutDirection'],
          creationParams: props['creationParams'],
          creationParamsCodec: props['creationParamsCodec'],
          onFocus: props['onFocus']),
  'PlatformViewsService.initExpensiveAndroidView': (props) =>
      PlatformViewsService.initExpensiveAndroidView(
          id: props['id'],
          viewType: props['viewType'],
          layoutDirection: props['layoutDirection'],
          creationParams: props['creationParams'],
          creationParamsCodec: props['creationParamsCodec'],
          onFocus: props['onFocus']),
  'PlatformViewsService.initSurfaceAndroidView': (props) =>
      PlatformViewsService.initSurfaceAndroidView(
          id: props['id'],
          viewType: props['viewType'],
          layoutDirection: props['layoutDirection'],
          creationParams: props['creationParams'],
          creationParamsCodec: props['creationParamsCodec'],
          onFocus: props['onFocus']),
  'PlatformViewsService.initUiKitView': (props) =>
      PlatformViewsService.initUiKitView(
          id: props['id'],
          viewType: props['viewType'],
          layoutDirection: props['layoutDirection'],
          creationParams: props['creationParams'],
          creationParamsCodec: props['creationParamsCodec'],
          onFocus: props['onFocus']),
  'PointMode.lines': PointMode.lines,
  'PointMode.points': PointMode.points,
  'PointMode.polygon': PointMode.polygon,
  'PointMode.values': PointMode.values,
  'PointerAddedEvent': (props) => PointerAddedEvent(
      timeStamp: props['timeStamp'] ?? Duration.zero,
      pointer: props['pointer'] ?? 0,
      kind: props['kind'] ?? PointerDeviceKind.touch,
      device: props['device'] ?? 0,
      position: props['position'] ?? Offset.zero,
      obscured: props['obscured'] ?? false,
      pressureMin: props['pressureMin']?.toDouble() ?? 1.0,
      pressureMax: props['pressureMax']?.toDouble() ?? 1.0,
      distance: props['distance']?.toDouble() ?? 0.0,
      distanceMax: props['distanceMax']?.toDouble() ?? 0.0,
      radiusMin: props['radiusMin']?.toDouble() ?? 0.0,
      radiusMax: props['radiusMax']?.toDouble() ?? 0.0,
      orientation: props['orientation']?.toDouble() ?? 0.0,
      tilt: props['tilt']?.toDouble() ?? 0.0,
      embedderId: props['embedderId'] ?? 0),
  'PointerCancelEvent': (props) => PointerCancelEvent(
      timeStamp: props['timeStamp'] ?? Duration.zero,
      pointer: props['pointer'] ?? 0,
      kind: props['kind'] ?? PointerDeviceKind.touch,
      device: props['device'] ?? 0,
      position: props['position'] ?? Offset.zero,
      buttons: props['buttons'] ?? 0,
      obscured: props['obscured'] ?? false,
      pressureMin: props['pressureMin']?.toDouble() ?? 1.0,
      pressureMax: props['pressureMax']?.toDouble() ?? 1.0,
      distance: props['distance']?.toDouble() ?? 0.0,
      distanceMax: props['distanceMax']?.toDouble() ?? 0.0,
      size: props['size']?.toDouble() ?? 0.0,
      radiusMajor: props['radiusMajor']?.toDouble() ?? 0.0,
      radiusMinor: props['radiusMinor']?.toDouble() ?? 0.0,
      radiusMin: props['radiusMin']?.toDouble() ?? 0.0,
      radiusMax: props['radiusMax']?.toDouble() ?? 0.0,
      orientation: props['orientation']?.toDouble() ?? 0.0,
      tilt: props['tilt']?.toDouble() ?? 0.0,
      embedderId: props['embedderId'] ?? 0),
  'PointerChange.add': PointerChange.add,
  'PointerChange.cancel': PointerChange.cancel,
  'PointerChange.down': PointerChange.down,
  'PointerChange.hover': PointerChange.hover,
  'PointerChange.move': PointerChange.move,
  'PointerChange.panZoomEnd': PointerChange.panZoomEnd,
  'PointerChange.panZoomStart': PointerChange.panZoomStart,
  'PointerChange.panZoomUpdate': PointerChange.panZoomUpdate,
  'PointerChange.remove': PointerChange.remove,
  'PointerChange.up': PointerChange.up,
  'PointerChange.values': PointerChange.values,
  'PointerData': (props) => PointerData(
      embedderId: props['embedderId'] ?? 0,
      timeStamp: props['timeStamp'] ?? Duration.zero,
      change: props['change'] ?? PointerChange.cancel,
      kind: props['kind'] ?? PointerDeviceKind.touch,
      signalKind: props['signalKind'],
      device: props['device'] ?? 0,
      pointerIdentifier: props['pointerIdentifier'] ?? 0,
      physicalX: props['physicalX']?.toDouble() ?? 0.0,
      physicalY: props['physicalY']?.toDouble() ?? 0.0,
      physicalDeltaX: props['physicalDeltaX']?.toDouble() ?? 0.0,
      physicalDeltaY: props['physicalDeltaY']?.toDouble() ?? 0.0,
      buttons: props['buttons'] ?? 0,
      obscured: props['obscured'] ?? false,
      synthesized: props['synthesized'] ?? false,
      pressure: props['pressure']?.toDouble() ?? 0.0,
      pressureMin: props['pressureMin']?.toDouble() ?? 0.0,
      pressureMax: props['pressureMax']?.toDouble() ?? 0.0,
      distance: props['distance']?.toDouble() ?? 0.0,
      distanceMax: props['distanceMax']?.toDouble() ?? 0.0,
      size: props['size']?.toDouble() ?? 0.0,
      radiusMajor: props['radiusMajor']?.toDouble() ?? 0.0,
      radiusMinor: props['radiusMinor']?.toDouble() ?? 0.0,
      radiusMin: props['radiusMin']?.toDouble() ?? 0.0,
      radiusMax: props['radiusMax']?.toDouble() ?? 0.0,
      orientation: props['orientation']?.toDouble() ?? 0.0,
      tilt: props['tilt']?.toDouble() ?? 0.0,
      platformData: props['platformData'] ?? 0,
      scrollDeltaX: props['scrollDeltaX']?.toDouble() ?? 0.0,
      scrollDeltaY: props['scrollDeltaY']?.toDouble() ?? 0.0,
      panX: props['panX']?.toDouble() ?? 0.0,
      panY: props['panY']?.toDouble() ?? 0.0,
      panDeltaX: props['panDeltaX']?.toDouble() ?? 0.0,
      panDeltaY: props['panDeltaY']?.toDouble() ?? 0.0,
      scale: props['scale']?.toDouble() ?? 0.0,
      rotation: props['rotation']?.toDouble() ?? 0.0),
  'PointerDataPacket': (props) => PointerDataPacket(
      data: as<PointerData>(props['data']) ?? const <PointerData>[]),
  'PointerDeviceKind.invertedStylus': PointerDeviceKind.invertedStylus,
  'PointerDeviceKind.mouse': PointerDeviceKind.mouse,
  'PointerDeviceKind.stylus': PointerDeviceKind.stylus,
  'PointerDeviceKind.touch': PointerDeviceKind.touch,
  'PointerDeviceKind.trackpad': PointerDeviceKind.trackpad,
  'PointerDeviceKind.unknown': PointerDeviceKind.unknown,
  'PointerDeviceKind.values': PointerDeviceKind.values,
  'PointerDownEvent': (props) => PointerDownEvent(
      timeStamp: props['timeStamp'] ?? Duration.zero,
      pointer: props['pointer'] ?? 0,
      kind: props['kind'] ?? PointerDeviceKind.touch,
      device: props['device'] ?? 0,
      position: props['position'] ?? Offset.zero,
      buttons: props['buttons'] ?? kPrimaryButton,
      obscured: props['obscured'] ?? false,
      pressure: props['pressure']?.toDouble() ?? 1.0,
      pressureMin: props['pressureMin']?.toDouble() ?? 1.0,
      pressureMax: props['pressureMax']?.toDouble() ?? 1.0,
      distanceMax: props['distanceMax']?.toDouble() ?? 0.0,
      size: props['size']?.toDouble() ?? 0.0,
      radiusMajor: props['radiusMajor']?.toDouble() ?? 0.0,
      radiusMinor: props['radiusMinor']?.toDouble() ?? 0.0,
      radiusMin: props['radiusMin']?.toDouble() ?? 0.0,
      radiusMax: props['radiusMax']?.toDouble() ?? 0.0,
      orientation: props['orientation']?.toDouble() ?? 0.0,
      tilt: props['tilt']?.toDouble() ?? 0.0,
      embedderId: props['embedderId'] ?? 0),
  'PointerEnterEvent': (props) => PointerEnterEvent(
      timeStamp: props['timeStamp'] ?? Duration.zero,
      pointer: props['pointer'] ?? 0,
      kind: props['kind'] ?? PointerDeviceKind.touch,
      device: props['device'] ?? 0,
      position: props['position'] ?? Offset.zero,
      delta: props['delta'] ?? Offset.zero,
      buttons: props['buttons'] ?? 0,
      obscured: props['obscured'] ?? false,
      pressureMin: props['pressureMin']?.toDouble() ?? 1.0,
      pressureMax: props['pressureMax']?.toDouble() ?? 1.0,
      distance: props['distance']?.toDouble() ?? 0.0,
      distanceMax: props['distanceMax']?.toDouble() ?? 0.0,
      size: props['size']?.toDouble() ?? 0.0,
      radiusMajor: props['radiusMajor']?.toDouble() ?? 0.0,
      radiusMinor: props['radiusMinor']?.toDouble() ?? 0.0,
      radiusMin: props['radiusMin']?.toDouble() ?? 0.0,
      radiusMax: props['radiusMax']?.toDouble() ?? 0.0,
      orientation: props['orientation']?.toDouble() ?? 0.0,
      tilt: props['tilt']?.toDouble() ?? 0.0,
      down: props['down'] ?? false,
      synthesized: props['synthesized'] ?? false,
      embedderId: props['embedderId'] ?? 0),
  'PointerEnterEvent.fromMouseEvent': (props) =>
      PointerEnterEvent.fromMouseEvent(props['pa'][0]),
  'PointerEventResampler': (props) => PointerEventResampler(),
  'PointerExitEvent': (props) => PointerExitEvent(
      timeStamp: props['timeStamp'] ?? Duration.zero,
      kind: props['kind'] ?? PointerDeviceKind.touch,
      pointer: props['pointer'] ?? 0,
      device: props['device'] ?? 0,
      position: props['position'] ?? Offset.zero,
      delta: props['delta'] ?? Offset.zero,
      buttons: props['buttons'] ?? 0,
      obscured: props['obscured'] ?? false,
      pressureMin: props['pressureMin']?.toDouble() ?? 1.0,
      pressureMax: props['pressureMax']?.toDouble() ?? 1.0,
      distance: props['distance']?.toDouble() ?? 0.0,
      distanceMax: props['distanceMax']?.toDouble() ?? 0.0,
      size: props['size']?.toDouble() ?? 0.0,
      radiusMajor: props['radiusMajor']?.toDouble() ?? 0.0,
      radiusMinor: props['radiusMinor']?.toDouble() ?? 0.0,
      radiusMin: props['radiusMin']?.toDouble() ?? 0.0,
      radiusMax: props['radiusMax']?.toDouble() ?? 0.0,
      orientation: props['orientation']?.toDouble() ?? 0.0,
      tilt: props['tilt']?.toDouble() ?? 0.0,
      down: props['down'] ?? false,
      synthesized: props['synthesized'] ?? false,
      embedderId: props['embedderId'] ?? 0),
  'PointerExitEvent.fromMouseEvent': (props) =>
      PointerExitEvent.fromMouseEvent(props['pa'][0]),
  'PointerHoverEvent': (props) => PointerHoverEvent(
      timeStamp: props['timeStamp'] ?? Duration.zero,
      kind: props['kind'] ?? PointerDeviceKind.touch,
      pointer: props['pointer'] ?? 0,
      device: props['device'] ?? 0,
      position: props['position'] ?? Offset.zero,
      delta: props['delta'] ?? Offset.zero,
      buttons: props['buttons'] ?? 0,
      obscured: props['obscured'] ?? false,
      pressureMin: props['pressureMin']?.toDouble() ?? 1.0,
      pressureMax: props['pressureMax']?.toDouble() ?? 1.0,
      distance: props['distance']?.toDouble() ?? 0.0,
      distanceMax: props['distanceMax']?.toDouble() ?? 0.0,
      size: props['size']?.toDouble() ?? 0.0,
      radiusMajor: props['radiusMajor']?.toDouble() ?? 0.0,
      radiusMinor: props['radiusMinor']?.toDouble() ?? 0.0,
      radiusMin: props['radiusMin']?.toDouble() ?? 0.0,
      radiusMax: props['radiusMax']?.toDouble() ?? 0.0,
      orientation: props['orientation']?.toDouble() ?? 0.0,
      tilt: props['tilt']?.toDouble() ?? 0.0,
      synthesized: props['synthesized'] ?? false,
      embedderId: props['embedderId'] ?? 0),
  'PointerMoveEvent': (props) => PointerMoveEvent(
      timeStamp: props['timeStamp'] ?? Duration.zero,
      pointer: props['pointer'] ?? 0,
      kind: props['kind'] ?? PointerDeviceKind.touch,
      device: props['device'] ?? 0,
      position: props['position'] ?? Offset.zero,
      delta: props['delta'] ?? Offset.zero,
      buttons: props['buttons'] ?? kPrimaryButton,
      obscured: props['obscured'] ?? false,
      pressure: props['pressure']?.toDouble() ?? 1.0,
      pressureMin: props['pressureMin']?.toDouble() ?? 1.0,
      pressureMax: props['pressureMax']?.toDouble() ?? 1.0,
      distanceMax: props['distanceMax']?.toDouble() ?? 0.0,
      size: props['size']?.toDouble() ?? 0.0,
      radiusMajor: props['radiusMajor']?.toDouble() ?? 0.0,
      radiusMinor: props['radiusMinor']?.toDouble() ?? 0.0,
      radiusMin: props['radiusMin']?.toDouble() ?? 0.0,
      radiusMax: props['radiusMax']?.toDouble() ?? 0.0,
      orientation: props['orientation']?.toDouble() ?? 0.0,
      tilt: props['tilt']?.toDouble() ?? 0.0,
      platformData: props['platformData'] ?? 0,
      synthesized: props['synthesized'] ?? false,
      embedderId: props['embedderId'] ?? 0),
  'PointerPanZoomEndEvent': (props) => PointerPanZoomEndEvent(
      timeStamp: props['timeStamp'] ?? Duration.zero,
      device: props['device'] ?? 0,
      pointer: props['pointer'] ?? 0,
      position: props['position'] ?? Offset.zero,
      embedderId: props['embedderId'] ?? 0,
      synthesized: props['synthesized'] ?? false),
  'PointerPanZoomStartEvent': (props) => PointerPanZoomStartEvent(
      timeStamp: props['timeStamp'] ?? Duration.zero,
      device: props['device'] ?? 0,
      pointer: props['pointer'] ?? 0,
      position: props['position'] ?? Offset.zero,
      embedderId: props['embedderId'] ?? 0,
      synthesized: props['synthesized'] ?? false),
  'PointerPanZoomUpdateEvent': (props) => PointerPanZoomUpdateEvent(
      timeStamp: props['timeStamp'] ?? Duration.zero,
      device: props['device'] ?? 0,
      pointer: props['pointer'] ?? 0,
      position: props['position'] ?? Offset.zero,
      embedderId: props['embedderId'] ?? 0,
      pan: props['pan'] ?? Offset.zero,
      panDelta: props['panDelta'] ?? Offset.zero,
      scale: props['scale']?.toDouble() ?? 1.0,
      rotation: props['rotation']?.toDouble() ?? 0.0,
      synthesized: props['synthesized'] ?? false),
  'PointerRemovedEvent': (props) => PointerRemovedEvent(
      timeStamp: props['timeStamp'] ?? Duration.zero,
      pointer: props['pointer'] ?? 0,
      kind: props['kind'] ?? PointerDeviceKind.touch,
      device: props['device'] ?? 0,
      position: props['position'] ?? Offset.zero,
      obscured: props['obscured'] ?? false,
      pressureMin: props['pressureMin']?.toDouble() ?? 1.0,
      pressureMax: props['pressureMax']?.toDouble() ?? 1.0,
      distanceMax: props['distanceMax']?.toDouble() ?? 0.0,
      radiusMin: props['radiusMin']?.toDouble() ?? 0.0,
      radiusMax: props['radiusMax']?.toDouble() ?? 0.0,
      original: props['original'],
      embedderId: props['embedderId'] ?? 0),
  'PointerRouter': (props) => PointerRouter(),
  'PointerScaleEvent': (props) => PointerScaleEvent(
      timeStamp: props['timeStamp'] ?? Duration.zero,
      kind: props['kind'] ?? PointerDeviceKind.mouse,
      device: props['device'] ?? 0,
      position: props['position'] ?? Offset.zero,
      embedderId: props['embedderId'] ?? 0,
      scale: props['scale']?.toDouble() ?? 1.0),
  'PointerScrollEvent': (props) => PointerScrollEvent(
      timeStamp: props['timeStamp'] ?? Duration.zero,
      kind: props['kind'] ?? PointerDeviceKind.mouse,
      device: props['device'] ?? 0,
      position: props['position'] ?? Offset.zero,
      scrollDelta: props['scrollDelta'] ?? Offset.zero,
      embedderId: props['embedderId'] ?? 0),
  'PointerScrollInertiaCancelEvent': (props) => PointerScrollInertiaCancelEvent(
      timeStamp: props['timeStamp'] ?? Duration.zero,
      kind: props['kind'] ?? PointerDeviceKind.mouse,
      device: props['device'] ?? 0,
      position: props['position'] ?? Offset.zero,
      embedderId: props['embedderId'] ?? 0),
  'PointerSignalKind.none': PointerSignalKind.none,
  'PointerSignalKind.scale': PointerSignalKind.scale,
  'PointerSignalKind.scroll': PointerSignalKind.scroll,
  'PointerSignalKind.scrollInertiaCancel':
      PointerSignalKind.scrollInertiaCancel,
  'PointerSignalKind.unknown': PointerSignalKind.unknown,
  'PointerSignalKind.values': PointerSignalKind.values,
  'PointerSignalResolver': (props) => PointerSignalResolver(),
  'PointerUpEvent': (props) => PointerUpEvent(
      timeStamp: props['timeStamp'] ?? Duration.zero,
      pointer: props['pointer'] ?? 0,
      kind: props['kind'] ?? PointerDeviceKind.touch,
      device: props['device'] ?? 0,
      position: props['position'] ?? Offset.zero,
      buttons: props['buttons'] ?? 0,
      obscured: props['obscured'] ?? false,
      pressure: props['pressure']?.toDouble() ?? 0.0,
      pressureMin: props['pressureMin']?.toDouble() ?? 1.0,
      pressureMax: props['pressureMax']?.toDouble() ?? 1.0,
      distance: props['distance']?.toDouble() ?? 0.0,
      distanceMax: props['distanceMax']?.toDouble() ?? 0.0,
      size: props['size']?.toDouble() ?? 0.0,
      radiusMajor: props['radiusMajor']?.toDouble() ?? 0.0,
      radiusMinor: props['radiusMinor']?.toDouble() ?? 0.0,
      radiusMin: props['radiusMin']?.toDouble() ?? 0.0,
      radiusMax: props['radiusMax']?.toDouble() ?? 0.0,
      orientation: props['orientation']?.toDouble() ?? 0.0,
      tilt: props['tilt']?.toDouble() ?? 0.0,
      embedderId: props['embedderId'] ?? 0),
  'PolynomialFit': (props) => PolynomialFit(props['pa'][0]),
  'PopupMenuButton': (props) => PopupMenuButton(
      key: props['key'],
      itemBuilder: props['itemBuilder'],
      initialValue: props['initialValue'],
      onOpened: props['onOpened'],
      onSelected: props['onSelected'],
      onCanceled: props['onCanceled'],
      tooltip: props['tooltip'],
      elevation: props['elevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      padding: props['padding'] ?? const EdgeInsets.all(8.0),
      child: props['child'],
      splashRadius: props['splashRadius']?.toDouble(),
      icon: props['icon'],
      iconSize: props['iconSize']?.toDouble(),
      offset: props['offset'] ?? Offset.zero,
      enabled: props['enabled'] ?? true,
      shape: props['shape'],
      color: props['color'],
      enableFeedback: props['enableFeedback'],
      constraints: props['constraints'],
      position: props['position'],
      clipBehavior: props['clipBehavior'] ?? Clip.none),
  'PopupMenuDivider': (props) => PopupMenuDivider(
      key: props['key'],
      height: props['height']?.toDouble() ?? _kMenuDividerHeight),
  'PopupMenuItem': (props) => PopupMenuItem(
      key: props['key'],
      value: props['value'],
      onTap: props['onTap'],
      enabled: props['enabled'] ?? true,
      height: props['height']?.toDouble() ?? kMinInteractiveDimension,
      padding: props['padding'],
      textStyle: props['textStyle'],
      labelTextStyle: props['labelTextStyle'],
      mouseCursor: props['mouseCursor'],
      child: props['child']),
  'PopupMenuPosition.over': PopupMenuPosition.over,
  'PopupMenuPosition.under': PopupMenuPosition.under,
  'PopupMenuPosition.values': PopupMenuPosition.values,
  'PopupMenuTheme': (props) => PopupMenuTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'PopupMenuTheme.of': (props) => PopupMenuTheme.of(props['pa'][0]),
  'PopupMenuThemeData': (props) => PopupMenuThemeData(
      color: props['color'],
      shape: props['shape'],
      elevation: props['elevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      textStyle: props['textStyle'],
      labelTextStyle: props['labelTextStyle'],
      enableFeedback: props['enableFeedback'],
      mouseCursor: props['mouseCursor'],
      position: props['position']),
  'PopupMenuThemeData.lerp': (props) => PopupMenuThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'Positioned': (props) => Positioned(
      key: props['key'],
      left: props['left']?.toDouble(),
      top: props['top']?.toDouble(),
      right: props['right']?.toDouble(),
      bottom: props['bottom']?.toDouble(),
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      child: props['child']),
  'Positioned.directional': (props) => Positioned.directional(
      key: props['key'],
      textDirection: props['textDirection'],
      start: props['start']?.toDouble(),
      top: props['top']?.toDouble() ?? 0.0,
      end: props['end']?.toDouble(),
      bottom: props['bottom']?.toDouble() ?? 0.0,
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      child: props['child']),
  'Positioned.fill': (props) => Positioned.fill(
      key: props['key'],
      left: props['left']?.toDouble() ?? 0.0,
      top: props['top']?.toDouble() ?? 0.0,
      right: props['right']?.toDouble() ?? 0.0,
      bottom: props['bottom']?.toDouble() ?? 0.0,
      child: props['child']),
  'Positioned.fromRect': (props) => Positioned.fromRect(
      key: props['key'], rect: props['rect'], child: props['child']),
  'Positioned.fromRelativeRect': (props) => Positioned.fromRelativeRect(
      key: props['key'], rect: props['rect'], child: props['child']),
  'PositionedDirectional': (props) => PositionedDirectional(
      key: props['key'],
      start: props['start']?.toDouble(),
      top: props['top']?.toDouble(),
      end: props['end']?.toDouble(),
      bottom: props['bottom']?.toDouble(),
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      child: props['child']),
  'PositionedTransition': (props) => PositionedTransition(
      key: props['key'], rect: props['rect'], child: props['child']),
  'PreferredSize': (props) => PreferredSize(
      key: props['key'],
      child: props['child'],
      preferredSize: props['preferredSize']),
  'PreviousFocusAction': (props) => PreviousFocusAction(),
  'PreviousFocusIntent': (props) => const PreviousFocusIntent(),
  'PrimaryScrollController': (props) => PrimaryScrollController(
      key: props['key'],
      controller: props['controller'],
      automaticallyInheritForPlatforms:
          props['automaticallyInheritForPlatforms'] ?? _kMobilePlatforms,
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      child: props['child']),
  'PrimaryScrollController.maybeOf': (props) =>
      PrimaryScrollController.maybeOf(props['pa'][0]),
  'PrimaryScrollController.none': (props) =>
      PrimaryScrollController.none(key: props['key'], child: props['child']),
  'PrimaryScrollController.of': (props) =>
      PrimaryScrollController.of(props['pa'][0]),
  'PrimaryScrollController.shouldInherit': (props) =>
      PrimaryScrollController.shouldInherit(props['pa'][0], props['pa'][1]),
  'PrioritizedAction': (props) => PrioritizedAction(),
  'PrioritizedIntents': (props) => PrioritizedIntents(
      orderedIntents: as<Intent>(props['orderedIntents']) ?? const []),
  'Priority.animation': Priority.animation,
  'Priority.idle': Priority.idle,
  'Priority.kMaxOffset': Priority.kMaxOffset,
  'Priority.touch': Priority.touch,
  'ProgressIndicatorTheme': (props) => ProgressIndicatorTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'ProgressIndicatorTheme.of': (props) =>
      ProgressIndicatorTheme.of(props['pa'][0]),
  'ProgressIndicatorThemeData': (props) => ProgressIndicatorThemeData(
      color: props['color'],
      linearTrackColor: props['linearTrackColor'],
      linearMinHeight: props['linearMinHeight']?.toDouble(),
      circularTrackColor: props['circularTrackColor'],
      refreshBackgroundColor: props['refreshBackgroundColor']),
  'ProgressIndicatorThemeData.lerp': (props) => ProgressIndicatorThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'ProxyAnimation': (props) =>
      ProxyAnimation((props['pa'].length > 0 ? props['pa'][0] : null)),
  'RRect.fromLTRBAndCorners': (props) => RRect.fromLTRBAndCorners(
      props['pa'][0]?.toDouble(),
      props['pa'][1]?.toDouble(),
      props['pa'][2]?.toDouble(),
      props['pa'][3]?.toDouble(),
      topLeft: props['topLeft'] ?? Radius.zero,
      topRight: props['topRight'] ?? Radius.zero,
      bottomRight: props['bottomRight'] ?? Radius.zero,
      bottomLeft: props['bottomLeft'] ?? Radius.zero),
  'RRect.fromLTRBR': (props) => RRect.fromLTRBR(
      props['pa'][0]?.toDouble(),
      props['pa'][1]?.toDouble(),
      props['pa'][2]?.toDouble(),
      props['pa'][3]?.toDouble(),
      props['pa'][4]),
  'RRect.fromLTRBXY': (props) => RRect.fromLTRBXY(
      props['pa'][0]?.toDouble(),
      props['pa'][1]?.toDouble(),
      props['pa'][2]?.toDouble(),
      props['pa'][3]?.toDouble(),
      props['pa'][4]?.toDouble(),
      props['pa'][5]?.toDouble()),
  'RRect.fromRectAndCorners': (props) => RRect.fromRectAndCorners(
      props['pa'][0],
      topLeft: props['topLeft'] ?? Radius.zero,
      topRight: props['topRight'] ?? Radius.zero,
      bottomRight: props['bottomRight'] ?? Radius.zero,
      bottomLeft: props['bottomLeft'] ?? Radius.zero),
  'RRect.fromRectAndRadius': (props) =>
      RRect.fromRectAndRadius(props['pa'][0], props['pa'][1]),
  'RRect.fromRectXY': (props) => RRect.fromRectXY(
      props['pa'][0], props['pa'][1]?.toDouble(), props['pa'][2]?.toDouble()),
  'RRect.lerp': (props) =>
      RRect.lerp(props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'RRect.zero': RRect.zero,
  'RSTransform': (props) => RSTransform(
      props['pa'][0]?.toDouble(),
      props['pa'][1]?.toDouble(),
      props['pa'][2]?.toDouble(),
      props['pa'][3]?.toDouble()),
  'RSTransform.fromComponents': (props) => RSTransform.fromComponents(
      rotation: props['rotation']?.toDouble() ?? 0,
      scale: props['scale']?.toDouble() ?? 0,
      anchorX: props['anchorX']?.toDouble() ?? 0,
      anchorY: props['anchorY']?.toDouble() ?? 0,
      translateX: props['translateX']?.toDouble() ?? 0,
      translateY: props['translateY']?.toDouble() ?? 0),
  'RadialGradient': (props) => RadialGradient(
      center: props['center'] ?? Alignment.center,
      radius: props['radius']?.toDouble() ?? 0.5,
      colors: as<Color>(props['colors']) ?? const [],
      stops: as<double>(props['stops']),
      tileMode: props['tileMode'] ?? TileMode.clamp,
      focal: props['focal'],
      focalRadius: props['focalRadius']?.toDouble() ?? 0.0,
      transform: props['transform']),
  'RadialGradient.lerp': (props) => RadialGradient.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'Radio': (props) => Radio(
      key: props['key'],
      value: props['value'],
      groupValue: props['groupValue'],
      onChanged: props['onChanged'],
      mouseCursor: props['mouseCursor'],
      toggleable: props['toggleable'] ?? false,
      activeColor: props['activeColor'],
      fillColor: props['fillColor'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      overlayColor: props['overlayColor'],
      splashRadius: props['splashRadius']?.toDouble(),
      materialTapTargetSize: props['materialTapTargetSize'],
      visualDensity: props['visualDensity'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false),
  'Radio.adaptive': (props) => Radio.adaptive(
      key: props['key'],
      value: props['value'],
      groupValue: props['groupValue'],
      onChanged: props['onChanged'],
      mouseCursor: props['mouseCursor'],
      toggleable: props['toggleable'] ?? false,
      activeColor: props['activeColor'],
      fillColor: props['fillColor'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      overlayColor: props['overlayColor'],
      splashRadius: props['splashRadius']?.toDouble(),
      materialTapTargetSize: props['materialTapTargetSize'],
      visualDensity: props['visualDensity'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      useCupertinoCheckmarkStyle: props['useCupertinoCheckmarkStyle'] ?? false),
  'RadioListTile': (props) => RadioListTile(
      key: props['key'],
      value: props['value'],
      groupValue: props['groupValue'],
      onChanged: props['onChanged'],
      mouseCursor: props['mouseCursor'],
      toggleable: props['toggleable'] ?? false,
      activeColor: props['activeColor'],
      fillColor: props['fillColor'],
      hoverColor: props['hoverColor'],
      overlayColor: props['overlayColor'],
      splashRadius: props['splashRadius']?.toDouble(),
      materialTapTargetSize: props['materialTapTargetSize'],
      title: props['title'],
      subtitle: props['subtitle'],
      isThreeLine: props['isThreeLine'] ?? false,
      dense: props['dense'],
      secondary: props['secondary'],
      selected: props['selected'] ?? false,
      controlAffinity:
          props['controlAffinity'] ?? ListTileControlAffinity.platform,
      autofocus: props['autofocus'] ?? false,
      contentPadding: props['contentPadding'],
      shape: props['shape'],
      tileColor: props['tileColor'],
      selectedTileColor: props['selectedTileColor'],
      visualDensity: props['visualDensity'],
      focusNode: props['focusNode'],
      onFocusChange: props['onFocusChange'],
      enableFeedback: props['enableFeedback']),
  'RadioListTile.adaptive': (props) => RadioListTile.adaptive(
      key: props['key'],
      value: props['value'],
      groupValue: props['groupValue'],
      onChanged: props['onChanged'],
      mouseCursor: props['mouseCursor'],
      toggleable: props['toggleable'] ?? false,
      activeColor: props['activeColor'],
      fillColor: props['fillColor'],
      hoverColor: props['hoverColor'],
      overlayColor: props['overlayColor'],
      splashRadius: props['splashRadius']?.toDouble(),
      materialTapTargetSize: props['materialTapTargetSize'],
      title: props['title'],
      subtitle: props['subtitle'],
      isThreeLine: props['isThreeLine'] ?? false,
      dense: props['dense'],
      secondary: props['secondary'],
      selected: props['selected'] ?? false,
      controlAffinity:
          props['controlAffinity'] ?? ListTileControlAffinity.platform,
      autofocus: props['autofocus'] ?? false,
      contentPadding: props['contentPadding'],
      shape: props['shape'],
      tileColor: props['tileColor'],
      selectedTileColor: props['selectedTileColor'],
      visualDensity: props['visualDensity'],
      focusNode: props['focusNode'],
      onFocusChange: props['onFocusChange'],
      enableFeedback: props['enableFeedback'],
      useCupertinoCheckmarkStyle: props['useCupertinoCheckmarkStyle'] ?? false),
  'RadioMenuButton': (props) => RadioMenuButton(
      key: props['key'],
      value: props['value'],
      groupValue: props['groupValue'],
      onChanged: props['onChanged'],
      toggleable: props['toggleable'] ?? false,
      onHover: props['onHover'],
      onFocusChange: props['onFocusChange'],
      focusNode: props['focusNode'],
      shortcut: props['shortcut'],
      style: props['style'],
      statesController: props['statesController'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      trailingIcon: props['trailingIcon'],
      closeOnActivate: props['closeOnActivate'] ?? true,
      child: props['child']),
  'RadioTheme': (props) =>
      RadioTheme(key: props['key'], data: props['data'], child: props['child']),
  'RadioTheme.of': (props) => RadioTheme.of(props['pa'][0]),
  'RadioThemeData': (props) => RadioThemeData(
      mouseCursor: props['mouseCursor'],
      fillColor: props['fillColor'],
      overlayColor: props['overlayColor'],
      splashRadius: props['splashRadius']?.toDouble(),
      materialTapTargetSize: props['materialTapTargetSize'],
      visualDensity: props['visualDensity']),
  'RadioThemeData.lerp': (props) => RadioThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'Radius.circular': (props) => Radius.circular(props['pa'][0]?.toDouble()),
  'Radius.elliptical': (props) =>
      Radius.elliptical(props['pa'][0]?.toDouble(), props['pa'][1]?.toDouble()),
  'Radius.lerp': (props) =>
      Radius.lerp(props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'Radius.zero': Radius.zero,
  'RangeLabels': (props) => RangeLabels(props['pa'][0], props['pa'][1]),
  'RangeMaintainingScrollPhysics': (props) =>
      RangeMaintainingScrollPhysics(parent: props['parent']),
  'RangeSlider': (props) => RangeSlider(
      key: props['key'],
      values: props['values'],
      onChanged: props['onChanged'],
      onChangeStart: props['onChangeStart'],
      onChangeEnd: props['onChangeEnd'],
      min: props['min']?.toDouble() ?? 0.0,
      max: props['max']?.toDouble() ?? 1.0,
      divisions: props['divisions'],
      labels: props['labels'],
      activeColor: props['activeColor'],
      inactiveColor: props['inactiveColor'],
      overlayColor: props['overlayColor'],
      mouseCursor: props['mouseCursor'],
      semanticFormatterCallback: props['semanticFormatterCallback']),
  'RangeValues': (props) =>
      RangeValues(props['pa'][0]?.toDouble(), props['pa'][1]?.toDouble()),
  'RawAutocomplete': (props) => RawAutocomplete(
      key: props['key'],
      optionsViewBuilder: props['optionsViewBuilder'],
      optionsBuilder: props['optionsBuilder'],
      displayStringForOption:
          props['displayStringForOption'] ?? defaultStringForOption,
      fieldViewBuilder: props['fieldViewBuilder'],
      focusNode: props['focusNode'],
      onSelected: props['onSelected'],
      textEditingController: props['textEditingController'],
      initialValue: props['initialValue']),
  'RawAutocomplete.defaultStringForOption': (props) =>
      RawAutocomplete.defaultStringForOption(props['pa'][0]),
  'RawAutocomplete.onFieldSubmitted': (props) =>
      RawAutocomplete.onFieldSubmitted(props['pa'][0]),
  'RawChip': (props) => RawChip(
      key: props['key'],
      defaultProperties: props['defaultProperties'],
      avatar: props['avatar'],
      label: props['label'],
      labelStyle: props['labelStyle'],
      padding: props['padding'],
      visualDensity: props['visualDensity'],
      labelPadding: props['labelPadding'],
      deleteIcon: props['deleteIcon'],
      onDeleted: props['onDeleted'],
      deleteIconColor: props['deleteIconColor'],
      deleteButtonTooltipMessage: props['deleteButtonTooltipMessage'],
      onPressed: props['onPressed'],
      onSelected: props['onSelected'],
      pressElevation: props['pressElevation']?.toDouble(),
      tapEnabled: props['tapEnabled'] ?? true,
      selected: props['selected'] ?? false,
      isEnabled: props['isEnabled'] ?? true,
      disabledColor: props['disabledColor'],
      selectedColor: props['selectedColor'],
      tooltip: props['tooltip'],
      side: props['side'],
      shape: props['shape'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      backgroundColor: props['backgroundColor'],
      materialTapTargetSize: props['materialTapTargetSize'],
      elevation: props['elevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      iconTheme: props['iconTheme'],
      selectedShadowColor: props['selectedShadowColor'],
      showCheckmark: props['showCheckmark'] ?? true,
      checkmarkColor: props['checkmarkColor'],
      avatarBorder: props['avatarBorder'] ?? const CircleBorder(),
      useDeleteButtonTooltip: props['useDeleteButtonTooltip'] ?? true),
  'RawDialogRoute': (props) => RawDialogRoute(
      pageBuilder: props['pageBuilder'],
      barrierDismissible: props['barrierDismissible'] ?? true,
      barrierColor: props['barrierColor'] ?? const Color(0x80000000),
      barrierLabel: props['barrierLabel'],
      transitionDuration:
          props['transitionDuration'] ?? const Duration(milliseconds: 200),
      transitionBuilder: props['transitionBuilder'],
      settings: props['settings'],
      anchorPoint: props['anchorPoint'],
      traversalEdgeBehavior: props['traversalEdgeBehavior']),
  'RawFloatingCursorPoint': (props) =>
      RawFloatingCursorPoint(offset: props['offset'], state: props['state']),
  'RawGestureDetector': (props) => RawGestureDetector(
      key: props['key'],
      child: props['child'],
      gestures: props['gestures'] ?? const <Type, GestureRecognizerFactory>{},
      behavior: props['behavior'],
      excludeFromSemantics: props['excludeFromSemantics'] ?? false,
      semantics: props['semantics']),
  'RawImage': (props) => RawImage(
      key: props['key'],
      image: props['image'],
      debugImageLabel: props['debugImageLabel'],
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      scale: props['scale']?.toDouble() ?? 1.0,
      color: props['color'],
      opacity: props['opacity'],
      colorBlendMode: props['colorBlendMode'],
      fit: props['fit'],
      alignment: props['alignment'] ?? Alignment.center,
      repeat: props['repeat'] ?? ImageRepeat.noRepeat,
      centerSlice: props['centerSlice'],
      matchTextDirection: props['matchTextDirection'] ?? false,
      invertColors: props['invertColors'] ?? false,
      filterQuality: props['filterQuality'] ?? FilterQuality.low,
      isAntiAlias: props['isAntiAlias'] ?? false),
  'RawKeyDownEvent': (props) => RawKeyDownEvent(
      data: props['data'],
      character: props['character'],
      repeat: props['repeat'] ?? false),
  'RawKeyEventDataAndroid': (props) => RawKeyEventDataAndroid(
      flags: props['flags'] ?? 0,
      codePoint: props['codePoint'] ?? 0,
      plainCodePoint: props['plainCodePoint'] ?? 0,
      keyCode: props['keyCode'] ?? 0,
      scanCode: props['scanCode'] ?? 0,
      metaState: props['metaState'] ?? 0,
      eventSource: props['eventSource'] ?? 0,
      vendorId: props['vendorId'] ?? 0,
      productId: props['productId'] ?? 0,
      deviceId: props['deviceId'] ?? 0,
      repeatCount: props['repeatCount'] ?? 0),
  'RawKeyEventDataAndroid.modifierAlt': RawKeyEventDataAndroid.modifierAlt,
  'RawKeyEventDataAndroid.modifierCapsLock':
      RawKeyEventDataAndroid.modifierCapsLock,
  'RawKeyEventDataAndroid.modifierControl':
      RawKeyEventDataAndroid.modifierControl,
  'RawKeyEventDataAndroid.modifierFunction':
      RawKeyEventDataAndroid.modifierFunction,
  'RawKeyEventDataAndroid.modifierLeftAlt':
      RawKeyEventDataAndroid.modifierLeftAlt,
  'RawKeyEventDataAndroid.modifierLeftControl':
      RawKeyEventDataAndroid.modifierLeftControl,
  'RawKeyEventDataAndroid.modifierLeftMeta':
      RawKeyEventDataAndroid.modifierLeftMeta,
  'RawKeyEventDataAndroid.modifierLeftShift':
      RawKeyEventDataAndroid.modifierLeftShift,
  'RawKeyEventDataAndroid.modifierMeta': RawKeyEventDataAndroid.modifierMeta,
  'RawKeyEventDataAndroid.modifierNone': RawKeyEventDataAndroid.modifierNone,
  'RawKeyEventDataAndroid.modifierNumLock':
      RawKeyEventDataAndroid.modifierNumLock,
  'RawKeyEventDataAndroid.modifierRightAlt':
      RawKeyEventDataAndroid.modifierRightAlt,
  'RawKeyEventDataAndroid.modifierRightControl':
      RawKeyEventDataAndroid.modifierRightControl,
  'RawKeyEventDataAndroid.modifierRightMeta':
      RawKeyEventDataAndroid.modifierRightMeta,
  'RawKeyEventDataAndroid.modifierRightShift':
      RawKeyEventDataAndroid.modifierRightShift,
  'RawKeyEventDataAndroid.modifierScrollLock':
      RawKeyEventDataAndroid.modifierScrollLock,
  'RawKeyEventDataAndroid.modifierShift': RawKeyEventDataAndroid.modifierShift,
  'RawKeyEventDataAndroid.modifierSym': RawKeyEventDataAndroid.modifierSym,
  'RawKeyEventDataFuchsia': (props) => RawKeyEventDataFuchsia(
      hidUsage: props['hidUsage'] ?? 0,
      codePoint: props['codePoint'] ?? 0,
      modifiers: props['modifiers'] ?? 0),
  'RawKeyEventDataFuchsia.modifierAlt': RawKeyEventDataFuchsia.modifierAlt,
  'RawKeyEventDataFuchsia.modifierCapsLock':
      RawKeyEventDataFuchsia.modifierCapsLock,
  'RawKeyEventDataFuchsia.modifierControl':
      RawKeyEventDataFuchsia.modifierControl,
  'RawKeyEventDataFuchsia.modifierLeftAlt':
      RawKeyEventDataFuchsia.modifierLeftAlt,
  'RawKeyEventDataFuchsia.modifierLeftControl':
      RawKeyEventDataFuchsia.modifierLeftControl,
  'RawKeyEventDataFuchsia.modifierLeftMeta':
      RawKeyEventDataFuchsia.modifierLeftMeta,
  'RawKeyEventDataFuchsia.modifierLeftShift':
      RawKeyEventDataFuchsia.modifierLeftShift,
  'RawKeyEventDataFuchsia.modifierMeta': RawKeyEventDataFuchsia.modifierMeta,
  'RawKeyEventDataFuchsia.modifierNone': RawKeyEventDataFuchsia.modifierNone,
  'RawKeyEventDataFuchsia.modifierRightAlt':
      RawKeyEventDataFuchsia.modifierRightAlt,
  'RawKeyEventDataFuchsia.modifierRightControl':
      RawKeyEventDataFuchsia.modifierRightControl,
  'RawKeyEventDataFuchsia.modifierRightMeta':
      RawKeyEventDataFuchsia.modifierRightMeta,
  'RawKeyEventDataFuchsia.modifierRightShift':
      RawKeyEventDataFuchsia.modifierRightShift,
  'RawKeyEventDataFuchsia.modifierShift': RawKeyEventDataFuchsia.modifierShift,
  'RawKeyEventDataIos': (props) => RawKeyEventDataIos(
      characters: props['characters'] ?? '',
      charactersIgnoringModifiers: props['charactersIgnoringModifiers'] ?? '',
      keyCode: props['keyCode'] ?? 0,
      modifiers: props['modifiers'] ?? 0),
  'RawKeyEventDataIos.deviceIndependentMask':
      RawKeyEventDataIos.deviceIndependentMask,
  'RawKeyEventDataIos.modifierCapsLock': RawKeyEventDataIos.modifierCapsLock,
  'RawKeyEventDataIos.modifierCommand': RawKeyEventDataIos.modifierCommand,
  'RawKeyEventDataIos.modifierControl': RawKeyEventDataIos.modifierControl,
  'RawKeyEventDataIos.modifierFunction': RawKeyEventDataIos.modifierFunction,
  'RawKeyEventDataIos.modifierHelp': RawKeyEventDataIos.modifierHelp,
  'RawKeyEventDataIos.modifierLeftCommand':
      RawKeyEventDataIos.modifierLeftCommand,
  'RawKeyEventDataIos.modifierLeftControl':
      RawKeyEventDataIos.modifierLeftControl,
  'RawKeyEventDataIos.modifierLeftOption':
      RawKeyEventDataIos.modifierLeftOption,
  'RawKeyEventDataIos.modifierLeftShift': RawKeyEventDataIos.modifierLeftShift,
  'RawKeyEventDataIos.modifierNumericPad':
      RawKeyEventDataIos.modifierNumericPad,
  'RawKeyEventDataIos.modifierOption': RawKeyEventDataIos.modifierOption,
  'RawKeyEventDataIos.modifierRightCommand':
      RawKeyEventDataIos.modifierRightCommand,
  'RawKeyEventDataIos.modifierRightControl':
      RawKeyEventDataIos.modifierRightControl,
  'RawKeyEventDataIos.modifierRightOption':
      RawKeyEventDataIos.modifierRightOption,
  'RawKeyEventDataIos.modifierRightShift':
      RawKeyEventDataIos.modifierRightShift,
  'RawKeyEventDataIos.modifierShift': RawKeyEventDataIos.modifierShift,
  'RawKeyEventDataLinux': (props) => RawKeyEventDataLinux(
      keyHelper: props['keyHelper'],
      unicodeScalarValues: props['unicodeScalarValues'] ?? 0,
      scanCode: props['scanCode'] ?? 0,
      keyCode: props['keyCode'] ?? 0,
      modifiers: props['modifiers'] ?? 0,
      isDown: props['isDown'],
      specifiedLogicalKey: props['specifiedLogicalKey']),
  'RawKeyEventDataMacOs': (props) => RawKeyEventDataMacOs(
      characters: props['characters'] ?? '',
      charactersIgnoringModifiers: props['charactersIgnoringModifiers'] ?? '',
      keyCode: props['keyCode'] ?? 0,
      modifiers: props['modifiers'] ?? 0,
      specifiedLogicalKey: props['specifiedLogicalKey']),
  'RawKeyEventDataMacOs.deviceIndependentMask':
      RawKeyEventDataMacOs.deviceIndependentMask,
  'RawKeyEventDataMacOs.modifierCapsLock':
      RawKeyEventDataMacOs.modifierCapsLock,
  'RawKeyEventDataMacOs.modifierCommand': RawKeyEventDataMacOs.modifierCommand,
  'RawKeyEventDataMacOs.modifierControl': RawKeyEventDataMacOs.modifierControl,
  'RawKeyEventDataMacOs.modifierFunction':
      RawKeyEventDataMacOs.modifierFunction,
  'RawKeyEventDataMacOs.modifierHelp': RawKeyEventDataMacOs.modifierHelp,
  'RawKeyEventDataMacOs.modifierLeftCommand':
      RawKeyEventDataMacOs.modifierLeftCommand,
  'RawKeyEventDataMacOs.modifierLeftControl':
      RawKeyEventDataMacOs.modifierLeftControl,
  'RawKeyEventDataMacOs.modifierLeftOption':
      RawKeyEventDataMacOs.modifierLeftOption,
  'RawKeyEventDataMacOs.modifierLeftShift':
      RawKeyEventDataMacOs.modifierLeftShift,
  'RawKeyEventDataMacOs.modifierNumericPad':
      RawKeyEventDataMacOs.modifierNumericPad,
  'RawKeyEventDataMacOs.modifierOption': RawKeyEventDataMacOs.modifierOption,
  'RawKeyEventDataMacOs.modifierRightCommand':
      RawKeyEventDataMacOs.modifierRightCommand,
  'RawKeyEventDataMacOs.modifierRightControl':
      RawKeyEventDataMacOs.modifierRightControl,
  'RawKeyEventDataMacOs.modifierRightOption':
      RawKeyEventDataMacOs.modifierRightOption,
  'RawKeyEventDataMacOs.modifierRightShift':
      RawKeyEventDataMacOs.modifierRightShift,
  'RawKeyEventDataMacOs.modifierShift': RawKeyEventDataMacOs.modifierShift,
  'RawKeyEventDataWeb': (props) => RawKeyEventDataWeb(
      code: props['code'],
      key: props['key'],
      location: props['location'] ?? 0,
      metaState: props['metaState'] ?? modifierNone,
      keyCode: props['keyCode'] ?? 0),
  'RawKeyEventDataWeb.modifierAlt': RawKeyEventDataWeb.modifierAlt,
  'RawKeyEventDataWeb.modifierCapsLock': RawKeyEventDataWeb.modifierCapsLock,
  'RawKeyEventDataWeb.modifierControl': RawKeyEventDataWeb.modifierControl,
  'RawKeyEventDataWeb.modifierMeta': RawKeyEventDataWeb.modifierMeta,
  'RawKeyEventDataWeb.modifierNone': RawKeyEventDataWeb.modifierNone,
  'RawKeyEventDataWeb.modifierNumLock': RawKeyEventDataWeb.modifierNumLock,
  'RawKeyEventDataWeb.modifierScrollLock':
      RawKeyEventDataWeb.modifierScrollLock,
  'RawKeyEventDataWeb.modifierShift': RawKeyEventDataWeb.modifierShift,
  'RawKeyEventDataWindows': (props) => RawKeyEventDataWindows(
      keyCode: props['keyCode'] ?? 0,
      scanCode: props['scanCode'] ?? 0,
      characterCodePoint: props['characterCodePoint'] ?? 0,
      modifiers: props['modifiers'] ?? 0),
  'RawKeyEventDataWindows.modifierAlt': RawKeyEventDataWindows.modifierAlt,
  'RawKeyEventDataWindows.modifierCaps': RawKeyEventDataWindows.modifierCaps,
  'RawKeyEventDataWindows.modifierControl':
      RawKeyEventDataWindows.modifierControl,
  'RawKeyEventDataWindows.modifierLeftAlt':
      RawKeyEventDataWindows.modifierLeftAlt,
  'RawKeyEventDataWindows.modifierLeftControl':
      RawKeyEventDataWindows.modifierLeftControl,
  'RawKeyEventDataWindows.modifierLeftMeta':
      RawKeyEventDataWindows.modifierLeftMeta,
  'RawKeyEventDataWindows.modifierLeftShift':
      RawKeyEventDataWindows.modifierLeftShift,
  'RawKeyEventDataWindows.modifierNumLock':
      RawKeyEventDataWindows.modifierNumLock,
  'RawKeyEventDataWindows.modifierRightAlt':
      RawKeyEventDataWindows.modifierRightAlt,
  'RawKeyEventDataWindows.modifierRightControl':
      RawKeyEventDataWindows.modifierRightControl,
  'RawKeyEventDataWindows.modifierRightMeta':
      RawKeyEventDataWindows.modifierRightMeta,
  'RawKeyEventDataWindows.modifierRightShift':
      RawKeyEventDataWindows.modifierRightShift,
  'RawKeyEventDataWindows.modifierScrollLock':
      RawKeyEventDataWindows.modifierScrollLock,
  'RawKeyEventDataWindows.modifierShift': RawKeyEventDataWindows.modifierShift,
  'RawKeyUpEvent': (props) =>
      RawKeyUpEvent(data: props['data'], character: props['character']),
  'RawKeyboard.instance': RawKeyboard.instance,
  'RawKeyboardListener': (props) => RawKeyboardListener(
      key: props['key'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      includeSemantics: props['includeSemantics'] ?? true,
      onKey: props['onKey'],
      child: props['child']),
  'RawMagnifier': (props) => RawMagnifier(
      key: props['key'],
      child: props['child'],
      decoration: props['decoration'] ?? const MagnifierDecoration(),
      focalPointOffset: props['focalPointOffset'] ?? Offset.zero,
      magnificationScale: props['magnificationScale']?.toDouble() ?? 1,
      size: props['size']),
  'RawMaterialButton': (props) => RawMaterialButton(
      key: props['key'],
      onPressed: props['onPressed'],
      onLongPress: props['onLongPress'],
      onHighlightChanged: props['onHighlightChanged'],
      mouseCursor: props['mouseCursor'],
      textStyle: props['textStyle'],
      fillColor: props['fillColor'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      highlightColor: props['highlightColor'],
      splashColor: props['splashColor'],
      elevation: props['elevation']?.toDouble() ?? 2.0,
      focusElevation: props['focusElevation']?.toDouble() ?? 4.0,
      hoverElevation: props['hoverElevation']?.toDouble() ?? 4.0,
      highlightElevation: props['highlightElevation']?.toDouble() ?? 8.0,
      disabledElevation: props['disabledElevation']?.toDouble() ?? 0.0,
      padding: props['padding'] ?? EdgeInsets.zero,
      visualDensity: props['visualDensity'] ?? VisualDensity.standard,
      constraints: props['constraints'] ??
          const BoxConstraints(minWidth: 88.0, minHeight: 36.0),
      shape: props['shape'] ?? const RoundedRectangleBorder(),
      animationDuration: props['animationDuration'] ?? kThemeChangeDuration,
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      materialTapTargetSize: props['materialTapTargetSize'],
      child: props['child'],
      enableFeedback: props['enableFeedback'] ?? true),
  'RawScrollbar': (props) => RawScrollbar(
      key: props['key'],
      child: props['child'],
      controller: props['controller'],
      thumbVisibility: props['thumbVisibility'],
      shape: props['shape'],
      radius: props['radius'],
      thickness: props['thickness']?.toDouble(),
      thumbColor: props['thumbColor'],
      minThumbLength: props['minThumbLength']?.toDouble() ?? _kMinThumbExtent,
      minOverscrollLength: props['minOverscrollLength']?.toDouble(),
      trackVisibility: props['trackVisibility'],
      trackRadius: props['trackRadius'],
      trackColor: props['trackColor'],
      trackBorderColor: props['trackBorderColor'],
      fadeDuration: props['fadeDuration'] ?? _kScrollbarFadeDuration,
      timeToFade: props['timeToFade'] ?? _kScrollbarTimeToFade,
      pressDuration: props['pressDuration'] ?? Duration.zero,
      notificationPredicate:
          props['notificationPredicate'] ?? defaultScrollNotificationPredicate,
      interactive: props['interactive'],
      scrollbarOrientation: props['scrollbarOrientation'],
      mainAxisMargin: props['mainAxisMargin']?.toDouble() ?? 0.0,
      crossAxisMargin: props['crossAxisMargin']?.toDouble() ?? 0.0,
      padding: props['padding'],
      isAlwaysShown: props['isAlwaysShown']),
  'ReadBuffer': (props) => ReadBuffer(props['pa'][0]),
  'ReadingOrderTraversalPolicy': (props) => ReadingOrderTraversalPolicy(
      requestFocusCallback: props['requestFocusCallback']),
  'Rect.fromCenter': (props) => Rect.fromCenter(
      center: props['center'],
      width: props['width']?.toDouble() ?? 0,
      height: props['height']?.toDouble() ?? 0),
  'Rect.fromCircle': (props) => Rect.fromCircle(
      center: props['center'], radius: props['radius']?.toDouble() ?? 0),
  'Rect.fromLTRB': (props) => Rect.fromLTRB(
      props['pa'][0]?.toDouble(),
      props['pa'][1]?.toDouble(),
      props['pa'][2]?.toDouble(),
      props['pa'][3]?.toDouble()),
  'Rect.fromLTWH': (props) => Rect.fromLTWH(
      props['pa'][0]?.toDouble(),
      props['pa'][1]?.toDouble(),
      props['pa'][2]?.toDouble(),
      props['pa'][3]?.toDouble()),
  'Rect.fromPoints': (props) => Rect.fromPoints(props['pa'][0], props['pa'][1]),
  'Rect.largest': Rect.largest,
  'Rect.lerp': (props) =>
      Rect.lerp(props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'Rect.zero': Rect.zero,
  'RectTween': (props) => RectTween(begin: props['begin'], end: props['end']),
  'RectangularRangeSliderTrackShape': (props) =>
      const RectangularRangeSliderTrackShape(),
  'RectangularRangeSliderValueIndicatorShape': (props) =>
      const RectangularRangeSliderValueIndicatorShape(),
  'RectangularSliderTrackShape': (props) => const RectangularSliderTrackShape(),
  'RectangularSliderValueIndicatorShape': (props) =>
      const RectangularSliderValueIndicatorShape(),
  'RedoTextIntent': (props) => RedoTextIntent(props['pa'][0]),
  'RefreshIndicator': (props) => RefreshIndicator(
      key: props['key'],
      child: props['child'],
      displacement: props['displacement']?.toDouble() ?? 40.0,
      edgeOffset: props['edgeOffset']?.toDouble() ?? 0.0,
      onRefresh: props['onRefresh'],
      color: props['color'],
      backgroundColor: props['backgroundColor'],
      notificationPredicate:
          props['notificationPredicate'] ?? defaultScrollNotificationPredicate,
      semanticsLabel: props['semanticsLabel'],
      semanticsValue: props['semanticsValue'],
      strokeWidth: props['strokeWidth']?.toDouble() ??
          RefreshProgressIndicator.defaultStrokeWidth,
      triggerMode: props['triggerMode'] ?? RefreshIndicatorTriggerMode.onEdge),
  'RefreshIndicator.adaptive': (props) => RefreshIndicator.adaptive(
      key: props['key'],
      child: props['child'],
      displacement: props['displacement']?.toDouble() ?? 40.0,
      edgeOffset: props['edgeOffset']?.toDouble() ?? 0.0,
      onRefresh: props['onRefresh'],
      color: props['color'],
      backgroundColor: props['backgroundColor'],
      notificationPredicate:
          props['notificationPredicate'] ?? defaultScrollNotificationPredicate,
      semanticsLabel: props['semanticsLabel'],
      semanticsValue: props['semanticsValue'],
      strokeWidth: props['strokeWidth']?.toDouble() ??
          RefreshProgressIndicator.defaultStrokeWidth,
      triggerMode: props['triggerMode'] ?? RefreshIndicatorTriggerMode.onEdge),
  'RefreshIndicatorMode.armed': RefreshIndicatorMode.armed,
  'RefreshIndicatorMode.done': RefreshIndicatorMode.done,
  'RefreshIndicatorMode.drag': RefreshIndicatorMode.drag,
  'RefreshIndicatorMode.inactive': RefreshIndicatorMode.inactive,
  'RefreshIndicatorMode.refresh': RefreshIndicatorMode.refresh,
  'RefreshIndicatorMode.values': RefreshIndicatorMode.values,
  'RefreshIndicatorTriggerMode.anywhere': RefreshIndicatorTriggerMode.anywhere,
  'RefreshIndicatorTriggerMode.onEdge': RefreshIndicatorTriggerMode.onEdge,
  'RefreshIndicatorTriggerMode.values': RefreshIndicatorTriggerMode.values,
  'RefreshProgressIndicator': (props) => RefreshProgressIndicator(
      key: props['key'],
      value: props['value']?.toDouble(),
      backgroundColor: props['backgroundColor'],
      color: props['color'],
      valueColor: props['valueColor'],
      strokeWidth: props['strokeWidth']?.toDouble() ?? defaultStrokeWidth,
      strokeAlign: props['strokeAlign']?.toDouble() ?? strokeAlignCenter,
      semanticsLabel: props['semanticsLabel'],
      semanticsValue: props['semanticsValue'],
      strokeCap: props['strokeCap']),
  'RefreshProgressIndicator.defaultStrokeWidth':
      RefreshProgressIndicator.defaultStrokeWidth,
  'RelativePositionedTransition': (props) => RelativePositionedTransition(
      key: props['key'],
      rect: props['rect'],
      size: props['size'],
      child: props['child']),
  'RelativeRect.fill': RelativeRect.fill,
  'RelativeRect.fromDirectional': (props) => RelativeRect.fromDirectional(
      textDirection: props['textDirection'],
      start: props['start']?.toDouble() ?? 0,
      top: props['top']?.toDouble() ?? 0,
      end: props['end']?.toDouble() ?? 0,
      bottom: props['bottom']?.toDouble() ?? 0),
  'RelativeRect.fromLTRB': (props) => RelativeRect.fromLTRB(
      props['pa'][0]?.toDouble(),
      props['pa'][1]?.toDouble(),
      props['pa'][2]?.toDouble(),
      props['pa'][3]?.toDouble()),
  'RelativeRect.fromRect': (props) =>
      RelativeRect.fromRect(props['pa'][0], props['pa'][1]),
  'RelativeRect.fromSize': (props) =>
      RelativeRect.fromSize(props['pa'][0], props['pa'][1]),
  'RelativeRect.lerp': (props) => RelativeRect.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'RelativeRectTween': (props) =>
      RelativeRectTween(begin: props['begin'], end: props['end']),
  'RenderAbsorbPointer': (props) => RenderAbsorbPointer(
      child: props['child'],
      absorbing: props['absorbing'] ?? true,
      ignoringSemantics: props['ignoringSemantics']),
  'RenderAndroidView': (props) => RenderAndroidView(
      viewController: props['viewController'],
      hitTestBehavior: props['hitTestBehavior'],
      gestureRecognizers: props['gestureRecognizers'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'RenderAnimatedOpacity': (props) => RenderAnimatedOpacity(
      opacity: props['opacity'],
      alwaysIncludeSemantics: props['alwaysIncludeSemantics'] ?? false,
      child: props['child']),
  'RenderAnimatedSize': (props) => RenderAnimatedSize(
      vsync: props['vsync'],
      duration: props['duration'],
      reverseDuration: props['reverseDuration'],
      curve: props['curve'] ?? Curves.linear,
      alignment: props['alignment'] ?? Alignment.center,
      textDirection: props['textDirection'],
      child: props['child'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'RenderAnnotatedRegion': (props) => RenderAnnotatedRegion<Object>(
      value: props['value'], sized: props['sized'], child: props['child']),
  'RenderAspectRatio': (props) => RenderAspectRatio(
      child: props['child'],
      aspectRatio: props['aspectRatio']?.toDouble() ?? 0),
  'RenderBackdropFilter': (props) => RenderBackdropFilter(
      child: props['child'],
      filter: props['filter'],
      blendMode: props['blendMode'] ?? BlendMode.srcOver),
  'RenderBaseline': (props) => RenderBaseline(
      child: props['child'],
      baseline: props['baseline']?.toDouble() ?? 0,
      baselineType: props['baselineType']),
  'RenderBlockSemantics': (props) => RenderBlockSemantics(
      child: props['child'], blocking: props['blocking'] ?? true),
  'RenderClipOval': (props) => RenderClipOval(
      child: props['child'],
      clipper: props['clipper'],
      clipBehavior: props['clipBehavior'] ?? Clip.antiAlias),
  'RenderClipPath': (props) => RenderClipPath(
      child: props['child'],
      clipper: props['clipper'],
      clipBehavior: props['clipBehavior'] ?? Clip.antiAlias),
  'RenderClipRRect': (props) => RenderClipRRect(
      child: props['child'],
      borderRadius: props['borderRadius'] ?? BorderRadius.zero,
      clipper: props['clipper'],
      clipBehavior: props['clipBehavior'] ?? Clip.antiAlias,
      textDirection: props['textDirection']),
  'RenderClipRect': (props) => RenderClipRect(
      child: props['child'],
      clipper: props['clipper'],
      clipBehavior: props['clipBehavior'] ?? Clip.antiAlias),
  'RenderComparison.identical': RenderComparison.identical,
  'RenderComparison.layout': RenderComparison.layout,
  'RenderComparison.metadata': RenderComparison.metadata,
  'RenderComparison.paint': RenderComparison.paint,
  'RenderComparison.values': RenderComparison.values,
  'RenderConstrainedBox': (props) => RenderConstrainedBox(
      child: props['child'],
      additionalConstraints: props['additionalConstraints']),
  'RenderConstrainedOverflowBox': (props) => RenderConstrainedOverflowBox(
      child: props['child'],
      minWidth: props['minWidth']?.toDouble(),
      maxWidth: props['maxWidth']?.toDouble(),
      minHeight: props['minHeight']?.toDouble(),
      maxHeight: props['maxHeight']?.toDouble(),
      alignment: props['alignment'] ?? Alignment.center,
      textDirection: props['textDirection']),
  'RenderConstraintsTransformBox': (props) => RenderConstraintsTransformBox(
      alignment: props['alignment'] ?? Alignment.center,
      textDirection: props['textDirection'],
      constraintsTransform: props['constraintsTransform'],
      child: props['child'],
      clipBehavior: props['clipBehavior'] ?? Clip.none),
  'RenderCustomMultiChildLayoutBox': (props) => RenderCustomMultiChildLayoutBox(
      children: as<RenderBox>(props['children']), delegate: props['delegate']),
  'RenderCustomPaint': (props) => RenderCustomPaint(
      painter: props['painter'],
      foregroundPainter: props['foregroundPainter'],
      preferredSize: props['preferredSize'] ?? Size.zero,
      isComplex: props['isComplex'] ?? false,
      willChange: props['willChange'] ?? false,
      child: props['child']),
  'RenderCustomSingleChildLayoutBox': (props) =>
      RenderCustomSingleChildLayoutBox(
          child: props['child'], delegate: props['delegate']),
  'RenderDecoratedBox': (props) => RenderDecoratedBox(
      decoration: props['decoration'],
      position: props['position'] ?? DecorationPosition.background,
      configuration: props['configuration'] ?? ImageConfiguration.empty,
      child: props['child']),
  'RenderEditable': (props) => RenderEditable(
      text: props['text'],
      textDirection: props['textDirection'],
      textAlign: props['textAlign'] ?? TextAlign.start,
      cursorColor: props['cursorColor'],
      backgroundCursorColor: props['backgroundCursorColor'],
      showCursor: props['showCursor'],
      hasFocus: props['hasFocus'],
      startHandleLayerLink: props['startHandleLayerLink'],
      endHandleLayerLink: props['endHandleLayerLink'],
      maxLines: props['maxLines'] ?? 1,
      minLines: props['minLines'],
      expands: props['expands'] ?? false,
      strutStyle: props['strutStyle'],
      selectionColor: props['selectionColor'],
      textScaleFactor: props['textScaleFactor']?.toDouble() ?? 1.0,
      selection: props['selection'],
      offset: props['offset'],
      onCaretChanged: props['onCaretChanged'],
      ignorePointer: props['ignorePointer'] ?? false,
      readOnly: props['readOnly'] ?? false,
      forceLine: props['forceLine'] ?? true,
      textHeightBehavior: props['textHeightBehavior'],
      textWidthBasis: props['textWidthBasis'] ?? TextWidthBasis.parent,
      obscuringCharacter: props['obscuringCharacter'] ?? '•',
      obscureText: props['obscureText'] ?? false,
      locale: props['locale'],
      cursorWidth: props['cursorWidth']?.toDouble() ?? 1.0,
      cursorHeight: props['cursorHeight']?.toDouble(),
      cursorRadius: props['cursorRadius'],
      paintCursorAboveText: props['paintCursorAboveText'] ?? false,
      cursorOffset: props['cursorOffset'] ?? Offset.zero,
      devicePixelRatio: props['devicePixelRatio']?.toDouble() ?? 1.0,
      selectionHeightStyle:
          props['selectionHeightStyle'] ?? ui.BoxHeightStyle.tight,
      selectionWidthStyle:
          props['selectionWidthStyle'] ?? ui.BoxWidthStyle.tight,
      enableInteractiveSelection: props['enableInteractiveSelection'],
      floatingCursorAddedMargin: props['floatingCursorAddedMargin'] ??
          const EdgeInsets.fromLTRB(4, 4, 4, 5),
      promptRectRange: props['promptRectRange'],
      promptRectColor: props['promptRectColor'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      textSelectionDelegate: props['textSelectionDelegate'],
      painter: props['painter'],
      foregroundPainter: props['foregroundPainter'],
      children: as<RenderBox>(props['children'])),
  'RenderErrorBox': (props) =>
      RenderErrorBox((props['pa'].length > 0 ? props['pa'][0] : null) ?? ''),
  'RenderErrorBox.backgroundColor': RenderErrorBox.backgroundColor,
  'RenderErrorBox.minimumWidth': RenderErrorBox.minimumWidth,
  'RenderErrorBox.padding': RenderErrorBox.padding,
  'RenderErrorBox.paragraphStyle': RenderErrorBox.paragraphStyle,
  'RenderErrorBox.textStyle': RenderErrorBox.textStyle,
  'RenderExcludeSemantics': (props) => RenderExcludeSemantics(
      child: props['child'], excluding: props['excluding'] ?? true),
  'RenderFittedBox': (props) => RenderFittedBox(
      fit: props['fit'] ?? BoxFit.contain,
      alignment: props['alignment'] ?? Alignment.center,
      textDirection: props['textDirection'],
      child: props['child'],
      clipBehavior: props['clipBehavior'] ?? Clip.none),
  'RenderFlex': (props) => RenderFlex(
      children: as<RenderBox>(props['children']),
      direction: props['direction'] ?? Axis.horizontal,
      mainAxisSize: props['mainAxisSize'] ?? MainAxisSize.max,
      mainAxisAlignment: props['mainAxisAlignment'] ?? MainAxisAlignment.start,
      crossAxisAlignment:
          props['crossAxisAlignment'] ?? CrossAxisAlignment.center,
      textDirection: props['textDirection'],
      verticalDirection: props['verticalDirection'] ?? VerticalDirection.down,
      textBaseline: props['textBaseline'],
      clipBehavior: props['clipBehavior'] ?? Clip.none),
  'RenderFlow': (props) => RenderFlow(
      children: as<RenderBox>(props['children']),
      delegate: props['delegate'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'RenderFollowerLayer': (props) => RenderFollowerLayer(
      link: props['link'],
      showWhenUnlinked: props['showWhenUnlinked'] ?? true,
      offset: props['offset'] ?? Offset.zero,
      leaderAnchor: props['leaderAnchor'] ?? Alignment.topLeft,
      followerAnchor: props['followerAnchor'] ?? Alignment.topLeft,
      child: props['child']),
  'RenderFractionalTranslation': (props) => RenderFractionalTranslation(
      translation: props['translation'],
      transformHitTests: props['transformHitTests'] ?? true,
      child: props['child']),
  'RenderFractionallySizedOverflowBox': (props) =>
      RenderFractionallySizedOverflowBox(
          child: props['child'],
          widthFactor: props['widthFactor']?.toDouble(),
          heightFactor: props['heightFactor']?.toDouble(),
          alignment: props['alignment'] ?? Alignment.center,
          textDirection: props['textDirection']),
  'RenderIgnorePointer': (props) => RenderIgnorePointer(
      child: props['child'],
      ignoring: props['ignoring'] ?? true,
      ignoringSemantics: props['ignoringSemantics']),
  'RenderImage': (props) => RenderImage(
      image: props['image'],
      debugImageLabel: props['debugImageLabel'],
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      scale: props['scale']?.toDouble() ?? 1.0,
      color: props['color'],
      opacity: props['opacity'],
      colorBlendMode: props['colorBlendMode'],
      fit: props['fit'],
      alignment: props['alignment'] ?? Alignment.center,
      repeat: props['repeat'] ?? ImageRepeat.noRepeat,
      centerSlice: props['centerSlice'],
      matchTextDirection: props['matchTextDirection'] ?? false,
      textDirection: props['textDirection'],
      invertColors: props['invertColors'] ?? false,
      isAntiAlias: props['isAntiAlias'] ?? false,
      filterQuality: props['filterQuality'] ?? FilterQuality.low),
  'RenderIndexedSemantics': (props) =>
      RenderIndexedSemantics(child: props['child'], index: props['index']),
  'RenderIndexedStack': (props) => RenderIndexedStack(
      children: as<RenderBox>(props['children']),
      alignment: props['alignment'] ?? AlignmentDirectional.topStart,
      textDirection: props['textDirection'],
      fit: props['fit'] ?? StackFit.loose,
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      index: props['index'] ?? 0),
  'RenderIntrinsicHeight': (props) =>
      RenderIntrinsicHeight(child: props['child']),
  'RenderIntrinsicWidth': (props) => RenderIntrinsicWidth(
      stepWidth: props['stepWidth']?.toDouble(),
      stepHeight: props['stepHeight']?.toDouble(),
      child: props['child']),
  'RenderLeaderLayer': (props) =>
      RenderLeaderLayer(link: props['link'], child: props['child']),
  'RenderLimitedBox': (props) => RenderLimitedBox(
      child: props['child'],
      maxWidth: props['maxWidth']?.toDouble() ?? double.infinity,
      maxHeight: props['maxHeight']?.toDouble() ?? double.infinity),
  'RenderListBody': (props) => RenderListBody(
      children: as<RenderBox>(props['children']),
      axisDirection: props['axisDirection'] ?? AxisDirection.down),
  'RenderMergeSemantics': (props) =>
      RenderMergeSemantics(child: props['child']),
  'RenderMetaData': (props) => RenderMetaData(
      metaData: props['metaData'],
      behavior: props['behavior'] ?? HitTestBehavior.deferToChild,
      child: props['child']),
  'RenderMouseRegion': (props) => RenderMouseRegion(
      onEnter: props['onEnter'],
      onHover: props['onHover'],
      onExit: props['onExit'],
      cursor: props['cursor'] ?? MouseCursor.defer,
      validForMouseTracker: props['validForMouseTracker'] ?? true,
      opaque: props['opaque'] ?? true,
      child: props['child'],
      hitTestBehavior: props['hitTestBehavior'] ?? HitTestBehavior.opaque),
  'RenderNestedScrollViewViewport': (props) => RenderNestedScrollViewViewport(
      axisDirection: props['axisDirection'] ?? AxisDirection.down,
      crossAxisDirection: props['crossAxisDirection'],
      offset: props['offset'],
      anchor: props['anchor']?.toDouble() ?? 0.0,
      children: as<RenderSliver>(props['children']),
      center: props['center'],
      handle: props['handle'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'RenderObjectToWidgetAdapter': (props) => RenderObjectToWidgetAdapter(
      child: props['child'],
      container: props['container'],
      debugShortDescription: props['debugShortDescription']),
  'RenderObjectToWidgetElement': (props) =>
      RenderObjectToWidgetElement(props['pa'][0]),
  'RenderOffstage': (props) => RenderOffstage(
      offstage: props['offstage'] ?? true, child: props['child']),
  'RenderOpacity': (props) => RenderOpacity(
      opacity: props['opacity']?.toDouble() ?? 1.0,
      alwaysIncludeSemantics: props['alwaysIncludeSemantics'] ?? false,
      child: props['child']),
  'RenderPadding': (props) => RenderPadding(
      padding: props['padding'],
      textDirection: props['textDirection'],
      child: props['child']),
  'RenderParagraph': (props) => RenderParagraph(props['pa'][0],
      textAlign: props['textAlign'] ?? TextAlign.start,
      textDirection: props['textDirection'],
      softWrap: props['softWrap'] ?? true,
      overflow: props['overflow'] ?? TextOverflow.clip,
      textScaleFactor: props['textScaleFactor']?.toDouble() ?? 1.0,
      maxLines: props['maxLines'],
      locale: props['locale'],
      strutStyle: props['strutStyle'],
      textWidthBasis: props['textWidthBasis'] ?? TextWidthBasis.parent,
      textHeightBehavior: props['textHeightBehavior'],
      children: as<RenderBox>(props['children']),
      selectionColor: props['selectionColor'],
      registrar: props['registrar']),
  'RenderPhysicalModel': (props) => RenderPhysicalModel(
      child: props['child'],
      shape: props['shape'] ?? BoxShape.rectangle,
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      borderRadius: props['borderRadius'],
      elevation: props['elevation']?.toDouble() ?? 0.0,
      color: props['color'],
      shadowColor: props['shadowColor'] ?? const Color(0xFF000000)),
  'RenderPhysicalShape': (props) => RenderPhysicalShape(
      child: props['child'],
      clipper: props['clipper'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      elevation: props['elevation']?.toDouble() ?? 0.0,
      color: props['color'],
      shadowColor: props['shadowColor'] ?? const Color(0xFF000000)),
  'RenderPointerListener': (props) => RenderPointerListener(
      onPointerDown: props['onPointerDown'],
      onPointerMove: props['onPointerMove'],
      onPointerUp: props['onPointerUp'],
      onPointerHover: props['onPointerHover'],
      onPointerCancel: props['onPointerCancel'],
      onPointerPanZoomStart: props['onPointerPanZoomStart'],
      onPointerPanZoomUpdate: props['onPointerPanZoomUpdate'],
      onPointerPanZoomEnd: props['onPointerPanZoomEnd'],
      onPointerSignal: props['onPointerSignal'],
      behavior: props['behavior'] ?? HitTestBehavior.deferToChild,
      child: props['child']),
  'RenderPositionedBox': (props) => RenderPositionedBox(
      child: props['child'],
      widthFactor: props['widthFactor']?.toDouble(),
      heightFactor: props['heightFactor']?.toDouble(),
      alignment: props['alignment'] ?? Alignment.center,
      textDirection: props['textDirection']),
  'RenderProxyBox': (props) =>
      RenderProxyBox((props['pa'].length > 0 ? props['pa'][0] : null)),
  'RenderRepaintBoundary': (props) =>
      RenderRepaintBoundary(child: props['child']),
  'RenderRotatedBox': (props) => RenderRotatedBox(
      quarterTurns: props['quarterTurns'], child: props['child']),
  'RenderSemanticsAnnotations': (props) => RenderSemanticsAnnotations(
      child: props['child'],
      properties: props['properties'],
      container: props['container'] ?? false,
      explicitChildNodes: props['explicitChildNodes'] ?? false,
      excludeSemantics: props['excludeSemantics'] ?? false,
      blockUserActions: props['blockUserActions'] ?? false,
      textDirection: props['textDirection']),
  'RenderSemanticsGestureHandler': (props) => RenderSemanticsGestureHandler(
      child: props['child'],
      onTap: props['onTap'],
      onLongPress: props['onLongPress'],
      onHorizontalDragUpdate: props['onHorizontalDragUpdate'],
      onVerticalDragUpdate: props['onVerticalDragUpdate'],
      scrollFactor: props['scrollFactor']?.toDouble() ?? 0.8,
      behavior: props['behavior'] ?? HitTestBehavior.deferToChild),
  'RenderShaderMask': (props) => RenderShaderMask(
      child: props['child'],
      shaderCallback: props['shaderCallback'],
      blendMode: props['blendMode'] ?? BlendMode.modulate),
  'RenderShrinkWrappingViewport': (props) => RenderShrinkWrappingViewport(
      axisDirection: props['axisDirection'] ?? AxisDirection.down,
      crossAxisDirection: props['crossAxisDirection'],
      offset: props['offset'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      children: as<RenderSliver>(props['children'])),
  'RenderSizedOverflowBox': (props) => RenderSizedOverflowBox(
      child: props['child'],
      requestedSize: props['requestedSize'],
      alignment: props['alignment'] ?? Alignment.center,
      textDirection: props['textDirection']),
  'RenderSliverAnimatedOpacity': (props) => RenderSliverAnimatedOpacity(
      opacity: props['opacity'],
      alwaysIncludeSemantics: props['alwaysIncludeSemantics'] ?? false,
      sliver: props['sliver']),
  'RenderSliverConstrainedCrossAxis': (props) =>
      RenderSliverConstrainedCrossAxis(
          maxExtent: props['maxExtent']?.toDouble() ?? 0),
  'RenderSliverCrossAxisGroup': (props) => RenderSliverCrossAxisGroup(),
  'RenderSliverFillRemaining': (props) =>
      RenderSliverFillRemaining(child: props['child']),
  'RenderSliverFillRemainingAndOverscroll': (props) =>
      RenderSliverFillRemainingAndOverscroll(child: props['child']),
  'RenderSliverFillRemainingWithScrollable': (props) =>
      RenderSliverFillRemainingWithScrollable(child: props['child']),
  'RenderSliverFillViewport': (props) => RenderSliverFillViewport(
      childManager: props['childManager'],
      viewportFraction: props['viewportFraction']?.toDouble() ?? 1.0),
  'RenderSliverFixedExtentList': (props) => RenderSliverFixedExtentList(
      childManager: props['childManager'],
      itemExtent: props['itemExtent']?.toDouble() ?? 0),
  'RenderSliverGrid': (props) => RenderSliverGrid(
      childManager: props['childManager'], gridDelegate: props['gridDelegate']),
  'RenderSliverIgnorePointer': (props) => RenderSliverIgnorePointer(
      sliver: props['sliver'],
      ignoring: props['ignoring'] ?? true,
      ignoringSemantics: props['ignoringSemantics']),
  'RenderSliverList': (props) =>
      RenderSliverList(childManager: props['childManager']),
  'RenderSliverOffstage': (props) => RenderSliverOffstage(
      offstage: props['offstage'] ?? true, sliver: props['sliver']),
  'RenderSliverOpacity': (props) => RenderSliverOpacity(
      opacity: props['opacity']?.toDouble() ?? 1.0,
      alwaysIncludeSemantics: props['alwaysIncludeSemantics'] ?? false,
      sliver: props['sliver']),
  'RenderSliverOverlapAbsorber': (props) => RenderSliverOverlapAbsorber(
      handle: props['handle'], sliver: props['sliver']),
  'RenderSliverOverlapInjector': (props) =>
      RenderSliverOverlapInjector(handle: props['handle']),
  'RenderSliverPadding': (props) => RenderSliverPadding(
      padding: props['padding'],
      textDirection: props['textDirection'],
      child: props['child']),
  'RenderSliverToBoxAdapter': (props) =>
      RenderSliverToBoxAdapter(child: props['child']),
  'RenderStack': (props) => RenderStack(
      children: as<RenderBox>(props['children']),
      alignment: props['alignment'] ?? AlignmentDirectional.topStart,
      textDirection: props['textDirection'],
      fit: props['fit'] ?? StackFit.loose,
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'RenderStack.getIntrinsicDimension': (props) =>
      RenderStack.getIntrinsicDimension(props['pa'][0], props['pa'][1]),
  'RenderStack.layoutPositionedChild': (props) =>
      RenderStack.layoutPositionedChild(
          props['pa'][0], props['pa'][1], props['pa'][2], props['pa'][3]),
  'RenderTable': (props) => RenderTable(
      columns: props['columns'],
      rows: props['rows'],
      columnWidths: props['columnWidths'],
      defaultColumnWidth:
          props['defaultColumnWidth'] ?? const FlexColumnWidth(),
      textDirection: props['textDirection'],
      border: props['border'],
      rowDecorations: as<Decoration>(props['rowDecorations']),
      configuration: props['configuration'] ?? ImageConfiguration.empty,
      defaultVerticalAlignment:
          props['defaultVerticalAlignment'] ?? TableCellVerticalAlignment.top,
      textBaseline: props['textBaseline'],
      children: as<List<RenderBox>>(props['children'])),
  'RenderTapRegion': (props) => RenderTapRegion(
      registry: props['registry'],
      enabled: props['enabled'] ?? true,
      onTapOutside: props['onTapOutside'],
      onTapInside: props['onTapInside'],
      behavior: props['behavior'] ?? HitTestBehavior.deferToChild,
      groupId: props['groupId'],
      debugLabel: props['debugLabel']),
  'RenderTapRegionSurface': (props) => RenderTapRegionSurface(),
  'RenderTransform': (props) => RenderTransform(
      transform: props['transform'],
      origin: props['origin'],
      alignment: props['alignment'],
      textDirection: props['textDirection'],
      transformHitTests: props['transformHitTests'] ?? true,
      filterQuality: props['filterQuality'],
      child: props['child']),
  'RenderUiKitView': (props) => RenderUiKitView(
      viewController: props['viewController'],
      hitTestBehavior: props['hitTestBehavior'],
      gestureRecognizers: props['gestureRecognizers']),
  'RenderView': (props) => RenderView(
      child: props['child'],
      configuration: props['configuration'],
      view: props['view']),
  'RenderViewport': (props) => RenderViewport(
      axisDirection: props['axisDirection'] ?? AxisDirection.down,
      crossAxisDirection: props['crossAxisDirection'],
      offset: props['offset'],
      anchor: props['anchor']?.toDouble() ?? 0.0,
      children: as<RenderSliver>(props['children']),
      center: props['center'],
      cacheExtent: props['cacheExtent']?.toDouble(),
      cacheExtentStyle: props['cacheExtentStyle'] ?? CacheExtentStyle.pixel,
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'RenderViewport.excludeFromScrolling': RenderViewport.excludeFromScrolling,
  'RenderViewport.useTwoPaneSemantics': RenderViewport.useTwoPaneSemantics,
  'RenderWrap': (props) => RenderWrap(
      children: as<RenderBox>(props['children']),
      direction: props['direction'] ?? Axis.horizontal,
      alignment: props['alignment'] ?? WrapAlignment.start,
      spacing: props['spacing']?.toDouble() ?? 0.0,
      runAlignment: props['runAlignment'] ?? WrapAlignment.start,
      runSpacing: props['runSpacing']?.toDouble() ?? 0.0,
      crossAxisAlignment:
          props['crossAxisAlignment'] ?? WrapCrossAlignment.start,
      textDirection: props['textDirection'],
      verticalDirection: props['verticalDirection'] ?? VerticalDirection.down,
      clipBehavior: props['clipBehavior'] ?? Clip.none),
  'RenderingFlutterBinding': (props) =>
      RenderingFlutterBinding(root: props['root']),
  'RenderingFlutterBinding.ensureInitialized': (props) =>
      RenderingFlutterBinding.ensureInitialized(),
  'RenderingServiceExtensions.debugDisableClipLayers':
      RenderingServiceExtensions.debugDisableClipLayers,
  'RenderingServiceExtensions.debugDisableOpacityLayers':
      RenderingServiceExtensions.debugDisableOpacityLayers,
  'RenderingServiceExtensions.debugDisablePhysicalShapeLayers':
      RenderingServiceExtensions.debugDisablePhysicalShapeLayers,
  'RenderingServiceExtensions.debugDumpLayerTree':
      RenderingServiceExtensions.debugDumpLayerTree,
  'RenderingServiceExtensions.debugDumpRenderTree':
      RenderingServiceExtensions.debugDumpRenderTree,
  'RenderingServiceExtensions.debugDumpSemanticsTreeInInverseHitTestOrder':
      RenderingServiceExtensions.debugDumpSemanticsTreeInInverseHitTestOrder,
  'RenderingServiceExtensions.debugDumpSemanticsTreeInTraversalOrder':
      RenderingServiceExtensions.debugDumpSemanticsTreeInTraversalOrder,
  'RenderingServiceExtensions.debugPaint':
      RenderingServiceExtensions.debugPaint,
  'RenderingServiceExtensions.debugPaintBaselinesEnabled':
      RenderingServiceExtensions.debugPaintBaselinesEnabled,
  'RenderingServiceExtensions.invertOversizedImages':
      RenderingServiceExtensions.invertOversizedImages,
  'RenderingServiceExtensions.profileRenderObjectLayouts':
      RenderingServiceExtensions.profileRenderObjectLayouts,
  'RenderingServiceExtensions.profileRenderObjectPaints':
      RenderingServiceExtensions.profileRenderObjectPaints,
  'RenderingServiceExtensions.repaintRainbow':
      RenderingServiceExtensions.repaintRainbow,
  'RenderingServiceExtensions.values': RenderingServiceExtensions.values,
  'ReorderableDelayedDragStartListener': (props) =>
      ReorderableDelayedDragStartListener(
          key: props['key'],
          child: props['child'],
          index: props['index'],
          enabled: props['enabled'] ?? true),
  'ReorderableDragStartListener': (props) => ReorderableDragStartListener(
      key: props['key'],
      child: props['child'],
      index: props['index'],
      enabled: props['enabled'] ?? true),
  'ReorderableList': (props) => ReorderableList(
      key: props['key'],
      itemBuilder: props['itemBuilder'],
      itemCount: props['itemCount'],
      onReorder: props['onReorder'],
      onReorderStart: props['onReorderStart'],
      onReorderEnd: props['onReorderEnd'],
      itemExtent: props['itemExtent']?.toDouble(),
      prototypeItem: props['prototypeItem'],
      proxyDecorator: props['proxyDecorator'],
      padding: props['padding'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      primary: props['primary'],
      physics: props['physics'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      anchor: props['anchor']?.toDouble() ?? 0.0,
      cacheExtent: props['cacheExtent']?.toDouble(),
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      autoScrollerVelocityScalar:
          props['autoScrollerVelocityScalar']?.toDouble()),
  'ReorderableList.maybeOf': (props) => ReorderableList.maybeOf(props['pa'][0]),
  'ReorderableList.of': (props) => ReorderableList.of(props['pa'][0]),
  'ReorderableListView': (props) => ReorderableListView(
      key: props['key'],
      children: as<Widget>(props['children']) ?? const [],
      onReorder: props['onReorder'],
      onReorderStart: props['onReorderStart'],
      onReorderEnd: props['onReorderEnd'],
      itemExtent: props['itemExtent']?.toDouble(),
      prototypeItem: props['prototypeItem'],
      proxyDecorator: props['proxyDecorator'],
      buildDefaultDragHandles: props['buildDefaultDragHandles'] ?? true,
      padding: props['padding'],
      header: props['header'],
      footer: props['footer'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      scrollController: props['scrollController'],
      primary: props['primary'],
      physics: props['physics'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      anchor: props['anchor']?.toDouble() ?? 0.0,
      cacheExtent: props['cacheExtent']?.toDouble(),
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      autoScrollerVelocityScalar:
          props['autoScrollerVelocityScalar']?.toDouble()),
  'ReorderableListView.builder': (props) => ReorderableListView.builder(
      key: props['key'],
      itemBuilder: props['itemBuilder'],
      itemCount: props['itemCount'],
      onReorder: props['onReorder'],
      onReorderStart: props['onReorderStart'],
      onReorderEnd: props['onReorderEnd'],
      itemExtent: props['itemExtent']?.toDouble(),
      prototypeItem: props['prototypeItem'],
      proxyDecorator: props['proxyDecorator'],
      buildDefaultDragHandles: props['buildDefaultDragHandles'] ?? true,
      padding: props['padding'],
      header: props['header'],
      footer: props['footer'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      scrollController: props['scrollController'],
      primary: props['primary'],
      physics: props['physics'],
      shrinkWrap: props['shrinkWrap'] ?? false,
      anchor: props['anchor']?.toDouble() ?? 0.0,
      cacheExtent: props['cacheExtent']?.toDouble(),
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual,
      restorationId: props['restorationId'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      autoScrollerVelocityScalar:
          props['autoScrollerVelocityScalar']?.toDouble()),
  'RepaintBoundary': (props) =>
      RepaintBoundary(key: props['key'], child: props['child']),
  'RepaintBoundary.wrap': (props) =>
      RepaintBoundary.wrap(props['pa'][0], props['pa'][1]),
  'RepaintBoundary.wrapAll': (props) => RepaintBoundary.wrapAll(props['pa'][0]),
  'RepetitiveStackFrameFilter': (props) => RepetitiveStackFrameFilter(
      frames: as<PartialStackFrame>(props['frames']) ?? const [],
      replacement: props['replacement']),
  'ReplaceTextIntent': (props) => ReplaceTextIntent(
      props['pa'][0], props['pa'][1], props['pa'][2], props['pa'][3]),
  'RequestFocusAction': (props) => RequestFocusAction(),
  'RequestFocusIntent': (props) => RequestFocusIntent(props['pa'][0],
      requestFocusCallback: props['requestFocusCallback']),
  'ResizeImage': (props) => ResizeImage(props['pa'][0],
      width: props['width'],
      height: props['height'],
      policy: props['policy'] ?? ResizeImagePolicy.exact,
      allowUpscaling: props['allowUpscaling'] ?? false),
  'ResizeImage.resizeIfNeeded': (props) => ResizeImage.resizeIfNeeded(
      props['pa'][0], props['pa'][1], props['pa'][2]),
  'ResizeImagePolicy.exact': ResizeImagePolicy.exact,
  'ResizeImagePolicy.fit': ResizeImagePolicy.fit,
  'ResizeImagePolicy.values': ResizeImagePolicy.values,
  'RestorableBool': (props) => RestorableBool(props['pa'][0]),
  'RestorableBoolN': (props) => RestorableBoolN(props['pa'][0]),
  'RestorableCupertinoTabController': (props) =>
      RestorableCupertinoTabController(
          initialIndex: props['initialIndex'] ?? 0),
  'RestorableDateTime': (props) => RestorableDateTime(props['pa'][0]),
  'RestorableDateTimeN': (props) => RestorableDateTimeN(props['pa'][0]),
  'RestorableDouble': (props) => RestorableDouble(props['pa'][0]?.toDouble()),
  'RestorableDoubleN': (props) => RestorableDoubleN(props['pa'][0]?.toDouble()),
  'RestorableEnum': (props) =>
      RestorableEnum(props['pa'][0], values: props['values']),
  'RestorableEnumN': (props) =>
      RestorableEnumN(props['pa'][0], values: props['values']),
  'RestorableInt': (props) => RestorableInt(props['pa'][0]),
  'RestorableIntN': (props) => RestorableIntN(props['pa'][0]),
  'RestorableNum': (props) => RestorableNum<num>(props['pa'][0]),
  'RestorableNumN': (props) => RestorableNumN<num?>(props['pa'][0]),
  'RestorableRouteFuture': (props) => RestorableRouteFuture(
      navigatorFinder: props['navigatorFinder'] ?? _defaultNavigatorFinder,
      onPresent: props['onPresent'],
      onComplete: props['onComplete']),
  'RestorableString': (props) => RestorableString(props['pa'][0]),
  'RestorableStringN': (props) => RestorableStringN(props['pa'][0]),
  'RestorableTextEditingController': (props) =>
      RestorableTextEditingController(text: props['text']),
  'RestorableTextEditingController.fromValue': (props) =>
      RestorableTextEditingController.fromValue(props['pa'][0]),
  'RestorableTimeOfDay': (props) => RestorableTimeOfDay(props['pa'][0]),
  'RestorationBucket.child': (props) => RestorationBucket.child(
      restorationId: props['restorationId'],
      parent: props['parent'],
      debugOwner: props['debugOwner']),
  'RestorationBucket.empty': (props) => RestorationBucket.empty(
      restorationId: props['restorationId'], debugOwner: props['debugOwner']),
  'RestorationBucket.root': (props) => RestorationBucket.root(
      manager: props['manager'], rawData: props['rawData']),
  'RestorationManager': (props) => RestorationManager(),
  'RestorationScope': (props) => RestorationScope(
      key: props['key'],
      restorationId: props['restorationId'],
      child: props['child']),
  'RestorationScope.maybeOf': (props) =>
      RestorationScope.maybeOf(props['pa'][0]),
  'RestorationScope.of': (props) => RestorationScope.of(props['pa'][0]),
  'RevealedOffset': (props) => RevealedOffset(
      offset: props['offset']?.toDouble() ?? 0, rect: props['rect']),
  'ReverseAnimation': (props) => ReverseAnimation(props['pa'][0]),
  'ReverseTween': (props) => ReverseTween(props['pa'][0]),
  'RichText': (props) => RichText(
      key: props['key'],
      text: props['text'],
      textAlign: props['textAlign'] ?? TextAlign.start,
      textDirection: props['textDirection'],
      softWrap: props['softWrap'] ?? true,
      overflow: props['overflow'] ?? TextOverflow.clip,
      textScaleFactor: props['textScaleFactor']?.toDouble() ?? 1.0,
      maxLines: props['maxLines'],
      locale: props['locale'],
      strutStyle: props['strutStyle'],
      textWidthBasis: props['textWidthBasis'] ?? TextWidthBasis.parent,
      textHeightBehavior: props['textHeightBehavior'],
      selectionRegistrar: props['selectionRegistrar'],
      selectionColor: props['selectionColor']),
  'RootBackButtonDispatcher': (props) => RootBackButtonDispatcher(),
  'RootIsolateToken.instance': RootIsolateToken.instance,
  'RootRestorationScope': (props) => RootRestorationScope(
      key: props['key'],
      restorationId: props['restorationId'],
      child: props['child']),
  'RotatedBox': (props) => RotatedBox(
      key: props['key'],
      quarterTurns: props['quarterTurns'],
      child: props['child']),
  'RotationTransition': (props) => RotationTransition(
      key: props['key'],
      turns: props['turns'],
      alignment: props['alignment'] ?? Alignment.center,
      filterQuality: props['filterQuality'],
      child: props['child']),
  'RoundRangeSliderThumbShape': (props) => RoundRangeSliderThumbShape(
      enabledThumbRadius: props['enabledThumbRadius']?.toDouble() ?? 10.0,
      disabledThumbRadius: props['disabledThumbRadius']?.toDouble(),
      elevation: props['elevation']?.toDouble() ?? 1.0,
      pressedElevation: props['pressedElevation']?.toDouble() ?? 6.0),
  'RoundRangeSliderTickMarkShape': (props) => RoundRangeSliderTickMarkShape(
      tickMarkRadius: props['tickMarkRadius']?.toDouble()),
  'RoundSliderOverlayShape': (props) => RoundSliderOverlayShape(
      overlayRadius: props['overlayRadius']?.toDouble() ?? 24.0),
  'RoundSliderThumbShape': (props) => RoundSliderThumbShape(
      enabledThumbRadius: props['enabledThumbRadius']?.toDouble() ?? 10.0,
      disabledThumbRadius: props['disabledThumbRadius']?.toDouble(),
      elevation: props['elevation']?.toDouble() ?? 1.0,
      pressedElevation: props['pressedElevation']?.toDouble() ?? 6.0),
  'RoundSliderTickMarkShape': (props) => RoundSliderTickMarkShape(
      tickMarkRadius: props['tickMarkRadius']?.toDouble()),
  'RoundedRectRangeSliderTrackShape': (props) =>
      const RoundedRectRangeSliderTrackShape(),
  'RoundedRectSliderTrackShape': (props) => const RoundedRectSliderTrackShape(),
  'RoundedRectangleBorder': (props) => RoundedRectangleBorder(
      side: props['side'] ?? BorderSide.none,
      borderRadius: props['borderRadius'] ?? BorderRadius.zero),
  'RouteInformation': (props) => RouteInformation(
      location: props['location'], uri: props['uri'], state: props['state']),
  'RouteInformationReportingType.navigate':
      RouteInformationReportingType.navigate,
  'RouteInformationReportingType.neglect':
      RouteInformationReportingType.neglect,
  'RouteInformationReportingType.none': RouteInformationReportingType.none,
  'RouteInformationReportingType.values': RouteInformationReportingType.values,
  'RouteObserver': (props) => RouteObserver(),
  'RoutePopDisposition.bubble': RoutePopDisposition.bubble,
  'RoutePopDisposition.doNotPop': RoutePopDisposition.doNotPop,
  'RoutePopDisposition.pop': RoutePopDisposition.pop,
  'RoutePopDisposition.values': RoutePopDisposition.values,
  'RouteSettings': (props) =>
      RouteSettings(name: props['name'], arguments: props['arguments']),
  'Router': (props) => Router(
      key: props['key'],
      routeInformationProvider: props['routeInformationProvider'],
      routeInformationParser: props['routeInformationParser'],
      routerDelegate: props['routerDelegate'],
      backButtonDispatcher: props['backButtonDispatcher'],
      restorationScopeId: props['restorationScopeId']),
  'Router.maybeOf': (props) => Router.maybeOf(props['pa'][0]),
  'Router.navigate': (props) => Router.navigate(props['pa'][0], props['pa'][1]),
  'Router.neglect': (props) => Router.neglect(props['pa'][0], props['pa'][1]),
  'Router.of': (props) => Router.of(props['pa'][0]),
  'Router.withConfig': (props) => Router.withConfig(
      key: props['key'],
      config: props['config'],
      restorationScopeId: props['restorationScopeId']),
  'RouterConfig': (props) => RouterConfig(
      routeInformationProvider: props['routeInformationProvider'],
      routeInformationParser: props['routeInformationParser'],
      routerDelegate: props['routerDelegate'],
      backButtonDispatcher: props['backButtonDispatcher']),
  'Row': (props) => Row(
      key: props['key'],
      mainAxisAlignment: props['mainAxisAlignment'] ?? MainAxisAlignment.start,
      mainAxisSize: props['mainAxisSize'] ?? MainAxisSize.max,
      crossAxisAlignment:
          props['crossAxisAlignment'] ?? CrossAxisAlignment.center,
      textDirection: props['textDirection'],
      verticalDirection: props['verticalDirection'] ?? VerticalDirection.down,
      textBaseline: props['textBaseline'],
      children: as<Widget>(props['children']) ?? const <Widget>[]),
  'SafeArea': (props) => SafeArea(
      key: props['key'],
      left: props['left'] ?? true,
      top: props['top'] ?? true,
      right: props['right'] ?? true,
      bottom: props['bottom'] ?? true,
      minimum: props['minimum'] ?? EdgeInsets.zero,
      maintainBottomViewPadding: props['maintainBottomViewPadding'] ?? false,
      child: props['child']),
  'SamplingClock': (props) => SamplingClock(),
  'SawTooth': (props) => SawTooth(props['pa'][0]),
  'Scaffold': (props) => Scaffold(
      key: props['key'],
      appBar: props['appBar'],
      body: props['body'],
      floatingActionButton: props['floatingActionButton'],
      floatingActionButtonLocation: props['floatingActionButtonLocation'],
      floatingActionButtonAnimator: props['floatingActionButtonAnimator'],
      persistentFooterButtons: as<Widget>(props['persistentFooterButtons']),
      persistentFooterAlignment:
          props['persistentFooterAlignment'] ?? AlignmentDirectional.centerEnd,
      drawer: props['drawer'],
      onDrawerChanged: props['onDrawerChanged'],
      endDrawer: props['endDrawer'],
      onEndDrawerChanged: props['onEndDrawerChanged'],
      bottomNavigationBar: props['bottomNavigationBar'],
      bottomSheet: props['bottomSheet'],
      backgroundColor: props['backgroundColor'],
      resizeToAvoidBottomInset: props['resizeToAvoidBottomInset'],
      primary: props['primary'] ?? true,
      drawerDragStartBehavior:
          props['drawerDragStartBehavior'] ?? DragStartBehavior.start,
      extendBody: props['extendBody'] ?? false,
      extendBodyBehindAppBar: props['extendBodyBehindAppBar'] ?? false,
      drawerScrimColor: props['drawerScrimColor'],
      drawerEdgeDragWidth: props['drawerEdgeDragWidth']?.toDouble(),
      drawerEnableOpenDragGesture: props['drawerEnableOpenDragGesture'] ?? true,
      endDrawerEnableOpenDragGesture:
          props['endDrawerEnableOpenDragGesture'] ?? true,
      restorationId: props['restorationId']),
  'Scaffold.geometryOf': (props) => Scaffold.geometryOf(props['pa'][0]),
  'Scaffold.hasDrawer': (props) => Scaffold.hasDrawer(props['pa'][0],
      registerForUpdates: props['registerForUpdates'] ?? true),
  'Scaffold.maybeOf': (props) => Scaffold.maybeOf(props['pa'][0]),
  'Scaffold.of': (props) => Scaffold.of(props['pa'][0]),
  'ScaffoldGeometry': (props) => ScaffoldGeometry(
      bottomNavigationBarTop: props['bottomNavigationBarTop']?.toDouble(),
      floatingActionButtonArea: props['floatingActionButtonArea']),
  'ScaffoldMessenger': (props) =>
      ScaffoldMessenger(key: props['key'], child: props['child']),
  'ScaffoldMessenger.maybeOf': (props) =>
      ScaffoldMessenger.maybeOf(props['pa'][0]),
  'ScaffoldMessenger.of': (props) => ScaffoldMessenger.of(props['pa'][0]),
  'ScaffoldPrelayoutGeometry': (props) => ScaffoldPrelayoutGeometry(
      bottomSheetSize: props['bottomSheetSize'],
      contentBottom: props['contentBottom']?.toDouble() ?? 0,
      contentTop: props['contentTop']?.toDouble() ?? 0,
      floatingActionButtonSize: props['floatingActionButtonSize'],
      minInsets: props['minInsets'],
      minViewPadding: props['minViewPadding'],
      scaffoldSize: props['scaffoldSize'],
      snackBarSize: props['snackBarSize'],
      materialBannerSize: props['materialBannerSize'],
      textDirection: props['textDirection']),
  'ScaleEndDetails': (props) => ScaleEndDetails(
      velocity: props['velocity'] ?? Velocity.zero,
      scaleVelocity: props['scaleVelocity']?.toDouble() ?? 0,
      pointerCount: props['pointerCount'] ?? 0),
  'ScaleGestureRecognizer': (props) => ScaleGestureRecognizer(
      debugOwner: props['debugOwner'],
      supportedDevices: props['supportedDevices'],
      allowedButtonsFilter: props['allowedButtonsFilter'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.down,
      trackpadScrollCausesScale: props['trackpadScrollCausesScale'] ?? false,
      trackpadScrollToScaleFactor: props['trackpadScrollToScaleFactor'] ??
          kDefaultTrackpadScrollToScaleFactor),
  'ScaleStartDetails': (props) => ScaleStartDetails(
      focalPoint: props['focalPoint'] ?? Offset.zero,
      localFocalPoint: props['localFocalPoint'],
      pointerCount: props['pointerCount'] ?? 0),
  'ScaleTransition': (props) => ScaleTransition(
      key: props['key'],
      scale: props['scale'],
      alignment: props['alignment'] ?? Alignment.center,
      filterQuality: props['filterQuality'],
      child: props['child']),
  'ScaleUpdateDetails': (props) => ScaleUpdateDetails(
      focalPoint: props['focalPoint'] ?? Offset.zero,
      localFocalPoint: props['localFocalPoint'],
      scale: props['scale']?.toDouble() ?? 1.0,
      horizontalScale: props['horizontalScale']?.toDouble() ?? 1.0,
      verticalScale: props['verticalScale']?.toDouble() ?? 1.0,
      rotation: props['rotation']?.toDouble() ?? 0.0,
      pointerCount: props['pointerCount'] ?? 0,
      focalPointDelta: props['focalPointDelta'] ?? Offset.zero),
  'SchedulerPhase.idle': SchedulerPhase.idle,
  'SchedulerPhase.midFrameMicrotasks': SchedulerPhase.midFrameMicrotasks,
  'SchedulerPhase.persistentCallbacks': SchedulerPhase.persistentCallbacks,
  'SchedulerPhase.postFrameCallbacks': SchedulerPhase.postFrameCallbacks,
  'SchedulerPhase.transientCallbacks': SchedulerPhase.transientCallbacks,
  'SchedulerPhase.values': SchedulerPhase.values,
  'SchedulerServiceExtensions.timeDilation':
      SchedulerServiceExtensions.timeDilation,
  'SchedulerServiceExtensions.values': SchedulerServiceExtensions.values,
  'ScriptCategory.dense': ScriptCategory.dense,
  'ScriptCategory.englishLike': ScriptCategory.englishLike,
  'ScriptCategory.tall': ScriptCategory.tall,
  'ScriptCategory.values': ScriptCategory.values,
  'ScrollAction': (props) => ScrollAction(),
  'ScrollAction.getDirectionalIncrement': (props) =>
      ScrollAction.getDirectionalIncrement(props['pa'][0], props['pa'][1]),
  'ScrollAwareImageProvider': (props) => ScrollAwareImageProvider(
      context: props['context'], imageProvider: props['imageProvider']),
  'ScrollBehavior': (props) => ScrollBehavior(
      androidOverscrollIndicator: props['androidOverscrollIndicator']),
  'ScrollConfiguration': (props) => ScrollConfiguration(
      key: props['key'], behavior: props['behavior'], child: props['child']),
  'ScrollConfiguration.of': (props) => ScrollConfiguration.of(props['pa'][0]),
  'ScrollController': (props) => ScrollController(
      initialScrollOffset: props['initialScrollOffset']?.toDouble() ?? 0.0,
      keepScrollOffset: props['keepScrollOffset'] ?? true,
      debugLabel: props['debugLabel'],
      onAttach: props['onAttach'],
      onDetach: props['onDetach']),
  'ScrollDecelerationRate.fast': ScrollDecelerationRate.fast,
  'ScrollDecelerationRate.normal': ScrollDecelerationRate.normal,
  'ScrollDecelerationRate.values': ScrollDecelerationRate.values,
  'ScrollDirection.forward': ScrollDirection.forward,
  'ScrollDirection.idle': ScrollDirection.idle,
  'ScrollDirection.reverse': ScrollDirection.reverse,
  'ScrollDirection.values': ScrollDirection.values,
  'ScrollDragController': (props) => ScrollDragController(
      delegate: props['delegate'],
      details: props['details'],
      onDragCanceled: props['onDragCanceled'],
      carriedVelocity: props['carriedVelocity']?.toDouble(),
      motionStartDistanceThreshold:
          props['motionStartDistanceThreshold']?.toDouble()),
  'ScrollDragController.momentumRetainStationaryDurationThreshold':
      ScrollDragController.momentumRetainStationaryDurationThreshold,
  'ScrollDragController.momentumRetainVelocityThresholdFactor':
      ScrollDragController.momentumRetainVelocityThresholdFactor,
  'ScrollDragController.motionStoppedDurationThreshold':
      ScrollDragController.motionStoppedDurationThreshold,
  'ScrollEndNotification': (props) => ScrollEndNotification(
      metrics: props['metrics'],
      context: props['context'],
      dragDetails: props['dragDetails']),
  'ScrollIncrementDetails': (props) =>
      ScrollIncrementDetails(type: props['type'], metrics: props['metrics']),
  'ScrollIncrementType.line': ScrollIncrementType.line,
  'ScrollIncrementType.page': ScrollIncrementType.page,
  'ScrollIncrementType.values': ScrollIncrementType.values,
  'ScrollIntent': (props) => ScrollIntent(
      direction: props['direction'],
      type: props['type'] ?? ScrollIncrementType.line),
  'ScrollMetricsNotification': (props) => ScrollMetricsNotification(
      metrics: props['metrics'], context: props['context']),
  'ScrollNotificationObserver': (props) =>
      ScrollNotificationObserver(key: props['key'], child: props['child']),
  'ScrollNotificationObserver.maybeOf': (props) =>
      ScrollNotificationObserver.maybeOf(props['pa'][0]),
  'ScrollNotificationObserver.of': (props) =>
      ScrollNotificationObserver.of(props['pa'][0]),
  'ScrollPhysics': (props) => ScrollPhysics(parent: props['parent']),
  'ScrollPositionAlignmentPolicy.explicit':
      ScrollPositionAlignmentPolicy.explicit,
  'ScrollPositionAlignmentPolicy.keepVisibleAtEnd':
      ScrollPositionAlignmentPolicy.keepVisibleAtEnd,
  'ScrollPositionAlignmentPolicy.keepVisibleAtStart':
      ScrollPositionAlignmentPolicy.keepVisibleAtStart,
  'ScrollPositionAlignmentPolicy.values': ScrollPositionAlignmentPolicy.values,
  'ScrollPositionWithSingleContext': (props) => ScrollPositionWithSingleContext(
      physics: props['physics'],
      context: props['context'],
      initialPixels: props['initialPixels']?.toDouble() ?? 0.0,
      keepScrollOffset: props['keepScrollOffset'] ?? true,
      oldPosition: props['oldPosition'],
      debugLabel: props['debugLabel']),
  'ScrollSpringSimulation': (props) => ScrollSpringSimulation(
      props['pa'][0],
      props['pa'][1]?.toDouble(),
      props['pa'][2]?.toDouble(),
      props['pa'][3]?.toDouble(),
      tolerance: props['tolerance'] ?? Tolerance.defaultTolerance),
  'ScrollStartNotification': (props) => ScrollStartNotification(
      metrics: props['metrics'],
      context: props['context'],
      dragDetails: props['dragDetails']),
  'ScrollToDocumentBoundaryIntent': (props) =>
      ScrollToDocumentBoundaryIntent(forward: props['forward']),
  'ScrollUpdateNotification': (props) => ScrollUpdateNotification(
      metrics: props['metrics'],
      context: props['context'],
      dragDetails: props['dragDetails'],
      scrollDelta: props['scrollDelta']?.toDouble(),
      depth: props['depth']),
  'ScrollViewKeyboardDismissBehavior.manual':
      ScrollViewKeyboardDismissBehavior.manual,
  'ScrollViewKeyboardDismissBehavior.onDrag':
      ScrollViewKeyboardDismissBehavior.onDrag,
  'ScrollViewKeyboardDismissBehavior.values':
      ScrollViewKeyboardDismissBehavior.values,
  'Scrollable': (props) => Scrollable(
      key: props['key'],
      axisDirection: props['axisDirection'] ?? AxisDirection.down,
      controller: props['controller'],
      physics: props['physics'],
      viewportBuilder: props['viewportBuilder'],
      incrementCalculator: props['incrementCalculator'],
      excludeFromSemantics: props['excludeFromSemantics'] ?? false,
      semanticChildCount: props['semanticChildCount'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      restorationId: props['restorationId'],
      scrollBehavior: props['scrollBehavior'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'Scrollable.ensureVisible': (props) => Scrollable.ensureVisible(
      props['pa'][0],
      alignment: props['alignment']?.toDouble() ?? 0.0,
      duration: props['duration'] ?? Duration.zero,
      curve: props['curve'] ?? Curves.ease,
      alignmentPolicy:
          props['alignmentPolicy'] ?? ScrollPositionAlignmentPolicy.explicit),
  'Scrollable.maybeOf': (props) =>
      Scrollable.maybeOf(props['pa'][0], axis: props['axis']),
  'Scrollable.of': (props) =>
      Scrollable.of(props['pa'][0], axis: props['axis']),
  'Scrollable.recommendDeferredLoadingForContext': (props) =>
      Scrollable.recommendDeferredLoadingForContext(props['pa'][0],
          axis: props['axis']),
  'ScrollableDetails': (props) => ScrollableDetails(
      direction: props['direction'],
      controller: props['controller'],
      physics: props['physics'],
      clipBehavior: props['clipBehavior'],
      decorationClipBehavior: props['decorationClipBehavior']),
  'ScrollableDetails.horizontal': (props) => ScrollableDetails.horizontal(
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      physics: props['physics'],
      decorationClipBehavior: props['decorationClipBehavior']),
  'ScrollableDetails.vertical': (props) => ScrollableDetails.vertical(
      reverse: props['reverse'] ?? false,
      controller: props['controller'],
      physics: props['physics'],
      decorationClipBehavior: props['decorationClipBehavior']),
  'Scrollbar': (props) => Scrollbar(
      key: props['key'],
      child: props['child'],
      controller: props['controller'],
      thumbVisibility: props['thumbVisibility'],
      trackVisibility: props['trackVisibility'],
      thickness: props['thickness']?.toDouble(),
      radius: props['radius'],
      notificationPredicate: props['notificationPredicate'],
      interactive: props['interactive'],
      scrollbarOrientation: props['scrollbarOrientation'],
      isAlwaysShown: props['isAlwaysShown'],
      showTrackOnHover: props['showTrackOnHover'],
      hoverThickness: props['hoverThickness']?.toDouble()),
  'ScrollbarOrientation.bottom': ScrollbarOrientation.bottom,
  'ScrollbarOrientation.left': ScrollbarOrientation.left,
  'ScrollbarOrientation.right': ScrollbarOrientation.right,
  'ScrollbarOrientation.top': ScrollbarOrientation.top,
  'ScrollbarOrientation.values': ScrollbarOrientation.values,
  'ScrollbarPainter': (props) => ScrollbarPainter(
      color: props['color'],
      fadeoutOpacityAnimation: props['fadeoutOpacityAnimation'],
      trackColor: props['trackColor'] ?? const Color(0x00000000),
      trackBorderColor: props['trackBorderColor'] ?? const Color(0x00000000),
      textDirection: props['textDirection'],
      thickness: props['thickness']?.toDouble() ?? _kScrollbarThickness,
      padding: props['padding'] ?? EdgeInsets.zero,
      mainAxisMargin: props['mainAxisMargin']?.toDouble() ?? 0.0,
      crossAxisMargin: props['crossAxisMargin']?.toDouble() ?? 0.0,
      radius: props['radius'],
      trackRadius: props['trackRadius'],
      shape: props['shape'],
      minLength: props['minLength']?.toDouble() ?? _kMinThumbExtent,
      minOverscrollLength: props['minOverscrollLength']?.toDouble(),
      scrollbarOrientation: props['scrollbarOrientation'],
      ignorePointer: props['ignorePointer'] ?? false),
  'ScrollbarTheme': (props) => ScrollbarTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'ScrollbarTheme.of': (props) => ScrollbarTheme.of(props['pa'][0]),
  'ScrollbarThemeData': (props) => ScrollbarThemeData(
      thumbVisibility: props['thumbVisibility'],
      thickness: props['thickness'],
      trackVisibility: props['trackVisibility'],
      radius: props['radius'],
      thumbColor: props['thumbColor'],
      trackColor: props['trackColor'],
      trackBorderColor: props['trackBorderColor'],
      crossAxisMargin: props['crossAxisMargin']?.toDouble(),
      mainAxisMargin: props['mainAxisMargin']?.toDouble(),
      minThumbLength: props['minThumbLength']?.toDouble(),
      interactive: props['interactive'],
      isAlwaysShown: props['isAlwaysShown'],
      showTrackOnHover: props['showTrackOnHover']),
  'ScrollbarThemeData.lerp': (props) => ScrollbarThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'SearchAnchor': (props) => SearchAnchor(
      key: props['key'],
      isFullScreen: props['isFullScreen'],
      searchController: props['searchController'],
      viewBuilder: props['viewBuilder'],
      viewLeading: props['viewLeading'],
      viewTrailing: props['viewTrailing'],
      viewHintText: props['viewHintText'],
      viewBackgroundColor: props['viewBackgroundColor'],
      viewElevation: props['viewElevation']?.toDouble(),
      viewSurfaceTintColor: props['viewSurfaceTintColor'],
      viewSide: props['viewSide'],
      viewShape: props['viewShape'],
      headerTextStyle: props['headerTextStyle'],
      headerHintStyle: props['headerHintStyle'],
      dividerColor: props['dividerColor'],
      viewConstraints: props['viewConstraints'],
      builder: props['builder'],
      suggestionsBuilder: props['suggestionsBuilder']),
  'SearchAnchor.bar': (props) => SearchAnchor.bar(
      barLeading: props['barLeading'],
      barTrailing: props['barTrailing'],
      barHintText: props['barHintText'],
      onTap: props['onTap'],
      barElevation: props['barElevation'],
      barBackgroundColor: props['barBackgroundColor'],
      barOverlayColor: props['barOverlayColor'],
      barSide: props['barSide'],
      barShape: props['barShape'],
      barPadding: props['barPadding'],
      barTextStyle: props['barTextStyle'],
      barHintStyle: props['barHintStyle'],
      viewLeading: props['viewLeading'],
      viewTrailing: props['viewTrailing'],
      viewHintText: props['viewHintText'],
      viewBackgroundColor: props['viewBackgroundColor'],
      viewElevation: props['viewElevation']?.toDouble(),
      viewSide: props['viewSide'],
      viewShape: props['viewShape'],
      viewHeaderTextStyle: props['viewHeaderTextStyle'],
      viewHeaderHintStyle: props['viewHeaderHintStyle'],
      dividerColor: props['dividerColor'],
      constraints: props['constraints'],
      viewConstraints: props['viewConstraints'],
      isFullScreen: props['isFullScreen'],
      searchController: props['searchController'],
      suggestionsBuilder: props['suggestionsBuilder']),
  'SearchBar': (props) => SearchBar(
      key: props['key'],
      controller: props['controller'],
      focusNode: props['focusNode'],
      hintText: props['hintText'],
      leading: props['leading'],
      trailing: props['trailing'],
      onTap: props['onTap'],
      onChanged: props['onChanged'],
      constraints: props['constraints'],
      elevation: props['elevation'],
      backgroundColor: props['backgroundColor'],
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      overlayColor: props['overlayColor'],
      side: props['side'],
      shape: props['shape'],
      padding: props['padding'],
      textStyle: props['textStyle'],
      hintStyle: props['hintStyle']),
  'SearchBarTheme': (props) => SearchBarTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'SearchBarTheme.of': (props) => SearchBarTheme.of(props['pa'][0]),
  'SearchBarThemeData': (props) => SearchBarThemeData(
      elevation: props['elevation'],
      backgroundColor: props['backgroundColor'],
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      overlayColor: props['overlayColor'],
      side: props['side'],
      shape: props['shape'],
      padding: props['padding'],
      textStyle: props['textStyle'],
      hintStyle: props['hintStyle'],
      constraints: props['constraints']),
  'SearchBarThemeData.lerp': (props) => SearchBarThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'SearchController': (props) => SearchController(),
  'SearchViewTheme': (props) => SearchViewTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'SearchViewTheme.of': (props) => SearchViewTheme.of(props['pa'][0]),
  'SearchViewThemeData': (props) => SearchViewThemeData(
      backgroundColor: props['backgroundColor'],
      elevation: props['elevation']?.toDouble(),
      surfaceTintColor: props['surfaceTintColor'],
      constraints: props['constraints'],
      side: props['side'],
      shape: props['shape'],
      headerTextStyle: props['headerTextStyle'],
      headerHintStyle: props['headerHintStyle'],
      dividerColor: props['dividerColor']),
  'SearchViewThemeData.lerp': (props) => SearchViewThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'SegmentedButton': (props) => SegmentedButton(
      key: props['key'],
      segments: as<ButtonSegment>(props['segments']) ?? const [],
      selected: props['selected'],
      onSelectionChanged: props['onSelectionChanged'],
      multiSelectionEnabled: props['multiSelectionEnabled'] ?? false,
      emptySelectionAllowed: props['emptySelectionAllowed'] ?? false,
      style: props['style'],
      showSelectedIcon: props['showSelectedIcon'] ?? true,
      selectedIcon: props['selectedIcon']),
  'SegmentedButtonTheme': (props) => SegmentedButtonTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'SegmentedButtonTheme.maybeOf': (props) =>
      SegmentedButtonTheme.maybeOf(props['pa'][0]),
  'SegmentedButtonTheme.of': (props) => SegmentedButtonTheme.of(props['pa'][0]),
  'SegmentedButtonThemeData': (props) => SegmentedButtonThemeData(
      style: props['style'], selectedIcon: props['selectedIcon']),
  'SegmentedButtonThemeData.lerp': (props) => SegmentedButtonThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'SelectAllSelectionEvent': (props) => const SelectAllSelectionEvent(),
  'SelectAllTextIntent': (props) => SelectAllTextIntent(props['pa'][0]),
  'SelectIntent': (props) => const SelectIntent(),
  'SelectWordSelectionEvent': (props) =>
      SelectWordSelectionEvent(globalPosition: props['globalPosition']),
  'SelectableRegion': (props) => SelectableRegion(
      key: props['key'],
      contextMenuBuilder: props['contextMenuBuilder'],
      focusNode: props['focusNode'],
      selectionControls: props['selectionControls'],
      child: props['child'],
      magnifierConfiguration: props['magnifierConfiguration'] ??
          TextMagnifierConfiguration.disabled,
      onSelectionChanged: props['onSelectionChanged']),
  'SelectableRegion.getSelectableButtonItems': (props) =>
      SelectableRegion.getSelectableButtonItems(
          selectionGeometry: props['selectionGeometry'],
          onCopy: props['onCopy'],
          onSelectAll: props['onSelectAll']),
  'SelectableText': (props) => SelectableText(props['pa'][0],
      key: props['key'],
      focusNode: props['focusNode'],
      style: props['style'],
      strutStyle: props['strutStyle'],
      textAlign: props['textAlign'],
      textDirection: props['textDirection'],
      textScaleFactor: props['textScaleFactor']?.toDouble(),
      showCursor: props['showCursor'] ?? false,
      autofocus: props['autofocus'] ?? false,
      toolbarOptions: props['toolbarOptions'],
      minLines: props['minLines'],
      maxLines: props['maxLines'],
      cursorWidth: props['cursorWidth']?.toDouble() ?? 2.0,
      cursorHeight: props['cursorHeight']?.toDouble(),
      cursorRadius: props['cursorRadius'],
      cursorColor: props['cursorColor'],
      selectionHeightStyle:
          props['selectionHeightStyle'] ?? ui.BoxHeightStyle.tight,
      selectionWidthStyle:
          props['selectionWidthStyle'] ?? ui.BoxWidthStyle.tight,
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      enableInteractiveSelection: props['enableInteractiveSelection'] ?? true,
      selectionControls: props['selectionControls'],
      onTap: props['onTap'],
      scrollPhysics: props['scrollPhysics'],
      semanticsLabel: props['semanticsLabel'],
      textHeightBehavior: props['textHeightBehavior'],
      textWidthBasis: props['textWidthBasis'],
      onSelectionChanged: props['onSelectionChanged'],
      contextMenuBuilder:
          props['contextMenuBuilder'] ?? _defaultContextMenuBuilder,
      magnifierConfiguration: props['magnifierConfiguration']),
  'SelectableText.rich': (props) => SelectableText.rich(props['pa'][0],
      key: props['key'],
      focusNode: props['focusNode'],
      style: props['style'],
      strutStyle: props['strutStyle'],
      textAlign: props['textAlign'],
      textDirection: props['textDirection'],
      textScaleFactor: props['textScaleFactor']?.toDouble(),
      showCursor: props['showCursor'] ?? false,
      autofocus: props['autofocus'] ?? false,
      toolbarOptions: props['toolbarOptions'],
      minLines: props['minLines'],
      maxLines: props['maxLines'],
      cursorWidth: props['cursorWidth']?.toDouble() ?? 2.0,
      cursorHeight: props['cursorHeight']?.toDouble(),
      cursorRadius: props['cursorRadius'],
      cursorColor: props['cursorColor'],
      selectionHeightStyle:
          props['selectionHeightStyle'] ?? ui.BoxHeightStyle.tight,
      selectionWidthStyle:
          props['selectionWidthStyle'] ?? ui.BoxWidthStyle.tight,
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      enableInteractiveSelection: props['enableInteractiveSelection'] ?? true,
      selectionControls: props['selectionControls'],
      onTap: props['onTap'],
      scrollPhysics: props['scrollPhysics'],
      semanticsLabel: props['semanticsLabel'],
      textHeightBehavior: props['textHeightBehavior'],
      textWidthBasis: props['textWidthBasis'],
      onSelectionChanged: props['onSelectionChanged'],
      contextMenuBuilder:
          props['contextMenuBuilder'] ?? _defaultContextMenuBuilder,
      magnifierConfiguration: props['magnifierConfiguration']),
  'SelectedContent': (props) => SelectedContent(plainText: props['plainText']),
  'SelectionArea': (props) => SelectionArea(
      key: props['key'],
      focusNode: props['focusNode'],
      selectionControls: props['selectionControls'],
      contextMenuBuilder:
          props['contextMenuBuilder'] ?? _defaultContextMenuBuilder,
      magnifierConfiguration: props['magnifierConfiguration'],
      onSelectionChanged: props['onSelectionChanged'],
      child: props['child']),
  'SelectionChangedCause.doubleTap': SelectionChangedCause.doubleTap,
  'SelectionChangedCause.drag': SelectionChangedCause.drag,
  'SelectionChangedCause.forcePress': SelectionChangedCause.forcePress,
  'SelectionChangedCause.keyboard': SelectionChangedCause.keyboard,
  'SelectionChangedCause.longPress': SelectionChangedCause.longPress,
  'SelectionChangedCause.scribble': SelectionChangedCause.scribble,
  'SelectionChangedCause.tap': SelectionChangedCause.tap,
  'SelectionChangedCause.toolbar': SelectionChangedCause.toolbar,
  'SelectionChangedCause.values': SelectionChangedCause.values,
  'SelectionContainer': (props) => SelectionContainer(
      key: props['key'],
      registrar: props['registrar'],
      delegate: props['delegate'],
      child: props['child']),
  'SelectionContainer.disabled': (props) =>
      SelectionContainer.disabled(key: props['key'], child: props['child']),
  'SelectionContainer.maybeOf': (props) =>
      SelectionContainer.maybeOf(props['pa'][0]),
  'SelectionEdgeUpdateEvent.forEnd': (props) =>
      SelectionEdgeUpdateEvent.forEnd(globalPosition: props['globalPosition']),
  'SelectionEdgeUpdateEvent.forStart': (props) =>
      SelectionEdgeUpdateEvent.forStart(
          globalPosition: props['globalPosition']),
  'SelectionEventType.clear': SelectionEventType.clear,
  'SelectionEventType.directionallyExtendSelection':
      SelectionEventType.directionallyExtendSelection,
  'SelectionEventType.endEdgeUpdate': SelectionEventType.endEdgeUpdate,
  'SelectionEventType.granularlyExtendSelection':
      SelectionEventType.granularlyExtendSelection,
  'SelectionEventType.selectAll': SelectionEventType.selectAll,
  'SelectionEventType.selectWord': SelectionEventType.selectWord,
  'SelectionEventType.startEdgeUpdate': SelectionEventType.startEdgeUpdate,
  'SelectionEventType.values': SelectionEventType.values,
  'SelectionExtendDirection.backward': SelectionExtendDirection.backward,
  'SelectionExtendDirection.forward': SelectionExtendDirection.forward,
  'SelectionExtendDirection.nextLine': SelectionExtendDirection.nextLine,
  'SelectionExtendDirection.previousLine':
      SelectionExtendDirection.previousLine,
  'SelectionExtendDirection.values': SelectionExtendDirection.values,
  'SelectionGeometry': (props) => SelectionGeometry(
      startSelectionPoint: props['startSelectionPoint'],
      endSelectionPoint: props['endSelectionPoint'],
      status: props['status'],
      hasContent: props['hasContent']),
  'SelectionOverlay': (props) => SelectionOverlay(
      context: props['context'],
      debugRequiredFor: props['debugRequiredFor'],
      startHandleType: props['startHandleType'],
      lineHeightAtStart: props['lineHeightAtStart']?.toDouble() ?? 0,
      startHandlesVisible: props['startHandlesVisible'],
      onStartHandleDragStart: props['onStartHandleDragStart'],
      onStartHandleDragUpdate: props['onStartHandleDragUpdate'],
      onStartHandleDragEnd: props['onStartHandleDragEnd'],
      endHandleType: props['endHandleType'],
      lineHeightAtEnd: props['lineHeightAtEnd']?.toDouble() ?? 0,
      endHandlesVisible: props['endHandlesVisible'],
      onEndHandleDragStart: props['onEndHandleDragStart'],
      onEndHandleDragUpdate: props['onEndHandleDragUpdate'],
      onEndHandleDragEnd: props['onEndHandleDragEnd'],
      toolbarVisible: props['toolbarVisible'],
      selectionEndpoints:
          as<TextSelectionPoint>(props['selectionEndpoints']) ?? const [],
      selectionControls: props['selectionControls'],
      selectionDelegate: props['selectionDelegate'],
      clipboardStatus: props['clipboardStatus'],
      startHandleLayerLink: props['startHandleLayerLink'],
      endHandleLayerLink: props['endHandleLayerLink'],
      toolbarLayerLink: props['toolbarLayerLink'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      onSelectionHandleTapped: props['onSelectionHandleTapped'],
      toolbarLocation: props['toolbarLocation'],
      magnifierConfiguration: props['magnifierConfiguration'] ??
          TextMagnifierConfiguration.disabled),
  'SelectionOverlay.fadeDuration': SelectionOverlay.fadeDuration,
  'SelectionPoint': (props) => SelectionPoint(
      localPosition: props['localPosition'],
      lineHeight: props['lineHeight']?.toDouble() ?? 0,
      handleType: props['handleType']),
  'SelectionRect': (props) => SelectionRect(
      position: props['position'],
      bounds: props['bounds'],
      direction: props['direction'] ?? TextDirection.ltr),
  'SelectionRegistrarScope': (props) => SelectionRegistrarScope(
      key: props['key'], registrar: props['registrar'], child: props['child']),
  'SelectionResult.end': SelectionResult.end,
  'SelectionResult.next': SelectionResult.next,
  'SelectionResult.none': SelectionResult.none,
  'SelectionResult.pending': SelectionResult.pending,
  'SelectionResult.previous': SelectionResult.previous,
  'SelectionResult.values': SelectionResult.values,
  'SelectionStatus.collapsed': SelectionStatus.collapsed,
  'SelectionStatus.none': SelectionStatus.none,
  'SelectionStatus.uncollapsed': SelectionStatus.uncollapsed,
  'SelectionStatus.values': SelectionStatus.values,
  'Semantics': (props) => Semantics(
      key: props['key'],
      child: props['child'],
      container: props['container'] ?? false,
      explicitChildNodes: props['explicitChildNodes'] ?? false,
      excludeSemantics: props['excludeSemantics'] ?? false,
      blockUserActions: props['blockUserActions'] ?? false,
      enabled: props['enabled'],
      checked: props['checked'],
      mixed: props['mixed'],
      selected: props['selected'],
      toggled: props['toggled'],
      button: props['button'],
      slider: props['slider'],
      keyboardKey: props['keyboardKey'],
      link: props['link'],
      header: props['header'],
      textField: props['textField'],
      readOnly: props['readOnly'],
      focusable: props['focusable'],
      focused: props['focused'],
      inMutuallyExclusiveGroup: props['inMutuallyExclusiveGroup'],
      obscured: props['obscured'],
      multiline: props['multiline'],
      scopesRoute: props['scopesRoute'],
      namesRoute: props['namesRoute'],
      hidden: props['hidden'],
      image: props['image'],
      liveRegion: props['liveRegion'],
      maxValueLength: props['maxValueLength'],
      currentValueLength: props['currentValueLength'],
      label: props['label'],
      attributedLabel: props['attributedLabel'],
      value: props['value'],
      attributedValue: props['attributedValue'],
      increasedValue: props['increasedValue'],
      attributedIncreasedValue: props['attributedIncreasedValue'],
      decreasedValue: props['decreasedValue'],
      attributedDecreasedValue: props['attributedDecreasedValue'],
      hint: props['hint'],
      attributedHint: props['attributedHint'],
      tooltip: props['tooltip'],
      onTapHint: props['onTapHint'],
      onLongPressHint: props['onLongPressHint'],
      textDirection: props['textDirection'],
      sortKey: props['sortKey'],
      tagForChildren: props['tagForChildren'],
      onTap: props['onTap'],
      onLongPress: props['onLongPress'],
      onScrollLeft: props['onScrollLeft'],
      onScrollRight: props['onScrollRight'],
      onScrollUp: props['onScrollUp'],
      onScrollDown: props['onScrollDown'],
      onIncrease: props['onIncrease'],
      onDecrease: props['onDecrease'],
      onCopy: props['onCopy'],
      onCut: props['onCut'],
      onPaste: props['onPaste'],
      onDismiss: props['onDismiss'],
      onMoveCursorForwardByCharacter: props['onMoveCursorForwardByCharacter'],
      onMoveCursorBackwardByCharacter: props['onMoveCursorBackwardByCharacter'],
      onSetSelection: props['onSetSelection'],
      onSetText: props['onSetText'],
      onDidGainAccessibilityFocus: props['onDidGainAccessibilityFocus'],
      onDidLoseAccessibilityFocus: props['onDidLoseAccessibilityFocus'],
      customSemanticsActions: props['customSemanticsActions']),
  'Semantics.fromProperties': (props) => Semantics.fromProperties(
      key: props['key'],
      child: props['child'],
      container: props['container'] ?? false,
      explicitChildNodes: props['explicitChildNodes'] ?? false,
      excludeSemantics: props['excludeSemantics'] ?? false,
      blockUserActions: props['blockUserActions'] ?? false,
      properties: props['properties']),
  'SemanticsAction.copy': SemanticsAction.copy,
  'SemanticsAction.customAction': SemanticsAction.customAction,
  'SemanticsAction.cut': SemanticsAction.cut,
  'SemanticsAction.decrease': SemanticsAction.decrease,
  'SemanticsAction.didGainAccessibilityFocus':
      SemanticsAction.didGainAccessibilityFocus,
  'SemanticsAction.didLoseAccessibilityFocus':
      SemanticsAction.didLoseAccessibilityFocus,
  'SemanticsAction.dismiss': SemanticsAction.dismiss,
  'SemanticsAction.fromIndex': (props) =>
      SemanticsAction.fromIndex(props['pa'][0]),
  'SemanticsAction.increase': SemanticsAction.increase,
  'SemanticsAction.longPress': SemanticsAction.longPress,
  'SemanticsAction.moveCursorBackwardByCharacter':
      SemanticsAction.moveCursorBackwardByCharacter,
  'SemanticsAction.moveCursorBackwardByWord':
      SemanticsAction.moveCursorBackwardByWord,
  'SemanticsAction.moveCursorForwardByCharacter':
      SemanticsAction.moveCursorForwardByCharacter,
  'SemanticsAction.moveCursorForwardByWord':
      SemanticsAction.moveCursorForwardByWord,
  'SemanticsAction.paste': SemanticsAction.paste,
  'SemanticsAction.scrollDown': SemanticsAction.scrollDown,
  'SemanticsAction.scrollLeft': SemanticsAction.scrollLeft,
  'SemanticsAction.scrollRight': SemanticsAction.scrollRight,
  'SemanticsAction.scrollUp': SemanticsAction.scrollUp,
  'SemanticsAction.setSelection': SemanticsAction.setSelection,
  'SemanticsAction.setText': SemanticsAction.setText,
  'SemanticsAction.showOnScreen': SemanticsAction.showOnScreen,
  'SemanticsAction.tap': SemanticsAction.tap,
  'SemanticsAction.values': SemanticsAction.values,
  'SemanticsActionEvent': (props) => SemanticsActionEvent(
      type: props['type'],
      nodeId: props['nodeId'],
      arguments: props['arguments']),
  'SemanticsConfiguration': (props) => SemanticsConfiguration(),
  'SemanticsData': (props) => SemanticsData(
      flags: props['flags'],
      actions: props['actions'],
      attributedLabel: props['attributedLabel'],
      attributedValue: props['attributedValue'],
      attributedIncreasedValue: props['attributedIncreasedValue'],
      attributedDecreasedValue: props['attributedDecreasedValue'],
      attributedHint: props['attributedHint'],
      tooltip: props['tooltip'],
      textDirection: props['textDirection'],
      rect: props['rect'],
      elevation: props['elevation']?.toDouble() ?? 0,
      thickness: props['thickness']?.toDouble() ?? 0,
      textSelection: props['textSelection'],
      scrollIndex: props['scrollIndex'],
      scrollChildCount: props['scrollChildCount'],
      scrollPosition: props['scrollPosition']?.toDouble() ?? 0,
      scrollExtentMax: props['scrollExtentMax']?.toDouble() ?? 0,
      scrollExtentMin: props['scrollExtentMin']?.toDouble() ?? 0,
      platformViewId: props['platformViewId'],
      maxValueLength: props['maxValueLength'],
      currentValueLength: props['currentValueLength'],
      tags: props['tags'],
      transform: props['transform'],
      customSemanticsActionIds: as<int>(props['customSemanticsActionIds'])),
  'SemanticsDebugger': (props) => SemanticsDebugger(
      key: props['key'],
      child: props['child'],
      labelStyle: props['labelStyle'] ??
          const TextStyle(
              color: Color(0xFF000000), fontSize: 10.0, height: 0.8)),
  'SemanticsFlag.fromIndex': (props) => SemanticsFlag.fromIndex(props['pa'][0]),
  'SemanticsFlag.hasCheckedState': SemanticsFlag.hasCheckedState,
  'SemanticsFlag.hasEnabledState': SemanticsFlag.hasEnabledState,
  'SemanticsFlag.hasImplicitScrolling': SemanticsFlag.hasImplicitScrolling,
  'SemanticsFlag.hasToggledState': SemanticsFlag.hasToggledState,
  'SemanticsFlag.isButton': SemanticsFlag.isButton,
  'SemanticsFlag.isCheckStateMixed': SemanticsFlag.isCheckStateMixed,
  'SemanticsFlag.isChecked': SemanticsFlag.isChecked,
  'SemanticsFlag.isEnabled': SemanticsFlag.isEnabled,
  'SemanticsFlag.isFocusable': SemanticsFlag.isFocusable,
  'SemanticsFlag.isFocused': SemanticsFlag.isFocused,
  'SemanticsFlag.isHeader': SemanticsFlag.isHeader,
  'SemanticsFlag.isHidden': SemanticsFlag.isHidden,
  'SemanticsFlag.isImage': SemanticsFlag.isImage,
  'SemanticsFlag.isInMutuallyExclusiveGroup':
      SemanticsFlag.isInMutuallyExclusiveGroup,
  'SemanticsFlag.isKeyboardKey': SemanticsFlag.isKeyboardKey,
  'SemanticsFlag.isLink': SemanticsFlag.isLink,
  'SemanticsFlag.isLiveRegion': SemanticsFlag.isLiveRegion,
  'SemanticsFlag.isMultiline': SemanticsFlag.isMultiline,
  'SemanticsFlag.isObscured': SemanticsFlag.isObscured,
  'SemanticsFlag.isReadOnly': SemanticsFlag.isReadOnly,
  'SemanticsFlag.isSelected': SemanticsFlag.isSelected,
  'SemanticsFlag.isSlider': SemanticsFlag.isSlider,
  'SemanticsFlag.isTextField': SemanticsFlag.isTextField,
  'SemanticsFlag.isToggled': SemanticsFlag.isToggled,
  'SemanticsFlag.namesRoute': SemanticsFlag.namesRoute,
  'SemanticsFlag.scopesRoute': SemanticsFlag.scopesRoute,
  'SemanticsFlag.values': SemanticsFlag.values,
  'SemanticsHintOverrides': (props) => SemanticsHintOverrides(
      onTapHint: props['onTapHint'], onLongPressHint: props['onLongPressHint']),
  'SemanticsNode': (props) =>
      SemanticsNode(key: props['key'], showOnScreen: props['showOnScreen']),
  'SemanticsNode.root': (props) => SemanticsNode.root(
      key: props['key'],
      showOnScreen: props['showOnScreen'],
      owner: props['owner']),
  'SemanticsOwner': (props) =>
      SemanticsOwner(onSemanticsUpdate: props['onSemanticsUpdate']),
  'SemanticsProperties': (props) => SemanticsProperties(
      enabled: props['enabled'],
      checked: props['checked'],
      mixed: props['mixed'],
      selected: props['selected'],
      toggled: props['toggled'],
      button: props['button'],
      link: props['link'],
      header: props['header'],
      textField: props['textField'],
      slider: props['slider'],
      keyboardKey: props['keyboardKey'],
      readOnly: props['readOnly'],
      focusable: props['focusable'],
      focused: props['focused'],
      inMutuallyExclusiveGroup: props['inMutuallyExclusiveGroup'],
      hidden: props['hidden'],
      obscured: props['obscured'],
      multiline: props['multiline'],
      scopesRoute: props['scopesRoute'],
      namesRoute: props['namesRoute'],
      image: props['image'],
      liveRegion: props['liveRegion'],
      maxValueLength: props['maxValueLength'],
      currentValueLength: props['currentValueLength'],
      label: props['label'],
      attributedLabel: props['attributedLabel'],
      value: props['value'],
      attributedValue: props['attributedValue'],
      increasedValue: props['increasedValue'],
      attributedIncreasedValue: props['attributedIncreasedValue'],
      decreasedValue: props['decreasedValue'],
      attributedDecreasedValue: props['attributedDecreasedValue'],
      hint: props['hint'],
      tooltip: props['tooltip'],
      attributedHint: props['attributedHint'],
      hintOverrides: props['hintOverrides'],
      textDirection: props['textDirection'],
      sortKey: props['sortKey'],
      tagForChildren: props['tagForChildren'],
      onTap: props['onTap'],
      onLongPress: props['onLongPress'],
      onScrollLeft: props['onScrollLeft'],
      onScrollRight: props['onScrollRight'],
      onScrollUp: props['onScrollUp'],
      onScrollDown: props['onScrollDown'],
      onIncrease: props['onIncrease'],
      onDecrease: props['onDecrease'],
      onCopy: props['onCopy'],
      onCut: props['onCut'],
      onPaste: props['onPaste'],
      onMoveCursorForwardByCharacter: props['onMoveCursorForwardByCharacter'],
      onMoveCursorBackwardByCharacter: props['onMoveCursorBackwardByCharacter'],
      onMoveCursorForwardByWord: props['onMoveCursorForwardByWord'],
      onMoveCursorBackwardByWord: props['onMoveCursorBackwardByWord'],
      onSetSelection: props['onSetSelection'],
      onSetText: props['onSetText'],
      onDidGainAccessibilityFocus: props['onDidGainAccessibilityFocus'],
      onDidLoseAccessibilityFocus: props['onDidLoseAccessibilityFocus'],
      onDismiss: props['onDismiss'],
      customSemanticsActions: props['customSemanticsActions']),
  'SemanticsTag': (props) => SemanticsTag(props['pa'][0]),
  'SerialTapCancelDetails': (props) =>
      SerialTapCancelDetails(count: props['count'] ?? 1),
  'SerialTapDownDetails': (props) => SerialTapDownDetails(
      globalPosition: props['globalPosition'] ?? Offset.zero,
      localPosition: props['localPosition'],
      kind: props['kind'],
      buttons: props['buttons'] ?? 0,
      count: props['count'] ?? 1),
  'SerialTapGestureRecognizer': (props) => SerialTapGestureRecognizer(
      debugOwner: props['debugOwner'],
      supportedDevices: props['supportedDevices'],
      allowedButtonsFilter: props['allowedButtonsFilter']),
  'SerialTapUpDetails': (props) => SerialTapUpDetails(
      globalPosition: props['globalPosition'] ?? Offset.zero,
      localPosition: props['localPosition'],
      kind: props['kind'],
      count: props['count'] ?? 1),
  'ServicesServiceExtensions.evict': ServicesServiceExtensions.evict,
  'ServicesServiceExtensions.values': ServicesServiceExtensions.values,
  'ShaderMask': (props) => ShaderMask(
      key: props['key'],
      shaderCallback: props['shaderCallback'],
      blendMode: props['blendMode'] ?? BlendMode.modulate,
      child: props['child']),
  'ShaderMaskLayer': (props) => ShaderMaskLayer(
      shader: props['shader'],
      maskRect: props['maskRect'],
      blendMode: props['blendMode']),
  'Shadow': (props) => Shadow(
      color: props['color'] ?? const Color(_kColorDefault),
      offset: props['offset'] ?? Offset.zero,
      blurRadius: props['blurRadius']?.toDouble() ?? 0.0),
  'Shadow.convertRadiusToSigma': (props) =>
      Shadow.convertRadiusToSigma(props['pa'][0]?.toDouble()),
  'Shadow.lerp': (props) =>
      Shadow.lerp(props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'Shadow.lerpList': (props) => Shadow.lerpList(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'ShapeBorderClipper': (props) => ShapeBorderClipper(
      shape: props['shape'], textDirection: props['textDirection']),
  'ShapeBorderTween': (props) =>
      ShapeBorderTween(begin: props['begin'], end: props['end']),
  'ShapeDecoration': (props) => ShapeDecoration(
      color: props['color'],
      image: props['image'],
      gradient: props['gradient'],
      shadows: as<BoxShadow>(props['shadows']),
      shape: props['shape']),
  'ShapeDecoration.fromBoxDecoration': (props) =>
      ShapeDecoration.fromBoxDecoration(props['pa'][0]),
  'ShapeDecoration.lerp': (props) => ShapeDecoration.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'SharedAppData': (props) =>
      SharedAppData(key: props['key'], child: props['child']),
  'SharedAppData.getValue': (props) => SharedAppData.getValue<Object, dynamic>(
      props['pa'][0], props['pa'][1], props['pa'][2]),
  'SharedAppData.setValue': (props) => SharedAppData.setValue<Object, dynamic>(
      props['pa'][0], props['pa'][1], props['pa'][2]),
  'ShortcutManager': (props) => ShortcutManager(
      shortcuts: props['shortcuts'] ?? const <ShortcutActivator, Intent>{},
      modal: props['modal'] ?? false),
  'ShortcutMapProperty': (props) => ShortcutMapProperty(
      props['pa'][0], props['pa'][1],
      showName: props['showName'] ?? true,
      defaultValue: props['defaultValue'] ?? kNoDefaultValue,
      level: props['level'] ?? DiagnosticLevel.info,
      description: props['description']),
  'ShortcutRegistrar': (props) =>
      ShortcutRegistrar(key: props['key'], child: props['child']),
  'ShortcutRegistry': (props) => ShortcutRegistry(),
  'ShortcutRegistry.maybeOf': (props) =>
      ShortcutRegistry.maybeOf(props['pa'][0]),
  'ShortcutRegistry.of': (props) => ShortcutRegistry.of(props['pa'][0]),
  'ShortcutSerialization.character': (props) => ShortcutSerialization.character(
      props['pa'][0],
      alt: props['alt'] ?? false,
      control: props['control'] ?? false,
      meta: props['meta'] ?? false),
  'ShortcutSerialization.modifier': (props) => ShortcutSerialization.modifier(
      props['pa'][0],
      alt: props['alt'] ?? false,
      control: props['control'] ?? false,
      meta: props['meta'] ?? false,
      shift: props['shift'] ?? false),
  'Shortcuts': (props) => Shortcuts(
      key: props['key'],
      shortcuts: props['shortcuts'],
      child: props['child'],
      debugLabel: props['debugLabel']),
  'Shortcuts.manager': (props) => Shortcuts.manager(
      key: props['key'],
      manager: props['manager'],
      child: props['child'],
      debugLabel: props['debugLabel']),
  'ShowValueIndicator.always': ShowValueIndicator.always,
  'ShowValueIndicator.never': ShowValueIndicator.never,
  'ShowValueIndicator.onlyForContinuous': ShowValueIndicator.onlyForContinuous,
  'ShowValueIndicator.onlyForDiscrete': ShowValueIndicator.onlyForDiscrete,
  'ShowValueIndicator.values': ShowValueIndicator.values,
  'ShrinkWrappingViewport': (props) => ShrinkWrappingViewport(
      key: props['key'],
      axisDirection: props['axisDirection'] ?? AxisDirection.down,
      crossAxisDirection: props['crossAxisDirection'],
      offset: props['offset'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      slivers: as<Widget>(props['slivers']) ?? const <Widget>[]),
  'SimpleDialog': (props) => SimpleDialog(
      key: props['key'],
      title: props['title'],
      titlePadding: props['titlePadding'] ??
          const EdgeInsets.fromLTRB(24.0, 24.0, 24.0, 0.0),
      titleTextStyle: props['titleTextStyle'],
      children: as<Widget>(props['children']),
      contentPadding: props['contentPadding'] ??
          const EdgeInsets.fromLTRB(0.0, 12.0, 0.0, 16.0),
      backgroundColor: props['backgroundColor'],
      elevation: props['elevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      semanticLabel: props['semanticLabel'],
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      shape: props['shape'],
      alignment: props['alignment']),
  'SimpleDialogOption': (props) => SimpleDialogOption(
      key: props['key'],
      onPressed: props['onPressed'],
      padding: props['padding'],
      child: props['child']),
  'SingleActivator': (props) => SingleActivator(props['pa'][0],
      control: props['control'] ?? false,
      shift: props['shift'] ?? false,
      alt: props['alt'] ?? false,
      meta: props['meta'] ?? false,
      includeRepeats: props['includeRepeats'] ?? true),
  'SingleChildRenderObjectElement': (props) =>
      SingleChildRenderObjectElement(props['pa'][0]),
  'SingleChildScrollView': (props) => SingleChildScrollView(
      key: props['key'],
      scrollDirection: props['scrollDirection'] ?? Axis.vertical,
      reverse: props['reverse'] ?? false,
      padding: props['padding'],
      primary: props['primary'],
      physics: props['physics'],
      controller: props['controller'],
      child: props['child'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      restorationId: props['restorationId'],
      keyboardDismissBehavior: props['keyboardDismissBehavior'] ??
          ScrollViewKeyboardDismissBehavior.manual),
  'Size': (props) =>
      Size(props['pa'][0]?.toDouble(), props['pa'][1]?.toDouble()),
  'Size.copy': (props) => Size.copy(props['pa'][0]),
  'Size.fromHeight': (props) => Size.fromHeight(props['pa'][0]?.toDouble()),
  'Size.fromRadius': (props) => Size.fromRadius(props['pa'][0]?.toDouble()),
  'Size.fromWidth': (props) => Size.fromWidth(props['pa'][0]?.toDouble()),
  'Size.infinite': Size.infinite,
  'Size.lerp': (props) =>
      Size.lerp(props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'Size.square': (props) => Size.square(props['pa'][0]?.toDouble()),
  'Size.zero': Size.zero,
  'SizeChangedLayoutNotification': (props) =>
      const SizeChangedLayoutNotification(),
  'SizeChangedLayoutNotifier': (props) =>
      SizeChangedLayoutNotifier(key: props['key'], child: props['child']),
  'SizeTransition': (props) => SizeTransition(
      key: props['key'],
      axis: props['axis'] ?? Axis.vertical,
      sizeFactor: props['sizeFactor'],
      axisAlignment: props['axisAlignment']?.toDouble() ?? 0.0,
      child: props['child']),
  'SizeTween': (props) => SizeTween(begin: props['begin'], end: props['end']),
  'SizedBox': (props) => SizedBox(
      key: props['key'],
      width: props['width']?.toDouble(),
      height: props['height']?.toDouble(),
      child: props['child']),
  'SizedBox.expand': (props) =>
      SizedBox.expand(key: props['key'], child: props['child']),
  'SizedBox.fromSize': (props) => SizedBox.fromSize(
      key: props['key'], child: props['child'], size: props['size']),
  'SizedBox.shrink': (props) =>
      SizedBox.shrink(key: props['key'], child: props['child']),
  'SizedBox.square': (props) => SizedBox.square(
      key: props['key'],
      child: props['child'],
      dimension: props['dimension']?.toDouble()),
  'SizedOverflowBox': (props) => SizedOverflowBox(
      key: props['key'],
      size: props['size'],
      alignment: props['alignment'] ?? Alignment.center,
      child: props['child']),
  'SlideTransition': (props) => SlideTransition(
      key: props['key'],
      position: props['position'],
      transformHitTests: props['transformHitTests'] ?? true,
      textDirection: props['textDirection'],
      child: props['child']),
  'Slider': (props) => Slider(
      key: props['key'],
      value: props['value']?.toDouble() ?? 0,
      secondaryTrackValue: props['secondaryTrackValue']?.toDouble(),
      onChanged: props['onChanged'],
      onChangeStart: props['onChangeStart'],
      onChangeEnd: props['onChangeEnd'],
      min: props['min']?.toDouble() ?? 0.0,
      max: props['max']?.toDouble() ?? 1.0,
      divisions: props['divisions'],
      label: props['label'],
      activeColor: props['activeColor'],
      inactiveColor: props['inactiveColor'],
      secondaryActiveColor: props['secondaryActiveColor'],
      thumbColor: props['thumbColor'],
      overlayColor: props['overlayColor'],
      mouseCursor: props['mouseCursor'],
      semanticFormatterCallback: props['semanticFormatterCallback'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      allowedInteraction: props['allowedInteraction']),
  'Slider.adaptive': (props) => Slider.adaptive(
      key: props['key'],
      value: props['value']?.toDouble() ?? 0,
      secondaryTrackValue: props['secondaryTrackValue']?.toDouble(),
      onChanged: props['onChanged'],
      onChangeStart: props['onChangeStart'],
      onChangeEnd: props['onChangeEnd'],
      min: props['min']?.toDouble() ?? 0.0,
      max: props['max']?.toDouble() ?? 1.0,
      divisions: props['divisions'],
      label: props['label'],
      mouseCursor: props['mouseCursor'],
      activeColor: props['activeColor'],
      inactiveColor: props['inactiveColor'],
      secondaryActiveColor: props['secondaryActiveColor'],
      thumbColor: props['thumbColor'],
      overlayColor: props['overlayColor'],
      semanticFormatterCallback: props['semanticFormatterCallback'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      allowedInteraction: props['allowedInteraction']),
  'SliderInteraction.slideOnly': SliderInteraction.slideOnly,
  'SliderInteraction.slideThumb': SliderInteraction.slideThumb,
  'SliderInteraction.tapAndSlide': SliderInteraction.tapAndSlide,
  'SliderInteraction.tapOnly': SliderInteraction.tapOnly,
  'SliderInteraction.values': SliderInteraction.values,
  'SliderTheme': (props) => SliderTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'SliderTheme.of': (props) => SliderTheme.of(props['pa'][0]),
  'SliderThemeData': (props) => SliderThemeData(
      trackHeight: props['trackHeight']?.toDouble(),
      activeTrackColor: props['activeTrackColor'],
      inactiveTrackColor: props['inactiveTrackColor'],
      secondaryActiveTrackColor: props['secondaryActiveTrackColor'],
      disabledActiveTrackColor: props['disabledActiveTrackColor'],
      disabledInactiveTrackColor: props['disabledInactiveTrackColor'],
      disabledSecondaryActiveTrackColor:
          props['disabledSecondaryActiveTrackColor'],
      activeTickMarkColor: props['activeTickMarkColor'],
      inactiveTickMarkColor: props['inactiveTickMarkColor'],
      disabledActiveTickMarkColor: props['disabledActiveTickMarkColor'],
      disabledInactiveTickMarkColor: props['disabledInactiveTickMarkColor'],
      thumbColor: props['thumbColor'],
      overlappingShapeStrokeColor: props['overlappingShapeStrokeColor'],
      disabledThumbColor: props['disabledThumbColor'],
      overlayColor: props['overlayColor'],
      valueIndicatorColor: props['valueIndicatorColor'],
      overlayShape: props['overlayShape'],
      tickMarkShape: props['tickMarkShape'],
      thumbShape: props['thumbShape'],
      trackShape: props['trackShape'],
      valueIndicatorShape: props['valueIndicatorShape'],
      rangeTickMarkShape: props['rangeTickMarkShape'],
      rangeThumbShape: props['rangeThumbShape'],
      rangeTrackShape: props['rangeTrackShape'],
      rangeValueIndicatorShape: props['rangeValueIndicatorShape'],
      showValueIndicator: props['showValueIndicator'],
      valueIndicatorTextStyle: props['valueIndicatorTextStyle'],
      minThumbSeparation: props['minThumbSeparation']?.toDouble(),
      thumbSelector: props['thumbSelector'],
      mouseCursor: props['mouseCursor'],
      allowedInteraction: props['allowedInteraction']),
  'SliderThemeData.fromPrimaryColors': (props) =>
      SliderThemeData.fromPrimaryColors(
          primaryColor: props['primaryColor'],
          primaryColorDark: props['primaryColorDark'],
          primaryColorLight: props['primaryColorLight'],
          valueIndicatorTextStyle: props['valueIndicatorTextStyle']),
  'SliderThemeData.lerp': (props) => SliderThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'SliverAnimatedGrid': (props) => SliverAnimatedGrid(
      key: props['key'],
      itemBuilder: props['itemBuilder'],
      gridDelegate: props['gridDelegate'],
      findChildIndexCallback: props['findChildIndexCallback'],
      initialItemCount: props['initialItemCount'] ?? 0),
  'SliverAnimatedGrid.maybeOf': (props) =>
      SliverAnimatedGrid.maybeOf(props['pa'][0]),
  'SliverAnimatedGrid.of': (props) => SliverAnimatedGrid.of(props['pa'][0]),
  'SliverAnimatedList': (props) => SliverAnimatedList(
      key: props['key'],
      itemBuilder: props['itemBuilder'],
      findChildIndexCallback: props['findChildIndexCallback'],
      initialItemCount: props['initialItemCount'] ?? 0),
  'SliverAnimatedList.maybeOf': (props) =>
      SliverAnimatedList.maybeOf(props['pa'][0]),
  'SliverAnimatedList.of': (props) => SliverAnimatedList.of(props['pa'][0]),
  'SliverAnimatedOpacity': (props) => SliverAnimatedOpacity(
      key: props['key'],
      sliver: props['sliver'],
      opacity: props['opacity']?.toDouble() ?? 0,
      curve: props['curve'] ?? Curves.linear,
      duration: props['duration'],
      onEnd: props['onEnd'],
      alwaysIncludeSemantics: props['alwaysIncludeSemantics'] ?? false),
  'SliverAppBar': (props) => SliverAppBar(
      key: props['key'],
      leading: props['leading'],
      automaticallyImplyLeading: props['automaticallyImplyLeading'] ?? true,
      title: props['title'],
      actions: as<Widget>(props['actions']),
      flexibleSpace: props['flexibleSpace'],
      bottom: props['bottom'],
      elevation: props['elevation']?.toDouble(),
      scrolledUnderElevation: props['scrolledUnderElevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      forceElevated: props['forceElevated'] ?? false,
      backgroundColor: props['backgroundColor'],
      foregroundColor: props['foregroundColor'],
      iconTheme: props['iconTheme'],
      actionsIconTheme: props['actionsIconTheme'],
      primary: props['primary'] ?? true,
      centerTitle: props['centerTitle'],
      excludeHeaderSemantics: props['excludeHeaderSemantics'] ?? false,
      titleSpacing: props['titleSpacing']?.toDouble(),
      collapsedHeight: props['collapsedHeight']?.toDouble(),
      expandedHeight: props['expandedHeight']?.toDouble(),
      floating: props['floating'] ?? false,
      pinned: props['pinned'] ?? false,
      snap: props['snap'] ?? false,
      stretch: props['stretch'] ?? false,
      stretchTriggerOffset: props['stretchTriggerOffset']?.toDouble() ?? 100.0,
      onStretchTrigger: props['onStretchTrigger'],
      shape: props['shape'],
      toolbarHeight: props['toolbarHeight']?.toDouble() ?? kToolbarHeight,
      leadingWidth: props['leadingWidth']?.toDouble(),
      toolbarTextStyle: props['toolbarTextStyle'],
      titleTextStyle: props['titleTextStyle'],
      systemOverlayStyle: props['systemOverlayStyle'],
      forceMaterialTransparency: props['forceMaterialTransparency'] ?? false,
      clipBehavior: props['clipBehavior']),
  'SliverAppBar.large': (props) => SliverAppBar.large(
      key: props['key'],
      leading: props['leading'],
      automaticallyImplyLeading: props['automaticallyImplyLeading'] ?? true,
      title: props['title'],
      actions: as<Widget>(props['actions']),
      flexibleSpace: props['flexibleSpace'],
      bottom: props['bottom'],
      elevation: props['elevation']?.toDouble(),
      scrolledUnderElevation: props['scrolledUnderElevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      forceElevated: props['forceElevated'] ?? false,
      backgroundColor: props['backgroundColor'],
      foregroundColor: props['foregroundColor'],
      iconTheme: props['iconTheme'],
      actionsIconTheme: props['actionsIconTheme'],
      primary: props['primary'] ?? true,
      centerTitle: props['centerTitle'],
      excludeHeaderSemantics: props['excludeHeaderSemantics'] ?? false,
      titleSpacing: props['titleSpacing']?.toDouble(),
      collapsedHeight: props['collapsedHeight']?.toDouble(),
      expandedHeight: props['expandedHeight']?.toDouble(),
      floating: props['floating'] ?? false,
      pinned: props['pinned'] ?? true,
      snap: props['snap'] ?? false,
      stretch: props['stretch'] ?? false,
      stretchTriggerOffset: props['stretchTriggerOffset']?.toDouble() ?? 100.0,
      onStretchTrigger: props['onStretchTrigger'],
      shape: props['shape'],
      toolbarHeight: props['toolbarHeight']?.toDouble() ??
          _LargeScrollUnderFlexibleConfig.collapsedHeight,
      leadingWidth: props['leadingWidth']?.toDouble(),
      toolbarTextStyle: props['toolbarTextStyle'],
      titleTextStyle: props['titleTextStyle'],
      systemOverlayStyle: props['systemOverlayStyle'],
      forceMaterialTransparency: props['forceMaterialTransparency'] ?? false,
      clipBehavior: props['clipBehavior']),
  'SliverAppBar.medium': (props) => SliverAppBar.medium(
      key: props['key'],
      leading: props['leading'],
      automaticallyImplyLeading: props['automaticallyImplyLeading'] ?? true,
      title: props['title'],
      actions: as<Widget>(props['actions']),
      flexibleSpace: props['flexibleSpace'],
      bottom: props['bottom'],
      elevation: props['elevation']?.toDouble(),
      scrolledUnderElevation: props['scrolledUnderElevation']?.toDouble(),
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      forceElevated: props['forceElevated'] ?? false,
      backgroundColor: props['backgroundColor'],
      foregroundColor: props['foregroundColor'],
      iconTheme: props['iconTheme'],
      actionsIconTheme: props['actionsIconTheme'],
      primary: props['primary'] ?? true,
      centerTitle: props['centerTitle'],
      excludeHeaderSemantics: props['excludeHeaderSemantics'] ?? false,
      titleSpacing: props['titleSpacing']?.toDouble(),
      collapsedHeight: props['collapsedHeight']?.toDouble(),
      expandedHeight: props['expandedHeight']?.toDouble(),
      floating: props['floating'] ?? false,
      pinned: props['pinned'] ?? true,
      snap: props['snap'] ?? false,
      stretch: props['stretch'] ?? false,
      stretchTriggerOffset: props['stretchTriggerOffset']?.toDouble() ?? 100.0,
      onStretchTrigger: props['onStretchTrigger'],
      shape: props['shape'],
      toolbarHeight: props['toolbarHeight']?.toDouble() ??
          _MediumScrollUnderFlexibleConfig.collapsedHeight,
      leadingWidth: props['leadingWidth']?.toDouble(),
      toolbarTextStyle: props['toolbarTextStyle'],
      titleTextStyle: props['titleTextStyle'],
      systemOverlayStyle: props['systemOverlayStyle'],
      forceMaterialTransparency: props['forceMaterialTransparency'] ?? false,
      clipBehavior: props['clipBehavior']),
  'SliverChildBuilderDelegate': (props) => SliverChildBuilderDelegate(
      props['pa'][0],
      findChildIndexCallback: props['findChildIndexCallback'],
      childCount: props['childCount'],
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true,
      semanticIndexCallback:
          props['semanticIndexCallback'] ?? _kDefaultSemanticIndexCallback,
      semanticIndexOffset: props['semanticIndexOffset'] ?? 0),
  'SliverChildListDelegate': (props) => SliverChildListDelegate(props['pa'][0],
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true,
      semanticIndexCallback:
          props['semanticIndexCallback'] ?? _kDefaultSemanticIndexCallback,
      semanticIndexOffset: props['semanticIndexOffset'] ?? 0),
  'SliverChildListDelegate.fixed': (props) => SliverChildListDelegate.fixed(
      props['pa'][0],
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true,
      semanticIndexCallback:
          props['semanticIndexCallback'] ?? _kDefaultSemanticIndexCallback,
      semanticIndexOffset: props['semanticIndexOffset'] ?? 0),
  'SliverConstrainedCrossAxis': (props) => SliverConstrainedCrossAxis(
      key: props['key'],
      maxExtent: props['maxExtent']?.toDouble() ?? 0,
      sliver: props['sliver']),
  'SliverConstraints': (props) => SliverConstraints(
      axisDirection: props['axisDirection'],
      growthDirection: props['growthDirection'],
      userScrollDirection: props['userScrollDirection'],
      scrollOffset: props['scrollOffset']?.toDouble() ?? 0,
      precedingScrollExtent: props['precedingScrollExtent']?.toDouble() ?? 0,
      overlap: props['overlap']?.toDouble() ?? 0,
      remainingPaintExtent: props['remainingPaintExtent']?.toDouble() ?? 0,
      crossAxisExtent: props['crossAxisExtent']?.toDouble() ?? 0,
      crossAxisDirection: props['crossAxisDirection'],
      viewportMainAxisExtent: props['viewportMainAxisExtent']?.toDouble() ?? 0,
      remainingCacheExtent: props['remainingCacheExtent']?.toDouble() ?? 0,
      cacheOrigin: props['cacheOrigin']?.toDouble() ?? 0),
  'SliverCrossAxisExpanded': (props) => SliverCrossAxisExpanded(
      key: props['key'], flex: props['flex'], sliver: props['sliver']),
  'SliverCrossAxisGroup': (props) => SliverCrossAxisGroup(
      key: props['key'], slivers: as<Widget>(props['slivers']) ?? const []),
  'SliverFadeTransition': (props) => SliverFadeTransition(
      key: props['key'],
      opacity: props['opacity'],
      alwaysIncludeSemantics: props['alwaysIncludeSemantics'] ?? false,
      sliver: props['sliver']),
  'SliverFillRemaining': (props) => SliverFillRemaining(
      key: props['key'],
      child: props['child'],
      hasScrollBody: props['hasScrollBody'] ?? true,
      fillOverscroll: props['fillOverscroll'] ?? false),
  'SliverFillViewport': (props) => SliverFillViewport(
      key: props['key'],
      delegate: props['delegate'],
      viewportFraction: props['viewportFraction']?.toDouble() ?? 1.0,
      padEnds: props['padEnds'] ?? true),
  'SliverFixedExtentList': (props) => SliverFixedExtentList(
      key: props['key'],
      delegate: props['delegate'],
      itemExtent: props['itemExtent']?.toDouble() ?? 0),
  'SliverFixedExtentList.builder': (props) => SliverFixedExtentList.builder(
      key: props['key'],
      itemBuilder: props['itemBuilder'],
      itemExtent: props['itemExtent']?.toDouble() ?? 0,
      findChildIndexCallback: props['findChildIndexCallback'],
      itemCount: props['itemCount'],
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true),
  'SliverFixedExtentList.list': (props) => SliverFixedExtentList.list(
      key: props['key'],
      children: as<Widget>(props['children']) ?? const [],
      itemExtent: props['itemExtent']?.toDouble() ?? 0,
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true),
  'SliverGeometry': (props) => SliverGeometry(
      scrollExtent: props['scrollExtent']?.toDouble() ?? 0.0,
      paintExtent: props['paintExtent']?.toDouble() ?? 0.0,
      paintOrigin: props['paintOrigin']?.toDouble() ?? 0.0,
      layoutExtent: props['layoutExtent']?.toDouble(),
      maxPaintExtent: props['maxPaintExtent']?.toDouble() ?? 0.0,
      maxScrollObstructionExtent:
          props['maxScrollObstructionExtent']?.toDouble() ?? 0.0,
      crossAxisExtent: props['crossAxisExtent']?.toDouble(),
      hitTestExtent: props['hitTestExtent']?.toDouble(),
      visible: props['visible'],
      hasVisualOverflow: props['hasVisualOverflow'] ?? false,
      scrollOffsetCorrection: props['scrollOffsetCorrection']?.toDouble(),
      cacheExtent: props['cacheExtent']?.toDouble()),
  'SliverGeometry.zero': SliverGeometry.zero,
  'SliverGrid': (props) => SliverGrid(
      key: props['key'],
      delegate: props['delegate'],
      gridDelegate: props['gridDelegate']),
  'SliverGrid.builder': (props) => SliverGrid.builder(
      key: props['key'],
      gridDelegate: props['gridDelegate'],
      itemBuilder: props['itemBuilder'],
      findChildIndexCallback: props['findChildIndexCallback'],
      itemCount: props['itemCount'],
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true),
  'SliverGrid.count': (props) => SliverGrid.count(
      key: props['key'],
      crossAxisCount: props['crossAxisCount'],
      mainAxisSpacing: props['mainAxisSpacing']?.toDouble() ?? 0.0,
      crossAxisSpacing: props['crossAxisSpacing']?.toDouble() ?? 0.0,
      childAspectRatio: props['childAspectRatio']?.toDouble() ?? 1.0,
      children: as<Widget>(props['children']) ?? const <Widget>[]),
  'SliverGrid.extent': (props) => SliverGrid.extent(
      key: props['key'],
      maxCrossAxisExtent: props['maxCrossAxisExtent']?.toDouble() ?? 0,
      mainAxisSpacing: props['mainAxisSpacing']?.toDouble() ?? 0.0,
      crossAxisSpacing: props['crossAxisSpacing']?.toDouble() ?? 0.0,
      childAspectRatio: props['childAspectRatio']?.toDouble() ?? 1.0,
      children: as<Widget>(props['children']) ?? const <Widget>[]),
  'SliverGridDelegateWithFixedCrossAxisCount': (props) =>
      SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: props['crossAxisCount'],
          mainAxisSpacing: props['mainAxisSpacing']?.toDouble() ?? 0.0,
          crossAxisSpacing: props['crossAxisSpacing']?.toDouble() ?? 0.0,
          childAspectRatio: props['childAspectRatio']?.toDouble() ?? 1.0,
          mainAxisExtent: props['mainAxisExtent']?.toDouble()),
  'SliverGridDelegateWithMaxCrossAxisExtent': (props) =>
      SliverGridDelegateWithMaxCrossAxisExtent(
          maxCrossAxisExtent: props['maxCrossAxisExtent']?.toDouble() ?? 0,
          mainAxisSpacing: props['mainAxisSpacing']?.toDouble() ?? 0.0,
          crossAxisSpacing: props['crossAxisSpacing']?.toDouble() ?? 0.0,
          childAspectRatio: props['childAspectRatio']?.toDouble() ?? 1.0,
          mainAxisExtent: props['mainAxisExtent']?.toDouble()),
  'SliverGridGeometry': (props) => SliverGridGeometry(
      scrollOffset: props['scrollOffset']?.toDouble() ?? 0,
      crossAxisOffset: props['crossAxisOffset']?.toDouble() ?? 0,
      mainAxisExtent: props['mainAxisExtent']?.toDouble() ?? 0,
      crossAxisExtent: props['crossAxisExtent']?.toDouble() ?? 0),
  'SliverGridParentData': (props) => SliverGridParentData(),
  'SliverGridRegularTileLayout': (props) => SliverGridRegularTileLayout(
      crossAxisCount: props['crossAxisCount'],
      mainAxisStride: props['mainAxisStride']?.toDouble() ?? 0,
      crossAxisStride: props['crossAxisStride']?.toDouble() ?? 0,
      childMainAxisExtent: props['childMainAxisExtent']?.toDouble() ?? 0,
      childCrossAxisExtent: props['childCrossAxisExtent']?.toDouble() ?? 0,
      reverseCrossAxis: props['reverseCrossAxis']),
  'SliverHitTestEntry': (props) => SliverHitTestEntry(props['pa'][0],
      mainAxisPosition: props['mainAxisPosition']?.toDouble() ?? 0,
      crossAxisPosition: props['crossAxisPosition']?.toDouble() ?? 0),
  'SliverHitTestResult': (props) => SliverHitTestResult(),
  'SliverHitTestResult.wrap': (props) =>
      SliverHitTestResult.wrap(props['pa'][0]),
  'SliverIgnorePointer': (props) => SliverIgnorePointer(
      key: props['key'],
      ignoring: props['ignoring'] ?? true,
      ignoringSemantics: props['ignoringSemantics'],
      sliver: props['sliver']),
  'SliverLayoutBuilder': (props) =>
      SliverLayoutBuilder(key: props['key'], builder: props['builder']),
  'SliverList': (props) =>
      SliverList(key: props['key'], delegate: props['delegate']),
  'SliverList.builder': (props) => SliverList.builder(
      key: props['key'],
      itemBuilder: props['itemBuilder'],
      findChildIndexCallback: props['findChildIndexCallback'],
      itemCount: props['itemCount'],
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true),
  'SliverList.list': (props) => SliverList.list(
      key: props['key'],
      children: as<Widget>(props['children']) ?? const [],
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true),
  'SliverList.separated': (props) => SliverList.separated(
      key: props['key'],
      itemBuilder: props['itemBuilder'],
      findChildIndexCallback: props['findChildIndexCallback'],
      separatorBuilder: props['separatorBuilder'],
      itemCount: props['itemCount'],
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true),
  'SliverLogicalContainerParentData': (props) =>
      SliverLogicalContainerParentData(),
  'SliverLogicalParentData': (props) => SliverLogicalParentData(),
  'SliverMultiBoxAdaptorElement': (props) => SliverMultiBoxAdaptorElement(
      props['pa'][0],
      replaceMovedChildren: props['replaceMovedChildren'] ?? false),
  'SliverMultiBoxAdaptorParentData': (props) =>
      SliverMultiBoxAdaptorParentData(),
  'SliverOffstage': (props) => SliverOffstage(
      key: props['key'],
      offstage: props['offstage'] ?? true,
      sliver: props['sliver']),
  'SliverOpacity': (props) => SliverOpacity(
      key: props['key'],
      opacity: props['opacity']?.toDouble() ?? 0,
      alwaysIncludeSemantics: props['alwaysIncludeSemantics'] ?? false,
      sliver: props['sliver']),
  'SliverOverlapAbsorber': (props) => SliverOverlapAbsorber(
      key: props['key'], handle: props['handle'], sliver: props['sliver']),
  'SliverOverlapAbsorberHandle': (props) => SliverOverlapAbsorberHandle(),
  'SliverOverlapInjector': (props) => SliverOverlapInjector(
      key: props['key'], handle: props['handle'], sliver: props['sliver']),
  'SliverPadding': (props) => SliverPadding(
      key: props['key'], padding: props['padding'], sliver: props['sliver']),
  'SliverPersistentHeader': (props) => SliverPersistentHeader(
      key: props['key'],
      delegate: props['delegate'],
      pinned: props['pinned'] ?? false,
      floating: props['floating'] ?? false),
  'SliverPhysicalContainerParentData': (props) =>
      SliverPhysicalContainerParentData(),
  'SliverPhysicalParentData': (props) => SliverPhysicalParentData(),
  'SliverPrototypeExtentList': (props) => SliverPrototypeExtentList(
      key: props['key'],
      delegate: props['delegate'],
      prototypeItem: props['prototypeItem']),
  'SliverPrototypeExtentList.builder': (props) =>
      SliverPrototypeExtentList.builder(
          key: props['key'],
          itemBuilder: props['itemBuilder'],
          prototypeItem: props['prototypeItem'],
          findChildIndexCallback: props['findChildIndexCallback'],
          itemCount: props['itemCount'],
          addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
          addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
          addSemanticIndexes: props['addSemanticIndexes'] ?? true),
  'SliverPrototypeExtentList.list': (props) => SliverPrototypeExtentList.list(
      key: props['key'],
      children: as<Widget>(props['children']) ?? const [],
      prototypeItem: props['prototypeItem'],
      addAutomaticKeepAlives: props['addAutomaticKeepAlives'] ?? true,
      addRepaintBoundaries: props['addRepaintBoundaries'] ?? true,
      addSemanticIndexes: props['addSemanticIndexes'] ?? true),
  'SliverReorderableList': (props) => SliverReorderableList(
      key: props['key'],
      itemBuilder: props['itemBuilder'],
      findChildIndexCallback: props['findChildIndexCallback'],
      itemCount: props['itemCount'],
      onReorder: props['onReorder'],
      onReorderStart: props['onReorderStart'],
      onReorderEnd: props['onReorderEnd'],
      itemExtent: props['itemExtent']?.toDouble(),
      prototypeItem: props['prototypeItem'],
      proxyDecorator: props['proxyDecorator'],
      autoScrollerVelocityScalar:
          props['autoScrollerVelocityScalar']?.toDouble()),
  'SliverReorderableList.maybeOf': (props) =>
      SliverReorderableList.maybeOf(props['pa'][0]),
  'SliverReorderableList.of': (props) =>
      SliverReorderableList.of(props['pa'][0]),
  'SliverSafeArea': (props) => SliverSafeArea(
      key: props['key'],
      left: props['left'] ?? true,
      top: props['top'] ?? true,
      right: props['right'] ?? true,
      bottom: props['bottom'] ?? true,
      minimum: props['minimum'] ?? EdgeInsets.zero,
      sliver: props['sliver']),
  'SliverToBoxAdapter': (props) =>
      SliverToBoxAdapter(key: props['key'], child: props['child']),
  'SliverVisibility': (props) => SliverVisibility(
      key: props['key'],
      sliver: props['sliver'],
      replacementSliver:
          props['replacementSliver'] ?? const SliverToBoxAdapter(),
      visible: props['visible'] ?? true,
      maintainState: props['maintainState'] ?? false,
      maintainAnimation: props['maintainAnimation'] ?? false,
      maintainSize: props['maintainSize'] ?? false,
      maintainSemantics: props['maintainSemantics'] ?? false,
      maintainInteractivity: props['maintainInteractivity'] ?? false),
  'SliverVisibility.maintain': (props) => SliverVisibility.maintain(
      key: props['key'],
      sliver: props['sliver'],
      replacementSliver:
          props['replacementSliver'] ?? const SliverToBoxAdapter(),
      visible: props['visible'] ?? true),
  'SlottedRenderObjectElement': (props) =>
      SlottedRenderObjectElement(props['pa'][0]),
  'SmartDashesType.disabled': SmartDashesType.disabled,
  'SmartDashesType.enabled': SmartDashesType.enabled,
  'SmartDashesType.values': SmartDashesType.values,
  'SmartQuotesType.disabled': SmartQuotesType.disabled,
  'SmartQuotesType.enabled': SmartQuotesType.enabled,
  'SmartQuotesType.values': SmartQuotesType.values,
  'SnackBar': (props) => SnackBar(
      key: props['key'],
      content: props['content'],
      backgroundColor: props['backgroundColor'],
      elevation: props['elevation']?.toDouble(),
      margin: props['margin'],
      padding: props['padding'],
      width: props['width']?.toDouble(),
      shape: props['shape'],
      behavior: props['behavior'],
      action: props['action'],
      actionOverflowThreshold: props['actionOverflowThreshold']?.toDouble(),
      showCloseIcon: props['showCloseIcon'],
      closeIconColor: props['closeIconColor'],
      duration: props['duration'] ?? _snackBarDisplayDuration,
      animation: props['animation'],
      onVisible: props['onVisible'],
      dismissDirection: props['dismissDirection'] ?? DismissDirection.down,
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'SnackBar.createAnimationController': (props) =>
      SnackBar.createAnimationController(vsync: props['vsync']),
  'SnackBarAction': (props) => SnackBarAction(
      key: props['key'],
      textColor: props['textColor'],
      disabledTextColor: props['disabledTextColor'],
      backgroundColor: props['backgroundColor'],
      disabledBackgroundColor: props['disabledBackgroundColor'],
      label: props['label'],
      onPressed: props['onPressed']),
  'SnackBarBehavior.fixed': SnackBarBehavior.fixed,
  'SnackBarBehavior.floating': SnackBarBehavior.floating,
  'SnackBarBehavior.values': SnackBarBehavior.values,
  'SnackBarClosedReason.action': SnackBarClosedReason.action,
  'SnackBarClosedReason.dismiss': SnackBarClosedReason.dismiss,
  'SnackBarClosedReason.hide': SnackBarClosedReason.hide,
  'SnackBarClosedReason.remove': SnackBarClosedReason.remove,
  'SnackBarClosedReason.swipe': SnackBarClosedReason.swipe,
  'SnackBarClosedReason.timeout': SnackBarClosedReason.timeout,
  'SnackBarClosedReason.values': SnackBarClosedReason.values,
  'SnackBarThemeData': (props) => SnackBarThemeData(
      backgroundColor: props['backgroundColor'],
      actionTextColor: props['actionTextColor'],
      disabledActionTextColor: props['disabledActionTextColor'],
      contentTextStyle: props['contentTextStyle'],
      elevation: props['elevation']?.toDouble(),
      shape: props['shape'],
      behavior: props['behavior'],
      width: props['width']?.toDouble(),
      showCloseIcon: props['showCloseIcon'],
      closeIconColor: props['closeIconColor'],
      actionOverflowThreshold: props['actionOverflowThreshold']?.toDouble(),
      actionBackgroundColor: props['actionBackgroundColor'],
      disabledActionBackgroundColor: props['disabledActionBackgroundColor']),
  'SnackBarThemeData.lerp': (props) => SnackBarThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'SnapshotController': (props) => SnapshotController(
      allowSnapshotting: props['allowSnapshotting'] ?? false),
  'SnapshotMode.forced': SnapshotMode.forced,
  'SnapshotMode.normal': SnapshotMode.normal,
  'SnapshotMode.permissive': SnapshotMode.permissive,
  'SnapshotMode.values': SnapshotMode.values,
  'SnapshotWidget': (props) => SnapshotWidget(
      key: props['key'],
      mode: props['mode'] ?? SnapshotMode.normal,
      painter: props['painter'] ?? const _DefaultSnapshotPainter(),
      autoresize: props['autoresize'] ?? false,
      controller: props['controller'],
      child: props['child']),
  'Spacer': (props) => Spacer(key: props['key'], flex: props['flex'] ?? 1),
  'SpellCheckConfiguration': (props) => SpellCheckConfiguration(
      spellCheckService: props['spellCheckService'],
      misspelledSelectionColor: props['misspelledSelectionColor'],
      misspelledTextStyle: props['misspelledTextStyle'],
      spellCheckSuggestionsToolbarBuilder:
          props['spellCheckSuggestionsToolbarBuilder']),
  'SpellCheckConfiguration.disabled': (props) =>
      const SpellCheckConfiguration.disabled(),
  'SpellCheckResults': (props) =>
      SpellCheckResults(props['pa'][0], props['pa'][1]),
  'SpellCheckSuggestionsToolbar': (props) => SpellCheckSuggestionsToolbar(
      key: props['key'],
      anchor: props['anchor'],
      buttonItems: as<ContextMenuButtonItem>(props['buttonItems']) ?? const []),
  'SpellCheckSuggestionsToolbar.buildButtonItems': (props) =>
      SpellCheckSuggestionsToolbar.buildButtonItems(props['pa'][0]),
  'SpellCheckSuggestionsToolbar.editableText': (props) =>
      SpellCheckSuggestionsToolbar.editableText(
          key: props['key'], editableTextState: props['editableTextState']),
  'SpellCheckSuggestionsToolbar.getToolbarAnchor': (props) =>
      SpellCheckSuggestionsToolbar.getToolbarAnchor(props['pa'][0]),
  'SpellCheckSuggestionsToolbarLayoutDelegate': (props) =>
      SpellCheckSuggestionsToolbarLayoutDelegate(anchor: props['anchor']),
  'SpellOutStringAttribute': (props) =>
      SpellOutStringAttribute(range: props['range']),
  'SpringDescription': (props) => SpringDescription(
      mass: props['mass']?.toDouble() ?? 0,
      stiffness: props['stiffness']?.toDouble() ?? 0,
      damping: props['damping']?.toDouble() ?? 0),
  'SpringDescription.withDampingRatio': (props) =>
      SpringDescription.withDampingRatio(
          mass: props['mass']?.toDouble() ?? 0,
          stiffness: props['stiffness']?.toDouble() ?? 0,
          ratio: props['ratio']?.toDouble() ?? 1.0),
  'SpringSimulation': (props) => SpringSimulation(
      props['pa'][0],
      props['pa'][1]?.toDouble(),
      props['pa'][2]?.toDouble(),
      props['pa'][3]?.toDouble(),
      tolerance: props['tolerance'] ?? Tolerance.defaultTolerance),
  'SpringType.criticallyDamped': SpringType.criticallyDamped,
  'SpringType.overDamped': SpringType.overDamped,
  'SpringType.underDamped': SpringType.underDamped,
  'SpringType.values': SpringType.values,
  'Stack': (props) => Stack(
      key: props['key'],
      alignment: props['alignment'] ?? AlignmentDirectional.topStart,
      textDirection: props['textDirection'],
      fit: props['fit'] ?? StackFit.loose,
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      children: as<Widget>(props['children']) ?? const <Widget>[]),
  'StackFit.expand': StackFit.expand,
  'StackFit.loose': StackFit.loose,
  'StackFit.passthrough': StackFit.passthrough,
  'StackFit.values': StackFit.values,
  'StackFrame': (props) => StackFrame(
      number: props['number'],
      column: props['column'],
      line: props['line'],
      packageScheme: props['packageScheme'],
      package: props['package'],
      packagePath: props['packagePath'],
      className: props['className'] ?? '',
      method: props['method'],
      isConstructor: props['isConstructor'] ?? false,
      source: props['source']),
  'StackFrame.asynchronousSuspension': StackFrame.asynchronousSuspension,
  'StackFrame.fromStackString': (props) =>
      StackFrame.fromStackString(props['pa'][0]),
  'StackFrame.fromStackTrace': (props) =>
      StackFrame.fromStackTrace(props['pa'][0]),
  'StackFrame.fromStackTraceLine': (props) =>
      StackFrame.fromStackTraceLine(props['pa'][0]),
  'StackFrame.stackOverFlowElision': StackFrame.stackOverFlowElision,
  'StackParentData': (props) => StackParentData(),
  'StadiumBorder': (props) =>
      StadiumBorder(side: props['side'] ?? BorderSide.none),
  'StandardMessageCodec': (props) => const StandardMessageCodec(),
  'StandardMethodCodec': (props) => StandardMethodCodec(
      (props['pa'].length > 0 ? props['pa'][0] : null) ??
          const StandardMessageCodec()),
  'StarBorder': (props) => StarBorder(
      side: props['side'] ?? BorderSide.none,
      points: props['points']?.toDouble() ?? 5,
      innerRadiusRatio: props['innerRadiusRatio']?.toDouble() ?? 0.4,
      pointRounding: props['pointRounding']?.toDouble() ?? 0,
      valleyRounding: props['valleyRounding']?.toDouble() ?? 0,
      rotation: props['rotation']?.toDouble() ?? 0,
      squash: props['squash']?.toDouble() ?? 0),
  'StarBorder.polygon': (props) => StarBorder.polygon(
      side: props['side'] ?? BorderSide.none,
      sides: props['sides']?.toDouble() ?? 5,
      pointRounding: props['pointRounding']?.toDouble() ?? 0,
      rotation: props['rotation']?.toDouble() ?? 0,
      squash: props['squash']?.toDouble() ?? 0),
  'StatefulBuilder': (props) =>
      StatefulBuilder(key: props['key'], builder: props['builder']),
  'StatefulElement': (props) => StatefulElement(props['pa'][0]),
  'StatelessElement': (props) => StatelessElement(props['pa'][0]),
  'Step': (props) => Step(
      title: props['title'],
      subtitle: props['subtitle'],
      content: props['content'],
      state: props['state'] ?? StepState.indexed,
      isActive: props['isActive'] ?? false,
      label: props['label']),
  'StepState.complete': StepState.complete,
  'StepState.disabled': StepState.disabled,
  'StepState.editing': StepState.editing,
  'StepState.error': StepState.error,
  'StepState.indexed': StepState.indexed,
  'StepState.values': StepState.values,
  'StepTween': (props) => StepTween(begin: props['begin'], end: props['end']),
  'Stepper': (props) => Stepper(
      key: props['key'],
      steps: as<Step>(props['steps']) ?? const [],
      physics: props['physics'],
      type: props['type'] ?? StepperType.vertical,
      currentStep: props['currentStep'] ?? 0,
      onStepTapped: props['onStepTapped'],
      onStepContinue: props['onStepContinue'],
      onStepCancel: props['onStepCancel'],
      controlsBuilder: props['controlsBuilder'],
      elevation: props['elevation']?.toDouble(),
      margin: props['margin'],
      connectorColor: props['connectorColor'],
      connectorThickness: props['connectorThickness']?.toDouble(),
      stepIconBuilder: props['stepIconBuilder']),
  'StepperType.horizontal': StepperType.horizontal,
  'StepperType.values': StepperType.values,
  'StepperType.vertical': StepperType.vertical,
  'StreamBuilder': (props) => StreamBuilder(
      key: props['key'],
      initialData: props['initialData'],
      stream: props['stream'],
      builder: props['builder']),
  'StretchMode.blurBackground': StretchMode.blurBackground,
  'StretchMode.fadeTitle': StretchMode.fadeTitle,
  'StretchMode.values': StretchMode.values,
  'StretchMode.zoomBackground': StretchMode.zoomBackground,
  'StretchingOverscrollIndicator': (props) => StretchingOverscrollIndicator(
      key: props['key'],
      axisDirection: props['axisDirection'],
      notificationPredicate:
          props['notificationPredicate'] ?? defaultScrollNotificationPredicate,
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      child: props['child']),
  'StringCodec': (props) => const StringCodec(),
  'StringProperty': (props) => StringProperty(props['pa'][0], props['pa'][1],
      description: props['description'],
      tooltip: props['tooltip'],
      showName: props['showName'] ?? true,
      defaultValue: props['defaultValue'] ?? kNoDefaultValue,
      quoted: props['quoted'] ?? true,
      ifEmpty: props['ifEmpty'],
      style: props['style'] ?? DiagnosticsTreeStyle.singleLine,
      level: props['level'] ?? DiagnosticLevel.info),
  'StrokeCap.butt': StrokeCap.butt,
  'StrokeCap.round': StrokeCap.round,
  'StrokeCap.square': StrokeCap.square,
  'StrokeCap.values': StrokeCap.values,
  'StrokeJoin.bevel': StrokeJoin.bevel,
  'StrokeJoin.miter': StrokeJoin.miter,
  'StrokeJoin.round': StrokeJoin.round,
  'StrokeJoin.values': StrokeJoin.values,
  'StrutStyle': (props) => StrutStyle(
      fontFamily: props['fontFamily'],
      fontFamilyFallback: as<String>(props['fontFamilyFallback']),
      fontSize: props['fontSize']?.toDouble(),
      height: props['height']?.toDouble(),
      leadingDistribution: props['leadingDistribution'],
      leading: props['leading']?.toDouble(),
      fontWeight: props['fontWeight'],
      fontStyle: props['fontStyle'],
      forceStrutHeight: props['forceStrutHeight'],
      debugLabel: props['debugLabel'],
      package: props['package']),
  'StrutStyle.disabled': StrutStyle.disabled,
  'StrutStyle.fromTextStyle': (props) => StrutStyle.fromTextStyle(
      props['pa'][0],
      fontFamily: props['fontFamily'],
      fontFamilyFallback: as<String>(props['fontFamilyFallback']),
      fontSize: props['fontSize']?.toDouble(),
      height: props['height']?.toDouble(),
      leadingDistribution: props['leadingDistribution'],
      leading: props['leading']?.toDouble(),
      fontWeight: props['fontWeight'],
      fontStyle: props['fontStyle'],
      forceStrutHeight: props['forceStrutHeight'],
      debugLabel: props['debugLabel'],
      package: props['package']),
  'SubmenuButton': (props) => SubmenuButton(
      key: props['key'],
      onHover: props['onHover'],
      onFocusChange: props['onFocusChange'],
      onOpen: props['onOpen'],
      onClose: props['onClose'],
      controller: props['controller'],
      style: props['style'],
      menuStyle: props['menuStyle'],
      alignmentOffset: props['alignmentOffset'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      focusNode: props['focusNode'],
      statesController: props['statesController'],
      leadingIcon: props['leadingIcon'],
      trailingIcon: props['trailingIcon'],
      menuChildren: as<Widget>(props['menuChildren']) ?? const [],
      child: props['child']),
  'SubmenuButton.styleFrom': (props) => SubmenuButton.styleFrom(
      foregroundColor: props['foregroundColor'],
      backgroundColor: props['backgroundColor'],
      disabledForegroundColor: props['disabledForegroundColor'],
      disabledBackgroundColor: props['disabledBackgroundColor'],
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      iconColor: props['iconColor'],
      textStyle: props['textStyle'],
      elevation: props['elevation']?.toDouble(),
      padding: props['padding'],
      minimumSize: props['minimumSize'],
      fixedSize: props['fixedSize'],
      maximumSize: props['maximumSize'],
      enabledMouseCursor: props['enabledMouseCursor'],
      disabledMouseCursor: props['disabledMouseCursor'],
      side: props['side'],
      shape: props['shape'],
      visualDensity: props['visualDensity'],
      tapTargetSize: props['tapTargetSize'],
      animationDuration: props['animationDuration'],
      enableFeedback: props['enableFeedback'],
      alignment: props['alignment'],
      splashFactory: props['splashFactory']),
  'SuggestionSpan': (props) => SuggestionSpan(props['pa'][0], props['pa'][1]),
  'Summary': (props) => Summary(props['pa'][0]),
  'SweepGradient': (props) => SweepGradient(
      center: props['center'] ?? Alignment.center,
      startAngle: props['startAngle']?.toDouble() ?? 0.0,
      endAngle: props['endAngle']?.toDouble() ?? math.pi * 2,
      colors: as<Color>(props['colors']) ?? const [],
      stops: as<double>(props['stops']),
      tileMode: props['tileMode'] ?? TileMode.clamp,
      transform: props['transform']),
  'SweepGradient.lerp': (props) => SweepGradient.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'Switch': (props) => Switch(
      key: props['key'],
      value: props['value'],
      onChanged: props['onChanged'],
      activeColor: props['activeColor'],
      activeTrackColor: props['activeTrackColor'],
      inactiveThumbColor: props['inactiveThumbColor'],
      inactiveTrackColor: props['inactiveTrackColor'],
      activeThumbImage: props['activeThumbImage'],
      onActiveThumbImageError: props['onActiveThumbImageError'],
      inactiveThumbImage: props['inactiveThumbImage'],
      onInactiveThumbImageError: props['onInactiveThumbImageError'],
      thumbColor: props['thumbColor'],
      trackColor: props['trackColor'],
      trackOutlineColor: props['trackOutlineColor'],
      trackOutlineWidth: props['trackOutlineWidth'],
      thumbIcon: props['thumbIcon'],
      materialTapTargetSize: props['materialTapTargetSize'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      mouseCursor: props['mouseCursor'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      overlayColor: props['overlayColor'],
      splashRadius: props['splashRadius']?.toDouble(),
      focusNode: props['focusNode'],
      onFocusChange: props['onFocusChange'],
      autofocus: props['autofocus'] ?? false),
  'Switch.adaptive': (props) => Switch.adaptive(
      key: props['key'],
      value: props['value'],
      onChanged: props['onChanged'],
      activeColor: props['activeColor'],
      activeTrackColor: props['activeTrackColor'],
      inactiveThumbColor: props['inactiveThumbColor'],
      inactiveTrackColor: props['inactiveTrackColor'],
      activeThumbImage: props['activeThumbImage'],
      onActiveThumbImageError: props['onActiveThumbImageError'],
      inactiveThumbImage: props['inactiveThumbImage'],
      onInactiveThumbImageError: props['onInactiveThumbImageError'],
      materialTapTargetSize: props['materialTapTargetSize'],
      thumbColor: props['thumbColor'],
      trackColor: props['trackColor'],
      trackOutlineColor: props['trackOutlineColor'],
      trackOutlineWidth: props['trackOutlineWidth'],
      thumbIcon: props['thumbIcon'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      mouseCursor: props['mouseCursor'],
      focusColor: props['focusColor'],
      hoverColor: props['hoverColor'],
      overlayColor: props['overlayColor'],
      splashRadius: props['splashRadius']?.toDouble(),
      focusNode: props['focusNode'],
      onFocusChange: props['onFocusChange'],
      autofocus: props['autofocus'] ?? false,
      applyCupertinoTheme: props['applyCupertinoTheme']),
  'SwitchListTile': (props) => SwitchListTile(
      key: props['key'],
      value: props['value'],
      onChanged: props['onChanged'],
      activeColor: props['activeColor'],
      activeTrackColor: props['activeTrackColor'],
      inactiveThumbColor: props['inactiveThumbColor'],
      inactiveTrackColor: props['inactiveTrackColor'],
      activeThumbImage: props['activeThumbImage'],
      onActiveThumbImageError: props['onActiveThumbImageError'],
      inactiveThumbImage: props['inactiveThumbImage'],
      onInactiveThumbImageError: props['onInactiveThumbImageError'],
      thumbColor: props['thumbColor'],
      trackColor: props['trackColor'],
      trackOutlineColor: props['trackOutlineColor'],
      thumbIcon: props['thumbIcon'],
      materialTapTargetSize: props['materialTapTargetSize'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      mouseCursor: props['mouseCursor'],
      overlayColor: props['overlayColor'],
      splashRadius: props['splashRadius']?.toDouble(),
      focusNode: props['focusNode'],
      onFocusChange: props['onFocusChange'],
      autofocus: props['autofocus'] ?? false,
      tileColor: props['tileColor'],
      title: props['title'],
      subtitle: props['subtitle'],
      isThreeLine: props['isThreeLine'] ?? false,
      dense: props['dense'],
      contentPadding: props['contentPadding'],
      secondary: props['secondary'],
      selected: props['selected'] ?? false,
      controlAffinity:
          props['controlAffinity'] ?? ListTileControlAffinity.platform,
      shape: props['shape'],
      selectedTileColor: props['selectedTileColor'],
      visualDensity: props['visualDensity'],
      enableFeedback: props['enableFeedback'],
      hoverColor: props['hoverColor']),
  'SwitchListTile.adaptive': (props) => SwitchListTile.adaptive(
      key: props['key'],
      value: props['value'],
      onChanged: props['onChanged'],
      activeColor: props['activeColor'],
      activeTrackColor: props['activeTrackColor'],
      inactiveThumbColor: props['inactiveThumbColor'],
      inactiveTrackColor: props['inactiveTrackColor'],
      activeThumbImage: props['activeThumbImage'],
      onActiveThumbImageError: props['onActiveThumbImageError'],
      inactiveThumbImage: props['inactiveThumbImage'],
      onInactiveThumbImageError: props['onInactiveThumbImageError'],
      thumbColor: props['thumbColor'],
      trackColor: props['trackColor'],
      trackOutlineColor: props['trackOutlineColor'],
      thumbIcon: props['thumbIcon'],
      materialTapTargetSize: props['materialTapTargetSize'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      mouseCursor: props['mouseCursor'],
      overlayColor: props['overlayColor'],
      splashRadius: props['splashRadius']?.toDouble(),
      focusNode: props['focusNode'],
      onFocusChange: props['onFocusChange'],
      autofocus: props['autofocus'] ?? false,
      applyCupertinoTheme: props['applyCupertinoTheme'],
      tileColor: props['tileColor'],
      title: props['title'],
      subtitle: props['subtitle'],
      isThreeLine: props['isThreeLine'] ?? false,
      dense: props['dense'],
      contentPadding: props['contentPadding'],
      secondary: props['secondary'],
      selected: props['selected'] ?? false,
      controlAffinity:
          props['controlAffinity'] ?? ListTileControlAffinity.platform,
      shape: props['shape'],
      selectedTileColor: props['selectedTileColor'],
      visualDensity: props['visualDensity'],
      enableFeedback: props['enableFeedback'],
      hoverColor: props['hoverColor']),
  'SwitchTheme': (props) => SwitchTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'SwitchTheme.of': (props) => SwitchTheme.of(props['pa'][0]),
  'SwitchThemeData': (props) => SwitchThemeData(
      thumbColor: props['thumbColor'],
      trackColor: props['trackColor'],
      trackOutlineColor: props['trackOutlineColor'],
      trackOutlineWidth: props['trackOutlineWidth'],
      materialTapTargetSize: props['materialTapTargetSize'],
      mouseCursor: props['mouseCursor'],
      overlayColor: props['overlayColor'],
      splashRadius: props['splashRadius']?.toDouble(),
      thumbIcon: props['thumbIcon']),
  'SwitchThemeData.lerp': (props) => SwitchThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'SynchronousFuture': (props) => SynchronousFuture(props['pa'][0]),
  'SystemMouseCursors.alias': SystemMouseCursors.alias,
  'SystemMouseCursors.allScroll': SystemMouseCursors.allScroll,
  'SystemMouseCursors.basic': SystemMouseCursors.basic,
  'SystemMouseCursors.cell': SystemMouseCursors.cell,
  'SystemMouseCursors.click': SystemMouseCursors.click,
  'SystemMouseCursors.contextMenu': SystemMouseCursors.contextMenu,
  'SystemMouseCursors.copy': SystemMouseCursors.copy,
  'SystemMouseCursors.disappearing': SystemMouseCursors.disappearing,
  'SystemMouseCursors.forbidden': SystemMouseCursors.forbidden,
  'SystemMouseCursors.grab': SystemMouseCursors.grab,
  'SystemMouseCursors.grabbing': SystemMouseCursors.grabbing,
  'SystemMouseCursors.help': SystemMouseCursors.help,
  'SystemMouseCursors.move': SystemMouseCursors.move,
  'SystemMouseCursors.noDrop': SystemMouseCursors.noDrop,
  'SystemMouseCursors.none': SystemMouseCursors.none,
  'SystemMouseCursors.precise': SystemMouseCursors.precise,
  'SystemMouseCursors.progress': SystemMouseCursors.progress,
  'SystemMouseCursors.resizeColumn': SystemMouseCursors.resizeColumn,
  'SystemMouseCursors.resizeDown': SystemMouseCursors.resizeDown,
  'SystemMouseCursors.resizeDownLeft': SystemMouseCursors.resizeDownLeft,
  'SystemMouseCursors.resizeDownRight': SystemMouseCursors.resizeDownRight,
  'SystemMouseCursors.resizeLeft': SystemMouseCursors.resizeLeft,
  'SystemMouseCursors.resizeLeftRight': SystemMouseCursors.resizeLeftRight,
  'SystemMouseCursors.resizeRight': SystemMouseCursors.resizeRight,
  'SystemMouseCursors.resizeRow': SystemMouseCursors.resizeRow,
  'SystemMouseCursors.resizeUp': SystemMouseCursors.resizeUp,
  'SystemMouseCursors.resizeUpDown': SystemMouseCursors.resizeUpDown,
  'SystemMouseCursors.resizeUpLeft': SystemMouseCursors.resizeUpLeft,
  'SystemMouseCursors.resizeUpLeftDownRight':
      SystemMouseCursors.resizeUpLeftDownRight,
  'SystemMouseCursors.resizeUpRight': SystemMouseCursors.resizeUpRight,
  'SystemMouseCursors.resizeUpRightDownLeft':
      SystemMouseCursors.resizeUpRightDownLeft,
  'SystemMouseCursors.text': SystemMouseCursors.text,
  'SystemMouseCursors.verticalText': SystemMouseCursors.verticalText,
  'SystemMouseCursors.wait': SystemMouseCursors.wait,
  'SystemMouseCursors.zoomIn': SystemMouseCursors.zoomIn,
  'SystemMouseCursors.zoomOut': SystemMouseCursors.zoomOut,
  'SystemSoundType.alert': SystemSoundType.alert,
  'SystemSoundType.click': SystemSoundType.click,
  'SystemSoundType.values': SystemSoundType.values,
  'SystemUiMode.edgeToEdge': SystemUiMode.edgeToEdge,
  'SystemUiMode.immersive': SystemUiMode.immersive,
  'SystemUiMode.immersiveSticky': SystemUiMode.immersiveSticky,
  'SystemUiMode.leanBack': SystemUiMode.leanBack,
  'SystemUiMode.manual': SystemUiMode.manual,
  'SystemUiMode.values': SystemUiMode.values,
  'SystemUiOverlay.bottom': SystemUiOverlay.bottom,
  'SystemUiOverlay.top': SystemUiOverlay.top,
  'SystemUiOverlay.values': SystemUiOverlay.values,
  'SystemUiOverlayStyle': (props) => SystemUiOverlayStyle(
      systemNavigationBarColor: props['systemNavigationBarColor'],
      systemNavigationBarDividerColor: props['systemNavigationBarDividerColor'],
      systemNavigationBarIconBrightness:
          props['systemNavigationBarIconBrightness'],
      systemNavigationBarContrastEnforced:
          props['systemNavigationBarContrastEnforced'],
      statusBarColor: props['statusBarColor'],
      statusBarBrightness: props['statusBarBrightness'],
      statusBarIconBrightness: props['statusBarIconBrightness'],
      systemStatusBarContrastEnforced:
          props['systemStatusBarContrastEnforced']),
  'SystemUiOverlayStyle.dark': SystemUiOverlayStyle.dark,
  'SystemUiOverlayStyle.light': SystemUiOverlayStyle.light,
  'Tab': (props) => Tab(
      key: props['key'],
      text: props['text'],
      icon: props['icon'],
      iconMargin: props['iconMargin'] ?? const EdgeInsets.only(bottom: 10.0),
      height: props['height']?.toDouble(),
      child: props['child']),
  'TabAlignment.center': TabAlignment.center,
  'TabAlignment.fill': TabAlignment.fill,
  'TabAlignment.start': TabAlignment.start,
  'TabAlignment.startOffset': TabAlignment.startOffset,
  'TabAlignment.values': TabAlignment.values,
  'TabBar': (props) => TabBar(
      key: props['key'],
      tabs: as<Widget>(props['tabs']) ?? const [],
      controller: props['controller'],
      isScrollable: props['isScrollable'] ?? false,
      padding: props['padding'],
      indicatorColor: props['indicatorColor'],
      automaticIndicatorColorAdjustment:
          props['automaticIndicatorColorAdjustment'] ?? true,
      indicatorWeight: props['indicatorWeight']?.toDouble() ?? 2.0,
      indicatorPadding: props['indicatorPadding'] ?? EdgeInsets.zero,
      indicator: props['indicator'],
      indicatorSize: props['indicatorSize'],
      dividerColor: props['dividerColor'],
      labelColor: props['labelColor'],
      labelStyle: props['labelStyle'],
      labelPadding: props['labelPadding'],
      unselectedLabelColor: props['unselectedLabelColor'],
      unselectedLabelStyle: props['unselectedLabelStyle'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      overlayColor: props['overlayColor'],
      mouseCursor: props['mouseCursor'],
      enableFeedback: props['enableFeedback'],
      onTap: props['onTap'],
      physics: props['physics'],
      splashFactory: props['splashFactory'],
      splashBorderRadius: props['splashBorderRadius'],
      tabAlignment: props['tabAlignment']),
  'TabBar.secondary': (props) => TabBar.secondary(
      key: props['key'],
      tabs: as<Widget>(props['tabs']) ?? const [],
      controller: props['controller'],
      isScrollable: props['isScrollable'] ?? false,
      padding: props['padding'],
      indicatorColor: props['indicatorColor'],
      automaticIndicatorColorAdjustment:
          props['automaticIndicatorColorAdjustment'] ?? true,
      indicatorWeight: props['indicatorWeight']?.toDouble() ?? 2.0,
      indicatorPadding: props['indicatorPadding'] ?? EdgeInsets.zero,
      indicator: props['indicator'],
      indicatorSize: props['indicatorSize'],
      dividerColor: props['dividerColor'],
      labelColor: props['labelColor'],
      labelStyle: props['labelStyle'],
      labelPadding: props['labelPadding'],
      unselectedLabelColor: props['unselectedLabelColor'],
      unselectedLabelStyle: props['unselectedLabelStyle'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      overlayColor: props['overlayColor'],
      mouseCursor: props['mouseCursor'],
      enableFeedback: props['enableFeedback'],
      onTap: props['onTap'],
      physics: props['physics'],
      splashFactory: props['splashFactory'],
      splashBorderRadius: props['splashBorderRadius'],
      tabAlignment: props['tabAlignment']),
  'TabBarIndicatorSize.label': TabBarIndicatorSize.label,
  'TabBarIndicatorSize.tab': TabBarIndicatorSize.tab,
  'TabBarIndicatorSize.values': TabBarIndicatorSize.values,
  'TabBarTheme': (props) => TabBarTheme(
      indicator: props['indicator'],
      indicatorColor: props['indicatorColor'],
      indicatorSize: props['indicatorSize'],
      dividerColor: props['dividerColor'],
      labelColor: props['labelColor'],
      labelPadding: props['labelPadding'],
      labelStyle: props['labelStyle'],
      unselectedLabelColor: props['unselectedLabelColor'],
      unselectedLabelStyle: props['unselectedLabelStyle'],
      overlayColor: props['overlayColor'],
      splashFactory: props['splashFactory'],
      mouseCursor: props['mouseCursor'],
      tabAlignment: props['tabAlignment']),
  'TabBarTheme.lerp': (props) => TabBarTheme.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'TabBarTheme.of': (props) => TabBarTheme.of(props['pa'][0]),
  'TabBarView': (props) => TabBarView(
      key: props['key'],
      children: as<Widget>(props['children']) ?? const [],
      controller: props['controller'],
      physics: props['physics'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      viewportFraction: props['viewportFraction']?.toDouble() ?? 1.0,
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge),
  'TabController': (props) => TabController(
      initialIndex: props['initialIndex'] ?? 0,
      animationDuration: props['animationDuration'],
      length: props['length'],
      vsync: props['vsync']),
  'TabPageSelector': (props) => TabPageSelector(
      key: props['key'],
      controller: props['controller'],
      indicatorSize: props['indicatorSize']?.toDouble() ?? 12.0,
      color: props['color'],
      selectedColor: props['selectedColor'],
      borderStyle: props['borderStyle']),
  'TabPageSelectorIndicator': (props) => TabPageSelectorIndicator(
      key: props['key'],
      backgroundColor: props['backgroundColor'],
      borderColor: props['borderColor'],
      size: props['size']?.toDouble() ?? 0,
      borderStyle: props['borderStyle'] ?? BorderStyle.solid),
  'Table': (props) => Table(
      key: props['key'],
      children: as<TableRow>(props['children']) ?? const <TableRow>[],
      columnWidths: props['columnWidths'],
      defaultColumnWidth:
          props['defaultColumnWidth'] ?? const FlexColumnWidth(),
      textDirection: props['textDirection'],
      border: props['border'],
      defaultVerticalAlignment:
          props['defaultVerticalAlignment'] ?? TableCellVerticalAlignment.top,
      textBaseline: props['textBaseline']),
  'TableBorder': (props) => TableBorder(
      top: props['top'] ?? BorderSide.none,
      right: props['right'] ?? BorderSide.none,
      bottom: props['bottom'] ?? BorderSide.none,
      left: props['left'] ?? BorderSide.none,
      horizontalInside: props['horizontalInside'] ?? BorderSide.none,
      verticalInside: props['verticalInside'] ?? BorderSide.none,
      borderRadius: props['borderRadius'] ?? BorderRadius.zero),
  'TableBorder.all': (props) => TableBorder.all(
      color: props['color'] ?? const Color(0xFF000000),
      width: props['width']?.toDouble() ?? 1.0,
      style: props['style'] ?? BorderStyle.solid,
      borderRadius: props['borderRadius'] ?? BorderRadius.zero),
  'TableBorder.lerp': (props) => TableBorder.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'TableBorder.symmetric': (props) => TableBorder.symmetric(
      inside: props['inside'] ?? BorderSide.none,
      outside: props['outside'] ?? BorderSide.none),
  'TableCell': (props) => TableCell(
      key: props['key'],
      verticalAlignment: props['verticalAlignment'],
      child: props['child']),
  'TableCellParentData': (props) => TableCellParentData(),
  'TableCellVerticalAlignment.baseline': TableCellVerticalAlignment.baseline,
  'TableCellVerticalAlignment.bottom': TableCellVerticalAlignment.bottom,
  'TableCellVerticalAlignment.fill': TableCellVerticalAlignment.fill,
  'TableCellVerticalAlignment.middle': TableCellVerticalAlignment.middle,
  'TableCellVerticalAlignment.top': TableCellVerticalAlignment.top,
  'TableCellVerticalAlignment.values': TableCellVerticalAlignment.values,
  'TableRow': (props) => TableRow(
      key: props['key'],
      decoration: props['decoration'],
      children: as<Widget>(props['children']) ?? const <Widget>[]),
  'TableRowInkWell': (props) => TableRowInkWell(
      key: props['key'],
      child: props['child'],
      onTap: props['onTap'],
      onDoubleTap: props['onDoubleTap'],
      onLongPress: props['onLongPress'],
      onHighlightChanged: props['onHighlightChanged'],
      onSecondaryTap: props['onSecondaryTap'],
      onSecondaryTapDown: props['onSecondaryTapDown'],
      overlayColor: props['overlayColor'],
      mouseCursor: props['mouseCursor']),
  'Tangent': (props) => Tangent(props['pa'][0], props['pa'][1]),
  'Tangent.fromAngle': (props) =>
      Tangent.fromAngle(props['pa'][0], props['pa'][1]?.toDouble()),
  'TapAndHorizontalDragGestureRecognizer': (props) =>
      TapAndHorizontalDragGestureRecognizer(
          debugOwner: props['debugOwner'],
          supportedDevices: props['supportedDevices']),
  'TapAndPanGestureRecognizer': (props) => TapAndPanGestureRecognizer(
      debugOwner: props['debugOwner'],
      supportedDevices: props['supportedDevices']),
  'TapDownDetails': (props) => TapDownDetails(
      globalPosition: props['globalPosition'] ?? Offset.zero,
      localPosition: props['localPosition'],
      kind: props['kind']),
  'TapDragDownDetails': (props) => TapDragDownDetails(
      globalPosition: props['globalPosition'],
      localPosition: props['localPosition'],
      kind: props['kind'],
      consecutiveTapCount: props['consecutiveTapCount'],
      keysPressedOnDown: props['keysPressedOnDown']),
  'TapDragEndDetails': (props) => TapDragEndDetails(
      velocity: props['velocity'] ?? Velocity.zero,
      primaryVelocity: props['primaryVelocity']?.toDouble(),
      consecutiveTapCount: props['consecutiveTapCount'],
      keysPressedOnDown: props['keysPressedOnDown']),
  'TapDragStartDetails': (props) => TapDragStartDetails(
      sourceTimeStamp: props['sourceTimeStamp'],
      globalPosition: props['globalPosition'],
      localPosition: props['localPosition'],
      kind: props['kind'],
      consecutiveTapCount: props['consecutiveTapCount'],
      keysPressedOnDown: props['keysPressedOnDown']),
  'TapDragUpDetails': (props) => TapDragUpDetails(
      kind: props['kind'],
      globalPosition: props['globalPosition'],
      localPosition: props['localPosition'],
      consecutiveTapCount: props['consecutiveTapCount'],
      keysPressedOnDown: props['keysPressedOnDown']),
  'TapDragUpdateDetails': (props) => TapDragUpdateDetails(
      sourceTimeStamp: props['sourceTimeStamp'],
      delta: props['delta'] ?? Offset.zero,
      primaryDelta: props['primaryDelta']?.toDouble(),
      globalPosition: props['globalPosition'],
      kind: props['kind'],
      localPosition: props['localPosition'],
      offsetFromOrigin: props['offsetFromOrigin'],
      localOffsetFromOrigin: props['localOffsetFromOrigin'],
      consecutiveTapCount: props['consecutiveTapCount'],
      keysPressedOnDown: props['keysPressedOnDown']),
  'TapGestureRecognizer': (props) => TapGestureRecognizer(
      debugOwner: props['debugOwner'],
      supportedDevices: props['supportedDevices'],
      allowedButtonsFilter: props['allowedButtonsFilter']),
  'TapRegion': (props) => TapRegion(
      key: props['key'],
      child: props['child'],
      enabled: props['enabled'] ?? true,
      behavior: props['behavior'] ?? HitTestBehavior.deferToChild,
      onTapOutside: props['onTapOutside'],
      onTapInside: props['onTapInside'],
      groupId: props['groupId'],
      debugLabel: props['debugLabel']),
  'TapRegionSurface': (props) =>
      TapRegionSurface(key: props['key'], child: props['child']),
  'TapSemanticEvent': (props) => const TapSemanticEvent(),
  'TapUpDetails': (props) => TapUpDetails(
      kind: props['kind'],
      globalPosition: props['globalPosition'] ?? Offset.zero,
      localPosition: props['localPosition']),
  'TargetImageSize': (props) =>
      TargetImageSize(width: props['width'], height: props['height']),
  'TargetPlatform.android': TargetPlatform.android,
  'TargetPlatform.fuchsia': TargetPlatform.fuchsia,
  'TargetPlatform.iOS': TargetPlatform.iOS,
  'TargetPlatform.linux': TargetPlatform.linux,
  'TargetPlatform.macOS': TargetPlatform.macOS,
  'TargetPlatform.values': TargetPlatform.values,
  'TargetPlatform.windows': TargetPlatform.windows,
  'Text': (props) => Text(props['pa'][0],
      key: props['key'],
      style: props['style'],
      strutStyle: props['strutStyle'],
      textAlign: props['textAlign'],
      textDirection: props['textDirection'],
      locale: props['locale'],
      softWrap: props['softWrap'],
      overflow: props['overflow'],
      textScaleFactor: props['textScaleFactor']?.toDouble(),
      maxLines: props['maxLines'],
      semanticsLabel: props['semanticsLabel'],
      textWidthBasis: props['textWidthBasis'],
      textHeightBehavior: props['textHeightBehavior'],
      selectionColor: props['selectionColor']),
  'Text.rich': (props) => Text.rich(props['pa'][0],
      key: props['key'],
      style: props['style'],
      strutStyle: props['strutStyle'],
      textAlign: props['textAlign'],
      textDirection: props['textDirection'],
      locale: props['locale'],
      softWrap: props['softWrap'],
      overflow: props['overflow'],
      textScaleFactor: props['textScaleFactor']?.toDouble(),
      maxLines: props['maxLines'],
      semanticsLabel: props['semanticsLabel'],
      textWidthBasis: props['textWidthBasis'],
      textHeightBehavior: props['textHeightBehavior'],
      selectionColor: props['selectionColor']),
  'TextAffinity.downstream': TextAffinity.downstream,
  'TextAffinity.upstream': TextAffinity.upstream,
  'TextAffinity.values': TextAffinity.values,
  'TextAlign.center': TextAlign.center,
  'TextAlign.end': TextAlign.end,
  'TextAlign.justify': TextAlign.justify,
  'TextAlign.left': TextAlign.left,
  'TextAlign.right': TextAlign.right,
  'TextAlign.start': TextAlign.start,
  'TextAlign.values': TextAlign.values,
  'TextAlignVertical': (props) =>
      TextAlignVertical(y: props['y']?.toDouble() ?? 0),
  'TextAlignVertical.bottom': TextAlignVertical.bottom,
  'TextAlignVertical.center': TextAlignVertical.center,
  'TextAlignVertical.top': TextAlignVertical.top,
  'TextBaseline.alphabetic': TextBaseline.alphabetic,
  'TextBaseline.ideographic': TextBaseline.ideographic,
  'TextBaseline.values': TextBaseline.values,
  'TextBox.fromLTRBD': (props) => TextBox.fromLTRBD(
      props['pa'][0]?.toDouble(),
      props['pa'][1]?.toDouble(),
      props['pa'][2]?.toDouble(),
      props['pa'][3]?.toDouble(),
      props['pa'][4]),
  'TextButton': (props) => TextButton(
      key: props['key'],
      onPressed: props['onPressed'],
      onLongPress: props['onLongPress'],
      onHover: props['onHover'],
      onFocusChange: props['onFocusChange'],
      style: props['style'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      statesController: props['statesController'],
      isSemanticButton: props['isSemanticButton'] ?? true,
      child: props['child']),
  'TextButton.icon': (props) => TextButton.icon(
      key: props['key'],
      onPressed: props['onPressed'],
      onLongPress: props['onLongPress'],
      onHover: props['onHover'],
      onFocusChange: props['onFocusChange'],
      style: props['style'],
      focusNode: props['focusNode'],
      autofocus: props['autofocus'] ?? false,
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      statesController: props['statesController'],
      icon: props['icon'],
      label: props['label']),
  'TextButton.styleFrom': (props) => TextButton.styleFrom(
      foregroundColor: props['foregroundColor'],
      backgroundColor: props['backgroundColor'],
      disabledForegroundColor: props['disabledForegroundColor'],
      disabledBackgroundColor: props['disabledBackgroundColor'],
      shadowColor: props['shadowColor'],
      surfaceTintColor: props['surfaceTintColor'],
      iconColor: props['iconColor'],
      disabledIconColor: props['disabledIconColor'],
      elevation: props['elevation']?.toDouble(),
      textStyle: props['textStyle'],
      padding: props['padding'],
      minimumSize: props['minimumSize'],
      fixedSize: props['fixedSize'],
      maximumSize: props['maximumSize'],
      side: props['side'],
      shape: props['shape'],
      enabledMouseCursor: props['enabledMouseCursor'],
      disabledMouseCursor: props['disabledMouseCursor'],
      visualDensity: props['visualDensity'],
      tapTargetSize: props['tapTargetSize'],
      animationDuration: props['animationDuration'],
      enableFeedback: props['enableFeedback'],
      alignment: props['alignment'],
      splashFactory: props['splashFactory'],
      primary: props['primary'],
      onSurface: props['onSurface']),
  'TextButtonTheme': (props) => TextButtonTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'TextButtonTheme.of': (props) => TextButtonTheme.of(props['pa'][0]),
  'TextButtonThemeData': (props) => TextButtonThemeData(style: props['style']),
  'TextButtonThemeData.lerp': (props) => TextButtonThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'TextCapitalization.characters': TextCapitalization.characters,
  'TextCapitalization.none': TextCapitalization.none,
  'TextCapitalization.sentences': TextCapitalization.sentences,
  'TextCapitalization.values': TextCapitalization.values,
  'TextCapitalization.words': TextCapitalization.words,
  'TextDecoration.combine': (props) => TextDecoration.combine(props['pa'][0]),
  'TextDecoration.lineThrough': TextDecoration.lineThrough,
  'TextDecoration.none': TextDecoration.none,
  'TextDecoration.overline': TextDecoration.overline,
  'TextDecoration.underline': TextDecoration.underline,
  'TextDecorationStyle.dashed': TextDecorationStyle.dashed,
  'TextDecorationStyle.dotted': TextDecorationStyle.dotted,
  'TextDecorationStyle.double': TextDecorationStyle.double,
  'TextDecorationStyle.solid': TextDecorationStyle.solid,
  'TextDecorationStyle.values': TextDecorationStyle.values,
  'TextDecorationStyle.wavy': TextDecorationStyle.wavy,
  'TextDirection.ltr': TextDirection.ltr,
  'TextDirection.rtl': TextDirection.rtl,
  'TextDirection.values': TextDirection.values,
  'TextEditingController': (props) =>
      TextEditingController(text: props['text']),
  'TextEditingController.fromValue': (props) =>
      TextEditingController.fromValue(props['pa'][0]),
  'TextEditingDeltaDeletion': (props) => TextEditingDeltaDeletion(
      oldText: props['oldText'],
      deletedRange: props['deletedRange'],
      selection: props['selection'],
      composing: props['composing']),
  'TextEditingDeltaInsertion': (props) => TextEditingDeltaInsertion(
      oldText: props['oldText'],
      textInserted: props['textInserted'],
      insertionOffset: props['insertionOffset'],
      selection: props['selection'],
      composing: props['composing']),
  'TextEditingDeltaNonTextUpdate': (props) => TextEditingDeltaNonTextUpdate(
      oldText: props['oldText'],
      selection: props['selection'],
      composing: props['composing']),
  'TextEditingDeltaReplacement': (props) => TextEditingDeltaReplacement(
      oldText: props['oldText'],
      replacementText: props['replacementText'],
      replacedRange: props['replacedRange'],
      selection: props['selection'],
      composing: props['composing']),
  'TextEditingValue': (props) => TextEditingValue(
      text: props['text'] ?? '',
      selection:
          props['selection'] ?? const TextSelection.collapsed(offset: -1),
      composing: props['composing'] ?? TextRange.empty),
  'TextEditingValue.empty': TextEditingValue.empty,
  'TextEditingValue.fromJSON': (props) =>
      TextEditingValue.fromJSON(props['pa'][0]),
  'TextField': (props) => TextField(
      key: props['key'],
      controller: props['controller'],
      focusNode: props['focusNode'],
      undoController: props['undoController'],
      decoration: props['decoration'] ?? const InputDecoration(),
      keyboardType: props['keyboardType'],
      textInputAction: props['textInputAction'],
      textCapitalization:
          props['textCapitalization'] ?? TextCapitalization.none,
      style: props['style'],
      strutStyle: props['strutStyle'],
      textAlign: props['textAlign'] ?? TextAlign.start,
      textAlignVertical: props['textAlignVertical'],
      textDirection: props['textDirection'],
      readOnly: props['readOnly'] ?? false,
      toolbarOptions: props['toolbarOptions'],
      showCursor: props['showCursor'],
      autofocus: props['autofocus'] ?? false,
      obscuringCharacter: props['obscuringCharacter'] ?? '•',
      obscureText: props['obscureText'] ?? false,
      autocorrect: props['autocorrect'] ?? true,
      smartDashesType: props['smartDashesType'],
      smartQuotesType: props['smartQuotesType'],
      enableSuggestions: props['enableSuggestions'] ?? true,
      maxLines: props['maxLines'] ?? 1,
      minLines: props['minLines'],
      expands: props['expands'] ?? false,
      maxLength: props['maxLength'],
      maxLengthEnforcement: props['maxLengthEnforcement'],
      onChanged: props['onChanged'],
      onEditingComplete: props['onEditingComplete'],
      onSubmitted: props['onSubmitted'],
      onAppPrivateCommand: props['onAppPrivateCommand'],
      inputFormatters: as<TextInputFormatter>(props['inputFormatters']),
      enabled: props['enabled'],
      cursorWidth: props['cursorWidth']?.toDouble() ?? 2.0,
      cursorHeight: props['cursorHeight']?.toDouble(),
      cursorRadius: props['cursorRadius'],
      cursorOpacityAnimates: props['cursorOpacityAnimates'],
      cursorColor: props['cursorColor'],
      selectionHeightStyle:
          props['selectionHeightStyle'] ?? ui.BoxHeightStyle.tight,
      selectionWidthStyle:
          props['selectionWidthStyle'] ?? ui.BoxWidthStyle.tight,
      keyboardAppearance: props['keyboardAppearance'],
      scrollPadding: props['scrollPadding'] ?? const EdgeInsets.all(20.0),
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      enableInteractiveSelection: props['enableInteractiveSelection'],
      selectionControls: props['selectionControls'],
      onTap: props['onTap'],
      onTapOutside: props['onTapOutside'],
      mouseCursor: props['mouseCursor'],
      buildCounter: props['buildCounter'],
      scrollController: props['scrollController'],
      scrollPhysics: props['scrollPhysics'],
      autofillHints: props['autofillHints'] ?? const <String>[],
      contentInsertionConfiguration: props['contentInsertionConfiguration'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      restorationId: props['restorationId'],
      scribbleEnabled: props['scribbleEnabled'] ?? true,
      enableIMEPersonalizedLearning:
          props['enableIMEPersonalizedLearning'] ?? true,
      contextMenuBuilder:
          props['contextMenuBuilder'] ?? _defaultContextMenuBuilder,
      canRequestFocus: props['canRequestFocus'] ?? true,
      spellCheckConfiguration: props['spellCheckConfiguration'],
      magnifierConfiguration: props['magnifierConfiguration']),
  'TextField.inferAndroidSpellCheckConfiguration': (props) =>
      TextField.inferAndroidSpellCheckConfiguration(props['pa'][0]),
  'TextField.materialMisspelledTextStyle':
      TextField.materialMisspelledTextStyle,
  'TextField.noMaxLength': TextField.noMaxLength,
  'TextFieldTapRegion': (props) => TextFieldTapRegion(
      key: props['key'],
      child: props['child'],
      enabled: props['enabled'] ?? true,
      onTapOutside: props['onTapOutside'],
      onTapInside: props['onTapInside'],
      debugLabel: props['debugLabel']),
  'TextFormField': (props) => TextFormField(
      key: props['key'],
      controller: props['controller'],
      initialValue: props['initialValue'],
      focusNode: props['focusNode'],
      decoration: props['decoration'] ?? const InputDecoration(),
      keyboardType: props['keyboardType'],
      textCapitalization:
          props['textCapitalization'] ?? TextCapitalization.none,
      textInputAction: props['textInputAction'],
      style: props['style'],
      strutStyle: props['strutStyle'],
      textDirection: props['textDirection'],
      textAlign: props['textAlign'] ?? TextAlign.start,
      textAlignVertical: props['textAlignVertical'],
      autofocus: props['autofocus'] ?? false,
      readOnly: props['readOnly'] ?? false,
      toolbarOptions: props['toolbarOptions'],
      showCursor: props['showCursor'],
      obscuringCharacter: props['obscuringCharacter'] ?? '•',
      obscureText: props['obscureText'] ?? false,
      autocorrect: props['autocorrect'] ?? true,
      smartDashesType: props['smartDashesType'],
      smartQuotesType: props['smartQuotesType'],
      enableSuggestions: props['enableSuggestions'] ?? true,
      maxLengthEnforcement: props['maxLengthEnforcement'],
      maxLines: props['maxLines'] ?? 1,
      minLines: props['minLines'],
      expands: props['expands'] ?? false,
      maxLength: props['maxLength'],
      onChanged: props['onChanged'],
      onTap: props['onTap'],
      onTapOutside: props['onTapOutside'],
      onEditingComplete: props['onEditingComplete'],
      onFieldSubmitted: props['onFieldSubmitted'],
      onSaved: props['onSaved'],
      validator: props['validator'],
      inputFormatters: as<TextInputFormatter>(props['inputFormatters']),
      enabled: props['enabled'],
      cursorWidth: props['cursorWidth']?.toDouble() ?? 2.0,
      cursorHeight: props['cursorHeight']?.toDouble(),
      cursorRadius: props['cursorRadius'],
      cursorColor: props['cursorColor'],
      keyboardAppearance: props['keyboardAppearance'],
      scrollPadding: props['scrollPadding'] ?? const EdgeInsets.all(20.0),
      enableInteractiveSelection: props['enableInteractiveSelection'],
      selectionControls: props['selectionControls'],
      buildCounter: props['buildCounter'],
      scrollPhysics: props['scrollPhysics'],
      autofillHints: props['autofillHints'],
      autovalidateMode: props['autovalidateMode'],
      scrollController: props['scrollController'],
      restorationId: props['restorationId'],
      enableIMEPersonalizedLearning:
          props['enableIMEPersonalizedLearning'] ?? true,
      mouseCursor: props['mouseCursor'],
      contextMenuBuilder:
          props['contextMenuBuilder'] ?? _defaultContextMenuBuilder,
      spellCheckConfiguration: props['spellCheckConfiguration'],
      magnifierConfiguration: props['magnifierConfiguration'],
      undoController: props['undoController'],
      onAppPrivateCommand: props['onAppPrivateCommand'],
      cursorOpacityAnimates: props['cursorOpacityAnimates'],
      selectionHeightStyle:
          props['selectionHeightStyle'] ?? ui.BoxHeightStyle.tight,
      selectionWidthStyle:
          props['selectionWidthStyle'] ?? ui.BoxWidthStyle.tight,
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      contentInsertionConfiguration: props['contentInsertionConfiguration'],
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      scribbleEnabled: props['scribbleEnabled'] ?? true,
      canRequestFocus: props['canRequestFocus'] ?? true),
  'TextGranularity.character': TextGranularity.character,
  'TextGranularity.document': TextGranularity.document,
  'TextGranularity.line': TextGranularity.line,
  'TextGranularity.values': TextGranularity.values,
  'TextGranularity.word': TextGranularity.word,
  'TextHeightBehavior': (props) => TextHeightBehavior(
      applyHeightToFirstAscent: props['applyHeightToFirstAscent'] ?? true,
      applyHeightToLastDescent: props['applyHeightToLastDescent'] ?? true,
      leadingDistribution:
          props['leadingDistribution'] ?? TextLeadingDistribution.proportional),
  'TextInput.attach': (props) =>
      TextInput.attach(props['pa'][0], props['pa'][1]),
  'TextInput.ensureInitialized': (props) => TextInput.ensureInitialized(),
  'TextInput.finishAutofillContext': (props) =>
      TextInput.finishAutofillContext(shouldSave: props['shouldSave'] ?? true),
  'TextInput.registerScribbleElement': (props) =>
      TextInput.registerScribbleElement(props['pa'][0], props['pa'][1]),
  'TextInput.restorePlatformInputControl': (props) =>
      TextInput.restorePlatformInputControl(),
  'TextInput.scribbleClients': TextInput.scribbleClients,
  'TextInput.setInputControl': (props) =>
      TextInput.setInputControl(props['pa'][0]),
  'TextInput.unregisterScribbleElement': (props) =>
      TextInput.unregisterScribbleElement(props['pa'][0]),
  'TextInput.updateEditingValue': (props) =>
      TextInput.updateEditingValue(props['pa'][0]),
  'TextInputAction.continueAction': TextInputAction.continueAction,
  'TextInputAction.done': TextInputAction.done,
  'TextInputAction.emergencyCall': TextInputAction.emergencyCall,
  'TextInputAction.go': TextInputAction.go,
  'TextInputAction.join': TextInputAction.join,
  'TextInputAction.newline': TextInputAction.newline,
  'TextInputAction.next': TextInputAction.next,
  'TextInputAction.none': TextInputAction.none,
  'TextInputAction.previous': TextInputAction.previous,
  'TextInputAction.route': TextInputAction.route,
  'TextInputAction.search': TextInputAction.search,
  'TextInputAction.send': TextInputAction.send,
  'TextInputAction.unspecified': TextInputAction.unspecified,
  'TextInputAction.values': TextInputAction.values,
  'TextInputConfiguration': (props) => TextInputConfiguration(
      inputType: props['inputType'] ?? TextInputType.text,
      readOnly: props['readOnly'] ?? false,
      obscureText: props['obscureText'] ?? false,
      autocorrect: props['autocorrect'] ?? true,
      smartDashesType: props['smartDashesType'],
      smartQuotesType: props['smartQuotesType'],
      enableSuggestions: props['enableSuggestions'] ?? true,
      enableInteractiveSelection: props['enableInteractiveSelection'] ?? true,
      actionLabel: props['actionLabel'],
      inputAction: props['inputAction'] ?? TextInputAction.done,
      keyboardAppearance: props['keyboardAppearance'] ?? Brightness.light,
      textCapitalization:
          props['textCapitalization'] ?? TextCapitalization.none,
      autofillConfiguration:
          props['autofillConfiguration'] ?? AutofillConfiguration.disabled,
      enableIMEPersonalizedLearning:
          props['enableIMEPersonalizedLearning'] ?? true,
      allowedMimeTypes:
          as<String>(props['allowedMimeTypes']) ?? const <String>[],
      enableDeltaModel: props['enableDeltaModel'] ?? false),
  'TextInputType.datetime': TextInputType.datetime,
  'TextInputType.emailAddress': TextInputType.emailAddress,
  'TextInputType.multiline': TextInputType.multiline,
  'TextInputType.name': TextInputType.name,
  'TextInputType.none': TextInputType.none,
  'TextInputType.number': TextInputType.number,
  'TextInputType.numberWithOptions': (props) => TextInputType.numberWithOptions(
      signed: props['signed'] ?? false, decimal: props['decimal'] ?? false),
  'TextInputType.phone': TextInputType.phone,
  'TextInputType.streetAddress': TextInputType.streetAddress,
  'TextInputType.text': TextInputType.text,
  'TextInputType.url': TextInputType.url,
  'TextInputType.values': TextInputType.values,
  'TextInputType.visiblePassword': TextInputType.visiblePassword,
  'TextLeadingDistribution.even': TextLeadingDistribution.even,
  'TextLeadingDistribution.proportional': TextLeadingDistribution.proportional,
  'TextLeadingDistribution.values': TextLeadingDistribution.values,
  'TextMagnifier': (props) =>
      TextMagnifier(key: props['key'], magnifierInfo: props['magnifierInfo']),
  'TextMagnifier.adaptiveMagnifierConfiguration':
      TextMagnifier.adaptiveMagnifierConfiguration,
  'TextMagnifierConfiguration': (props) => TextMagnifierConfiguration(
      magnifierBuilder: props['magnifierBuilder'],
      shouldDisplayHandlesInMagnifier:
          props['shouldDisplayHandlesInMagnifier'] ?? true),
  'TextMagnifierConfiguration.disabled': TextMagnifierConfiguration.disabled,
  'TextOverflow.clip': TextOverflow.clip,
  'TextOverflow.ellipsis': TextOverflow.ellipsis,
  'TextOverflow.fade': TextOverflow.fade,
  'TextOverflow.values': TextOverflow.values,
  'TextOverflow.visible': TextOverflow.visible,
  'TextPainter': (props) => TextPainter(
      text: props['text'],
      textAlign: props['textAlign'] ?? TextAlign.start,
      textDirection: props['textDirection'],
      textScaleFactor: props['textScaleFactor']?.toDouble() ?? 1.0,
      maxLines: props['maxLines'],
      ellipsis: props['ellipsis'],
      locale: props['locale'],
      strutStyle: props['strutStyle'],
      textWidthBasis: props['textWidthBasis'] ?? TextWidthBasis.parent,
      textHeightBehavior: props['textHeightBehavior']),
  'TextPainter.computeMaxIntrinsicWidth': (props) =>
      TextPainter.computeMaxIntrinsicWidth(
          text: props['text'],
          textDirection: props['textDirection'],
          textAlign: props['textAlign'] ?? TextAlign.start,
          textScaleFactor: props['textScaleFactor']?.toDouble() ?? 1.0,
          maxLines: props['maxLines'],
          ellipsis: props['ellipsis'],
          locale: props['locale'],
          strutStyle: props['strutStyle'],
          textWidthBasis: props['textWidthBasis'] ?? TextWidthBasis.parent,
          textHeightBehavior: props['textHeightBehavior'],
          minWidth: props['minWidth']?.toDouble() ?? 0.0,
          maxWidth: props['maxWidth']?.toDouble() ?? double.infinity),
  'TextPainter.computeWidth': (props) => TextPainter.computeWidth(
      text: props['text'],
      textDirection: props['textDirection'],
      textAlign: props['textAlign'] ?? TextAlign.start,
      textScaleFactor: props['textScaleFactor']?.toDouble() ?? 1.0,
      maxLines: props['maxLines'],
      ellipsis: props['ellipsis'],
      locale: props['locale'],
      strutStyle: props['strutStyle'],
      textWidthBasis: props['textWidthBasis'] ?? TextWidthBasis.parent,
      textHeightBehavior: props['textHeightBehavior'],
      minWidth: props['minWidth']?.toDouble() ?? 0.0,
      maxWidth: props['maxWidth']?.toDouble() ?? double.infinity),
  'TextPainter.isHighSurrogate': (props) =>
      TextPainter.isHighSurrogate(props['pa'][0]),
  'TextPainter.isLowSurrogate': (props) =>
      TextPainter.isLowSurrogate(props['pa'][0]),
  'TextParentData': (props) => TextParentData(),
  'TextPosition': (props) => TextPosition(
      offset: props['offset'],
      affinity: props['affinity'] ?? TextAffinity.downstream),
  'TextRange': (props) => TextRange(start: props['start'], end: props['end']),
  'TextRange.collapsed': (props) => TextRange.collapsed(props['pa'][0]),
  'TextRange.empty': TextRange.empty,
  'TextSelection': (props) => TextSelection(
      baseOffset: props['baseOffset'],
      extentOffset: props['extentOffset'],
      affinity: props['affinity'] ?? TextAffinity.downstream,
      isDirectional: props['isDirectional'] ?? false),
  'TextSelection.collapsed': (props) => TextSelection.collapsed(
      offset: props['offset'],
      affinity: props['affinity'] ?? TextAffinity.downstream),
  'TextSelection.fromPosition': (props) =>
      TextSelection.fromPosition(props['pa'][0]),
  'TextSelectionGestureDetector': (props) => TextSelectionGestureDetector(
      key: props['key'],
      onTapDown: props['onTapDown'],
      onForcePressStart: props['onForcePressStart'],
      onForcePressEnd: props['onForcePressEnd'],
      onSecondaryTap: props['onSecondaryTap'],
      onSecondaryTapDown: props['onSecondaryTapDown'],
      onSingleTapUp: props['onSingleTapUp'],
      onSingleTapCancel: props['onSingleTapCancel'],
      onSingleLongTapStart: props['onSingleLongTapStart'],
      onSingleLongTapMoveUpdate: props['onSingleLongTapMoveUpdate'],
      onSingleLongTapEnd: props['onSingleLongTapEnd'],
      onDoubleTapDown: props['onDoubleTapDown'],
      onTripleTapDown: props['onTripleTapDown'],
      onDragSelectionStart: props['onDragSelectionStart'],
      onDragSelectionUpdate: props['onDragSelectionUpdate'],
      onDragSelectionEnd: props['onDragSelectionEnd'],
      behavior: props['behavior'],
      child: props['child']),
  'TextSelectionGestureDetectorBuilder': (props) =>
      TextSelectionGestureDetectorBuilder(delegate: props['delegate']),
  'TextSelectionHandleType.collapsed': TextSelectionHandleType.collapsed,
  'TextSelectionHandleType.left': TextSelectionHandleType.left,
  'TextSelectionHandleType.right': TextSelectionHandleType.right,
  'TextSelectionHandleType.values': TextSelectionHandleType.values,
  'TextSelectionOverlay': (props) => TextSelectionOverlay(
      value: props['value'],
      context: props['context'],
      debugRequiredFor: props['debugRequiredFor'],
      toolbarLayerLink: props['toolbarLayerLink'],
      startHandleLayerLink: props['startHandleLayerLink'],
      endHandleLayerLink: props['endHandleLayerLink'],
      renderObject: props['renderObject'],
      selectionControls: props['selectionControls'],
      handlesVisible: props['handlesVisible'] ?? false,
      selectionDelegate: props['selectionDelegate'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start,
      onSelectionHandleTapped: props['onSelectionHandleTapped'],
      clipboardStatus: props['clipboardStatus'],
      contextMenuBuilder: props['contextMenuBuilder'],
      magnifierConfiguration: props['magnifierConfiguration']),
  'TextSelectionPoint': (props) =>
      TextSelectionPoint(props['pa'][0], props['pa'][1]),
  'TextSelectionTheme': (props) => TextSelectionTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'TextSelectionTheme.of': (props) => TextSelectionTheme.of(props['pa'][0]),
  'TextSelectionThemeData': (props) => TextSelectionThemeData(
      cursorColor: props['cursorColor'],
      selectionColor: props['selectionColor'],
      selectionHandleColor: props['selectionHandleColor']),
  'TextSelectionThemeData.lerp': (props) => TextSelectionThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'TextSelectionToolbar': (props) => TextSelectionToolbar(
      key: props['key'],
      anchorAbove: props['anchorAbove'],
      anchorBelow: props['anchorBelow'],
      toolbarBuilder: props['toolbarBuilder'] ?? _defaultToolbarBuilder,
      children: as<Widget>(props['children']) ?? const []),
  'TextSelectionToolbar.kHandleSize': TextSelectionToolbar.kHandleSize,
  'TextSelectionToolbar.kToolbarContentDistanceBelow':
      TextSelectionToolbar.kToolbarContentDistanceBelow,
  'TextSelectionToolbarAnchors': (props) => TextSelectionToolbarAnchors(
      primaryAnchor: props['primaryAnchor'],
      secondaryAnchor: props['secondaryAnchor']),
  'TextSelectionToolbarAnchors.fromSelection': (props) =>
      TextSelectionToolbarAnchors.fromSelection(
          renderBox: props['renderBox'],
          startGlyphHeight: props['startGlyphHeight']?.toDouble() ?? 0,
          endGlyphHeight: props['endGlyphHeight']?.toDouble() ?? 0,
          selectionEndpoints:
              as<TextSelectionPoint>(props['selectionEndpoints']) ?? const []),
  'TextSelectionToolbarLayoutDelegate': (props) =>
      TextSelectionToolbarLayoutDelegate(
          anchorAbove: props['anchorAbove'],
          anchorBelow: props['anchorBelow'],
          fitsAbove: props['fitsAbove']),
  'TextSelectionToolbarLayoutDelegate.centerOn': (props) =>
      TextSelectionToolbarLayoutDelegate.centerOn(props['pa'][0]?.toDouble(),
          props['pa'][1]?.toDouble(), props['pa'][2]?.toDouble()),
  'TextSelectionToolbarTextButton': (props) => TextSelectionToolbarTextButton(
      key: props['key'],
      child: props['child'],
      padding: props['padding'],
      onPressed: props['onPressed'],
      alignment: props['alignment']),
  'TextSelectionToolbarTextButton.getPadding': (props) =>
      TextSelectionToolbarTextButton.getPadding(props['pa'][0], props['pa'][1]),
  'TextSpan': (props) => TextSpan(
      text: props['text'],
      children: as<InlineSpan>(props['children']),
      style: props['style'],
      recognizer: props['recognizer'],
      mouseCursor: props['mouseCursor'],
      onEnter: props['onEnter'],
      onExit: props['onExit'],
      semanticsLabel: props['semanticsLabel'],
      locale: props['locale'],
      spellOut: props['spellOut']),
  'TextStyle': (props) => TextStyle(
      inherit: props['inherit'] ?? true,
      color: props['color'],
      backgroundColor: props['backgroundColor'],
      fontSize: props['fontSize']?.toDouble(),
      fontWeight: props['fontWeight'],
      fontStyle: props['fontStyle'],
      letterSpacing: props['letterSpacing']?.toDouble(),
      wordSpacing: props['wordSpacing']?.toDouble(),
      textBaseline: props['textBaseline'],
      height: props['height']?.toDouble(),
      leadingDistribution: props['leadingDistribution'],
      locale: props['locale'],
      foreground: props['foreground'],
      background: props['background'],
      shadows: as<Shadow>(props['shadows']),
      fontFeatures: as<FontFeature>(props['fontFeatures']),
      fontVariations: as<FontVariation>(props['fontVariations']),
      decoration: props['decoration'],
      decorationColor: props['decorationColor'],
      decorationStyle: props['decorationStyle'],
      decorationThickness: props['decorationThickness']?.toDouble(),
      debugLabel: props['debugLabel'],
      fontFamily: props['fontFamily'],
      fontFamilyFallback: as<String>(props['fontFamilyFallback']),
      package: props['package'],
      overflow: props['overflow']),
  'TextStyle.lerp': (props) => TextStyle.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'TextStyleTween': (props) =>
      TextStyleTween(begin: props['begin'], end: props['end']),
  'TextTheme': (props) => TextTheme(
      displayLarge: props['displayLarge'],
      displayMedium: props['displayMedium'],
      displaySmall: props['displaySmall'],
      headlineLarge: props['headlineLarge'],
      headlineMedium: props['headlineMedium'],
      headlineSmall: props['headlineSmall'],
      titleLarge: props['titleLarge'],
      titleMedium: props['titleMedium'],
      titleSmall: props['titleSmall'],
      bodyLarge: props['bodyLarge'],
      bodyMedium: props['bodyMedium'],
      bodySmall: props['bodySmall'],
      labelLarge: props['labelLarge'],
      labelMedium: props['labelMedium'],
      labelSmall: props['labelSmall'],
      headline1: props['headline1'],
      headline2: props['headline2'],
      headline3: props['headline3'],
      headline4: props['headline4'],
      headline5: props['headline5'],
      headline6: props['headline6'],
      subtitle1: props['subtitle1'],
      subtitle2: props['subtitle2'],
      bodyText1: props['bodyText1'],
      bodyText2: props['bodyText2'],
      caption: props['caption'],
      button: props['button'],
      overline: props['overline']),
  'TextTheme.lerp': (props) => TextTheme.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'TextTreeConfiguration': (props) => TextTreeConfiguration(
      prefixLineOne: props['prefixLineOne'],
      prefixOtherLines: props['prefixOtherLines'],
      prefixLastChildLineOne: props['prefixLastChildLineOne'],
      prefixOtherLinesRootNode: props['prefixOtherLinesRootNode'],
      linkCharacter: props['linkCharacter'],
      propertyPrefixIfChildren: props['propertyPrefixIfChildren'],
      propertyPrefixNoChildren: props['propertyPrefixNoChildren'],
      lineBreak: props['lineBreak'] ?? '\n',
      lineBreakProperties: props['lineBreakProperties'] ?? true,
      afterName: props['afterName'] ?? ':',
      afterDescriptionIfBody: props['afterDescriptionIfBody'] ?? '',
      afterDescription: props['afterDescription'] ?? '',
      beforeProperties: props['beforeProperties'] ?? '',
      afterProperties: props['afterProperties'] ?? '',
      mandatoryAfterProperties: props['mandatoryAfterProperties'] ?? '',
      propertySeparator: props['propertySeparator'] ?? '',
      bodyIndent: props['bodyIndent'] ?? '',
      footer: props['footer'] ?? '',
      showChildren: props['showChildren'] ?? true,
      addBlankLineIfNoChildren: props['addBlankLineIfNoChildren'] ?? true,
      isNameOnOwnLine: props['isNameOnOwnLine'] ?? false,
      isBlankLineBetweenPropertiesAndChildren:
          props['isBlankLineBetweenPropertiesAndChildren'] ?? true,
      beforeName: props['beforeName'] ?? '',
      suffixLineOne: props['suffixLineOne'] ?? '',
      mandatoryFooter: props['mandatoryFooter'] ?? ''),
  'TextTreeRenderer': (props) => TextTreeRenderer(
      minLevel: props['minLevel'] ?? DiagnosticLevel.debug,
      wrapWidth: props['wrapWidth'] ?? 100,
      wrapWidthProperties: props['wrapWidthProperties'] ?? 65,
      maxDescendentsTruncatableNode:
          props['maxDescendentsTruncatableNode'] ?? -1),
  'TextWidthBasis.longestLine': TextWidthBasis.longestLine,
  'TextWidthBasis.parent': TextWidthBasis.parent,
  'TextWidthBasis.values': TextWidthBasis.values,
  'Texture': (props) => Texture(
      key: props['key'],
      textureId: props['textureId'],
      freeze: props['freeze'] ?? false,
      filterQuality: props['filterQuality'] ?? FilterQuality.low),
  'TextureBox': (props) => TextureBox(
      textureId: props['textureId'],
      freeze: props['freeze'] ?? false,
      filterQuality: props['filterQuality'] ?? FilterQuality.low),
  'TextureLayer': (props) => TextureLayer(
      rect: props['rect'],
      textureId: props['textureId'],
      freeze: props['freeze'] ?? false,
      filterQuality: props['filterQuality'] ?? ui.FilterQuality.low),
  'Theme': (props) =>
      Theme(key: props['key'], data: props['data'], child: props['child']),
  'Theme.of': (props) => Theme.of(props['pa'][0]),
  'ThemeData': (props) => ThemeData(
      applyElevationOverlayColor: props['applyElevationOverlayColor'],
      cupertinoOverrideTheme: props['cupertinoOverrideTheme'],
      extensions: props['extensions'],
      inputDecorationTheme: props['inputDecorationTheme'],
      materialTapTargetSize: props['materialTapTargetSize'],
      pageTransitionsTheme: props['pageTransitionsTheme'],
      platform: props['platform'],
      scrollbarTheme: props['scrollbarTheme'],
      splashFactory: props['splashFactory'],
      useMaterial3: props['useMaterial3'],
      visualDensity: props['visualDensity'],
      brightness: props['brightness'],
      canvasColor: props['canvasColor'],
      cardColor: props['cardColor'],
      colorScheme: props['colorScheme'],
      colorSchemeSeed: props['colorSchemeSeed'],
      dialogBackgroundColor: props['dialogBackgroundColor'],
      disabledColor: props['disabledColor'],
      dividerColor: props['dividerColor'],
      focusColor: props['focusColor'],
      highlightColor: props['highlightColor'],
      hintColor: props['hintColor'],
      hoverColor: props['hoverColor'],
      indicatorColor: props['indicatorColor'],
      primaryColor: props['primaryColor'],
      primaryColorDark: props['primaryColorDark'],
      primaryColorLight: props['primaryColorLight'],
      primarySwatch: props['primarySwatch'],
      scaffoldBackgroundColor: props['scaffoldBackgroundColor'],
      secondaryHeaderColor: props['secondaryHeaderColor'],
      shadowColor: props['shadowColor'],
      splashColor: props['splashColor'],
      unselectedWidgetColor: props['unselectedWidgetColor'],
      fontFamily: props['fontFamily'],
      fontFamilyFallback: as<String>(props['fontFamilyFallback']),
      package: props['package'],
      iconTheme: props['iconTheme'],
      primaryIconTheme: props['primaryIconTheme'],
      primaryTextTheme: props['primaryTextTheme'],
      textTheme: props['textTheme'],
      typography: props['typography'],
      actionIconTheme: props['actionIconTheme'],
      appBarTheme: props['appBarTheme'],
      badgeTheme: props['badgeTheme'],
      bannerTheme: props['bannerTheme'],
      bottomAppBarTheme: props['bottomAppBarTheme'],
      bottomNavigationBarTheme: props['bottomNavigationBarTheme'],
      bottomSheetTheme: props['bottomSheetTheme'],
      buttonBarTheme: props['buttonBarTheme'],
      buttonTheme: props['buttonTheme'],
      cardTheme: props['cardTheme'],
      checkboxTheme: props['checkboxTheme'],
      chipTheme: props['chipTheme'],
      dataTableTheme: props['dataTableTheme'],
      datePickerTheme: props['datePickerTheme'],
      dialogTheme: props['dialogTheme'],
      dividerTheme: props['dividerTheme'],
      drawerTheme: props['drawerTheme'],
      dropdownMenuTheme: props['dropdownMenuTheme'],
      elevatedButtonTheme: props['elevatedButtonTheme'],
      expansionTileTheme: props['expansionTileTheme'],
      filledButtonTheme: props['filledButtonTheme'],
      floatingActionButtonTheme: props['floatingActionButtonTheme'],
      iconButtonTheme: props['iconButtonTheme'],
      listTileTheme: props['listTileTheme'],
      menuBarTheme: props['menuBarTheme'],
      menuButtonTheme: props['menuButtonTheme'],
      menuTheme: props['menuTheme'],
      navigationBarTheme: props['navigationBarTheme'],
      navigationDrawerTheme: props['navigationDrawerTheme'],
      navigationRailTheme: props['navigationRailTheme'],
      outlinedButtonTheme: props['outlinedButtonTheme'],
      popupMenuTheme: props['popupMenuTheme'],
      progressIndicatorTheme: props['progressIndicatorTheme'],
      radioTheme: props['radioTheme'],
      searchBarTheme: props['searchBarTheme'],
      searchViewTheme: props['searchViewTheme'],
      segmentedButtonTheme: props['segmentedButtonTheme'],
      sliderTheme: props['sliderTheme'],
      snackBarTheme: props['snackBarTheme'],
      switchTheme: props['switchTheme'],
      tabBarTheme: props['tabBarTheme'],
      textButtonTheme: props['textButtonTheme'],
      textSelectionTheme: props['textSelectionTheme'],
      timePickerTheme: props['timePickerTheme'],
      toggleButtonsTheme: props['toggleButtonsTheme'],
      tooltipTheme: props['tooltipTheme'],
      primaryColorBrightness: props['primaryColorBrightness'],
      androidOverscrollIndicator: props['androidOverscrollIndicator'],
      toggleableActiveColor: props['toggleableActiveColor'],
      selectedRowColor: props['selectedRowColor'],
      errorColor: props['errorColor'],
      backgroundColor: props['backgroundColor'],
      bottomAppBarColor: props['bottomAppBarColor']),
  'ThemeData.dark': (props) =>
      ThemeData.dark(useMaterial3: props['useMaterial3']),
  'ThemeData.estimateBrightnessForColor': (props) =>
      ThemeData.estimateBrightnessForColor(props['pa'][0]),
  'ThemeData.fallback': (props) =>
      ThemeData.fallback(useMaterial3: props['useMaterial3']),
  'ThemeData.from': (props) => ThemeData.from(
      colorScheme: props['colorScheme'],
      textTheme: props['textTheme'],
      useMaterial3: props['useMaterial3']),
  'ThemeData.lerp': (props) => ThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'ThemeData.light': (props) =>
      ThemeData.light(useMaterial3: props['useMaterial3']),
  'ThemeData.localize': (props) =>
      ThemeData.localize(props['pa'][0], props['pa'][1]),
  'ThemeData.raw': (props) => ThemeData.raw(
      applyElevationOverlayColor: props['applyElevationOverlayColor'],
      cupertinoOverrideTheme: props['cupertinoOverrideTheme'],
      extensions: props['extensions'],
      inputDecorationTheme: props['inputDecorationTheme'],
      materialTapTargetSize: props['materialTapTargetSize'],
      pageTransitionsTheme: props['pageTransitionsTheme'],
      platform: props['platform'],
      scrollbarTheme: props['scrollbarTheme'],
      splashFactory: props['splashFactory'],
      useMaterial3: props['useMaterial3'],
      visualDensity: props['visualDensity'],
      canvasColor: props['canvasColor'],
      cardColor: props['cardColor'],
      colorScheme: props['colorScheme'],
      dialogBackgroundColor: props['dialogBackgroundColor'],
      disabledColor: props['disabledColor'],
      dividerColor: props['dividerColor'],
      focusColor: props['focusColor'],
      highlightColor: props['highlightColor'],
      hintColor: props['hintColor'],
      hoverColor: props['hoverColor'],
      indicatorColor: props['indicatorColor'],
      primaryColor: props['primaryColor'],
      primaryColorDark: props['primaryColorDark'],
      primaryColorLight: props['primaryColorLight'],
      scaffoldBackgroundColor: props['scaffoldBackgroundColor'],
      secondaryHeaderColor: props['secondaryHeaderColor'],
      shadowColor: props['shadowColor'],
      splashColor: props['splashColor'],
      unselectedWidgetColor: props['unselectedWidgetColor'],
      iconTheme: props['iconTheme'],
      primaryIconTheme: props['primaryIconTheme'],
      primaryTextTheme: props['primaryTextTheme'],
      textTheme: props['textTheme'],
      typography: props['typography'],
      actionIconTheme: props['actionIconTheme'],
      appBarTheme: props['appBarTheme'],
      badgeTheme: props['badgeTheme'],
      bannerTheme: props['bannerTheme'],
      bottomAppBarTheme: props['bottomAppBarTheme'],
      bottomNavigationBarTheme: props['bottomNavigationBarTheme'],
      bottomSheetTheme: props['bottomSheetTheme'],
      buttonBarTheme: props['buttonBarTheme'],
      buttonTheme: props['buttonTheme'],
      cardTheme: props['cardTheme'],
      checkboxTheme: props['checkboxTheme'],
      chipTheme: props['chipTheme'],
      dataTableTheme: props['dataTableTheme'],
      datePickerTheme: props['datePickerTheme'],
      dialogTheme: props['dialogTheme'],
      dividerTheme: props['dividerTheme'],
      drawerTheme: props['drawerTheme'],
      dropdownMenuTheme: props['dropdownMenuTheme'],
      elevatedButtonTheme: props['elevatedButtonTheme'],
      expansionTileTheme: props['expansionTileTheme'],
      filledButtonTheme: props['filledButtonTheme'],
      floatingActionButtonTheme: props['floatingActionButtonTheme'],
      iconButtonTheme: props['iconButtonTheme'],
      listTileTheme: props['listTileTheme'],
      menuBarTheme: props['menuBarTheme'],
      menuButtonTheme: props['menuButtonTheme'],
      menuTheme: props['menuTheme'],
      navigationBarTheme: props['navigationBarTheme'],
      navigationDrawerTheme: props['navigationDrawerTheme'],
      navigationRailTheme: props['navigationRailTheme'],
      outlinedButtonTheme: props['outlinedButtonTheme'],
      popupMenuTheme: props['popupMenuTheme'],
      progressIndicatorTheme: props['progressIndicatorTheme'],
      radioTheme: props['radioTheme'],
      searchBarTheme: props['searchBarTheme'],
      searchViewTheme: props['searchViewTheme'],
      segmentedButtonTheme: props['segmentedButtonTheme'],
      sliderTheme: props['sliderTheme'],
      snackBarTheme: props['snackBarTheme'],
      switchTheme: props['switchTheme'],
      tabBarTheme: props['tabBarTheme'],
      textButtonTheme: props['textButtonTheme'],
      textSelectionTheme: props['textSelectionTheme'],
      timePickerTheme: props['timePickerTheme'],
      toggleButtonsTheme: props['toggleButtonsTheme'],
      tooltipTheme: props['tooltipTheme'],
      primaryColorBrightness: props['primaryColorBrightness'],
      androidOverscrollIndicator: props['androidOverscrollIndicator'],
      toggleableActiveColor: props['toggleableActiveColor'],
      selectedRowColor: props['selectedRowColor'],
      errorColor: props['errorColor'],
      backgroundColor: props['backgroundColor'],
      bottomAppBarColor: props['bottomAppBarColor']),
  'ThemeDataTween': (props) =>
      ThemeDataTween(begin: props['begin'], end: props['end']),
  'ThemeMode.dark': ThemeMode.dark,
  'ThemeMode.light': ThemeMode.light,
  'ThemeMode.system': ThemeMode.system,
  'ThemeMode.values': ThemeMode.values,
  'ThreePointCubic': (props) => ThreePointCubic(props['pa'][0], props['pa'][1],
      props['pa'][2], props['pa'][3], props['pa'][4]),
  'Threshold': (props) => Threshold(props['pa'][0]?.toDouble()),
  'Thumb.end': Thumb.end,
  'Thumb.start': Thumb.start,
  'Thumb.values': Thumb.values,
  'Ticker': (props) => Ticker(props['pa'][0], debugLabel: props['debugLabel']),
  'TickerCanceled': (props) =>
      TickerCanceled((props['pa'].length > 0 ? props['pa'][0] : null)),
  'TickerFuture.complete': (props) => TickerFuture.complete(),
  'TickerMode': (props) => TickerMode(
      key: props['key'], enabled: props['enabled'], child: props['child']),
  'TickerMode.getNotifier': (props) => TickerMode.getNotifier(props['pa'][0]),
  'TickerMode.of': (props) => TickerMode.of(props['pa'][0]),
  'TileMode.clamp': TileMode.clamp,
  'TileMode.decal': TileMode.decal,
  'TileMode.mirror': TileMode.mirror,
  'TileMode.repeated': TileMode.repeated,
  'TileMode.values': TileMode.values,
  'TimeOfDay': (props) =>
      TimeOfDay(hour: props['hour'], minute: props['minute']),
  'TimeOfDay.fromDateTime': (props) => TimeOfDay.fromDateTime(props['pa'][0]),
  'TimeOfDay.hoursPerDay': TimeOfDay.hoursPerDay,
  'TimeOfDay.hoursPerPeriod': TimeOfDay.hoursPerPeriod,
  'TimeOfDay.minutesPerHour': TimeOfDay.minutesPerHour,
  'TimeOfDay.now': (props) => TimeOfDay.now(),
  'TimeOfDayFormat.HH_colon_mm': TimeOfDayFormat.HH_colon_mm,
  'TimeOfDayFormat.HH_dot_mm': TimeOfDayFormat.HH_dot_mm,
  'TimeOfDayFormat.H_colon_mm': TimeOfDayFormat.H_colon_mm,
  'TimeOfDayFormat.a_space_h_colon_mm': TimeOfDayFormat.a_space_h_colon_mm,
  'TimeOfDayFormat.frenchCanadian': TimeOfDayFormat.frenchCanadian,
  'TimeOfDayFormat.h_colon_mm_space_a': TimeOfDayFormat.h_colon_mm_space_a,
  'TimeOfDayFormat.values': TimeOfDayFormat.values,
  'TimePickerDialog': (props) => TimePickerDialog(
      key: props['key'],
      initialTime: props['initialTime'],
      cancelText: props['cancelText'],
      confirmText: props['confirmText'],
      helpText: props['helpText'],
      errorInvalidText: props['errorInvalidText'],
      hourLabelText: props['hourLabelText'],
      minuteLabelText: props['minuteLabelText'],
      restorationId: props['restorationId'],
      initialEntryMode: props['initialEntryMode'] ?? TimePickerEntryMode.dial,
      orientation: props['orientation'],
      onEntryModeChanged: props['onEntryModeChanged']),
  'TimePickerEntryMode.dial': TimePickerEntryMode.dial,
  'TimePickerEntryMode.dialOnly': TimePickerEntryMode.dialOnly,
  'TimePickerEntryMode.input': TimePickerEntryMode.input,
  'TimePickerEntryMode.inputOnly': TimePickerEntryMode.inputOnly,
  'TimePickerEntryMode.values': TimePickerEntryMode.values,
  'TimePickerTheme': (props) => TimePickerTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'TimePickerTheme.of': (props) => TimePickerTheme.of(props['pa'][0]),
  'TimePickerThemeData': (props) => TimePickerThemeData(
      backgroundColor: props['backgroundColor'],
      cancelButtonStyle: props['cancelButtonStyle'],
      confirmButtonStyle: props['confirmButtonStyle'],
      dayPeriodBorderSide: props['dayPeriodBorderSide'],
      dayPeriodColor: props['dayPeriodColor'],
      dayPeriodShape: props['dayPeriodShape'],
      dayPeriodTextColor: props['dayPeriodTextColor'],
      dayPeriodTextStyle: props['dayPeriodTextStyle'],
      dialBackgroundColor: props['dialBackgroundColor'],
      dialHandColor: props['dialHandColor'],
      dialTextColor: props['dialTextColor'],
      dialTextStyle: props['dialTextStyle'],
      elevation: props['elevation']?.toDouble(),
      entryModeIconColor: props['entryModeIconColor'],
      helpTextStyle: props['helpTextStyle'],
      hourMinuteColor: props['hourMinuteColor'],
      hourMinuteShape: props['hourMinuteShape'],
      hourMinuteTextColor: props['hourMinuteTextColor'],
      hourMinuteTextStyle: props['hourMinuteTextStyle'],
      inputDecorationTheme: props['inputDecorationTheme'],
      padding: props['padding'],
      shape: props['shape']),
  'TimePickerThemeData.lerp': (props) => TimePickerThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'Title': (props) => Title(
      key: props['key'],
      title: props['title'] ?? '',
      color: props['color'],
      child: props['child']),
  'ToggleButtons': (props) => ToggleButtons(
      key: props['key'],
      children: as<Widget>(props['children']) ?? const [],
      isSelected: as<bool>(props['isSelected']) ?? const [],
      onPressed: props['onPressed'],
      mouseCursor: props['mouseCursor'],
      tapTargetSize: props['tapTargetSize'],
      textStyle: props['textStyle'],
      constraints: props['constraints'],
      color: props['color'],
      selectedColor: props['selectedColor'],
      disabledColor: props['disabledColor'],
      fillColor: props['fillColor'],
      focusColor: props['focusColor'],
      highlightColor: props['highlightColor'],
      hoverColor: props['hoverColor'],
      splashColor: props['splashColor'],
      focusNodes: as<FocusNode>(props['focusNodes']),
      renderBorder: props['renderBorder'] ?? true,
      borderColor: props['borderColor'],
      selectedBorderColor: props['selectedBorderColor'],
      disabledBorderColor: props['disabledBorderColor'],
      borderRadius: props['borderRadius'],
      borderWidth: props['borderWidth']?.toDouble(),
      direction: props['direction'] ?? Axis.horizontal,
      verticalDirection: props['verticalDirection'] ?? VerticalDirection.down),
  'ToggleButtonsTheme': (props) => ToggleButtonsTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'ToggleButtonsTheme.of': (props) => ToggleButtonsTheme.of(props['pa'][0]),
  'ToggleButtonsThemeData': (props) => ToggleButtonsThemeData(
      textStyle: props['textStyle'],
      constraints: props['constraints'],
      color: props['color'],
      selectedColor: props['selectedColor'],
      disabledColor: props['disabledColor'],
      fillColor: props['fillColor'],
      focusColor: props['focusColor'],
      highlightColor: props['highlightColor'],
      hoverColor: props['hoverColor'],
      splashColor: props['splashColor'],
      borderColor: props['borderColor'],
      selectedBorderColor: props['selectedBorderColor'],
      disabledBorderColor: props['disabledBorderColor'],
      borderRadius: props['borderRadius'],
      borderWidth: props['borderWidth']?.toDouble()),
  'ToggleButtonsThemeData.lerp': (props) => ToggleButtonsThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'Tolerance': (props) => Tolerance(
      distance: props['distance']?.toDouble() ?? _epsilonDefault,
      time: props['time']?.toDouble() ?? _epsilonDefault,
      velocity: props['velocity']?.toDouble() ?? _epsilonDefault),
  'Tolerance.defaultTolerance': Tolerance.defaultTolerance,
  'ToolbarItemsParentData': (props) => ToolbarItemsParentData(),
  'Tooltip': (props) => Tooltip(
      key: props['key'],
      message: props['message'],
      richMessage: props['richMessage'],
      height: props['height']?.toDouble(),
      padding: props['padding'],
      margin: props['margin'],
      verticalOffset: props['verticalOffset']?.toDouble(),
      preferBelow: props['preferBelow'],
      excludeFromSemantics: props['excludeFromSemantics'],
      decoration: props['decoration'],
      textStyle: props['textStyle'],
      textAlign: props['textAlign'],
      waitDuration: props['waitDuration'],
      showDuration: props['showDuration'],
      triggerMode: props['triggerMode'],
      enableFeedback: props['enableFeedback'],
      onTriggered: props['onTriggered'],
      child: props['child']),
  'Tooltip.dismissAllToolTips': (props) => Tooltip.dismissAllToolTips(),
  'TooltipSemanticsEvent': (props) => TooltipSemanticsEvent(props['pa'][0]),
  'TooltipTheme': (props) => TooltipTheme(
      key: props['key'], data: props['data'], child: props['child']),
  'TooltipTheme.of': (props) => TooltipTheme.of(props['pa'][0]),
  'TooltipThemeData': (props) => TooltipThemeData(
      height: props['height']?.toDouble(),
      padding: props['padding'],
      margin: props['margin'],
      verticalOffset: props['verticalOffset']?.toDouble(),
      preferBelow: props['preferBelow'],
      excludeFromSemantics: props['excludeFromSemantics'],
      decoration: props['decoration'],
      textStyle: props['textStyle'],
      textAlign: props['textAlign'],
      waitDuration: props['waitDuration'],
      showDuration: props['showDuration'],
      triggerMode: props['triggerMode'],
      enableFeedback: props['enableFeedback']),
  'TooltipThemeData.lerp': (props) => TooltipThemeData.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'TooltipTriggerMode.longPress': TooltipTriggerMode.longPress,
  'TooltipTriggerMode.manual': TooltipTriggerMode.manual,
  'TooltipTriggerMode.tap': TooltipTriggerMode.tap,
  'TooltipTriggerMode.values': TooltipTriggerMode.values,
  'TooltipVisibility': (props) => TooltipVisibility(
      key: props['key'], visible: props['visible'], child: props['child']),
  'TooltipVisibility.of': (props) => TooltipVisibility.of(props['pa'][0]),
  'TrackingScrollController': (props) => TrackingScrollController(
      initialScrollOffset: props['initialScrollOffset']?.toDouble() ?? 0.0,
      keepScrollOffset: props['keepScrollOffset'] ?? true,
      debugLabel: props['debugLabel']),
  'TrainHoppingAnimation': (props) => TrainHoppingAnimation(
      props['pa'][0], props['pa'][1],
      onSwitchedTrain: props['onSwitchedTrain']),
  'Transform': (props) => Transform(
      key: props['key'],
      transform: props['transform'],
      origin: props['origin'],
      alignment: props['alignment'],
      transformHitTests: props['transformHitTests'] ?? true,
      filterQuality: props['filterQuality'],
      child: props['child']),
  'Transform.flip': (props) => Transform.flip(
      key: props['key'],
      flipX: props['flipX'] ?? false,
      flipY: props['flipY'] ?? false,
      origin: props['origin'],
      transformHitTests: props['transformHitTests'] ?? true,
      filterQuality: props['filterQuality'],
      child: props['child']),
  'Transform.rotate': (props) => Transform.rotate(
      key: props['key'],
      angle: props['angle']?.toDouble() ?? 0,
      origin: props['origin'],
      alignment: props['alignment'] ?? Alignment.center,
      transformHitTests: props['transformHitTests'] ?? true,
      filterQuality: props['filterQuality'],
      child: props['child']),
  'Transform.scale': (props) => Transform.scale(
      key: props['key'],
      scale: props['scale']?.toDouble(),
      scaleX: props['scaleX']?.toDouble(),
      scaleY: props['scaleY']?.toDouble(),
      origin: props['origin'],
      alignment: props['alignment'] ?? Alignment.center,
      transformHitTests: props['transformHitTests'] ?? true,
      filterQuality: props['filterQuality'],
      child: props['child']),
  'Transform.translate': (props) => Transform.translate(
      key: props['key'],
      offset: props['offset'],
      transformHitTests: props['transformHitTests'] ?? true,
      filterQuality: props['filterQuality'],
      child: props['child']),
  'TransformLayer': (props) => TransformLayer(
      transform: props['transform'], offset: props['offset'] ?? Offset.zero),
  'TransformProperty': (props) => TransformProperty(
      props['pa'][0], props['pa'][1],
      showName: props['showName'] ?? true,
      defaultValue: props['defaultValue'] ?? kNoDefaultValue,
      level: props['level'] ?? DiagnosticLevel.info),
  'TransformationController': (props) => TransformationController(
      (props['pa'].length > 0 ? props['pa'][0] : null)),
  'TransposeCharactersIntent': (props) => const TransposeCharactersIntent(),
  'TraversalDirection.down': TraversalDirection.down,
  'TraversalDirection.left': TraversalDirection.left,
  'TraversalDirection.right': TraversalDirection.right,
  'TraversalDirection.up': TraversalDirection.up,
  'TraversalDirection.values': TraversalDirection.values,
  'TraversalEdgeBehavior.closedLoop': TraversalEdgeBehavior.closedLoop,
  'TraversalEdgeBehavior.leaveFlutterView':
      TraversalEdgeBehavior.leaveFlutterView,
  'TraversalEdgeBehavior.values': TraversalEdgeBehavior.values,
  'Tween': (props) => Tween(begin: props['begin'], end: props['end']),
  'TweenAnimationBuilder': (props) => TweenAnimationBuilder(
      key: props['key'],
      tween: props['tween'],
      duration: props['duration'],
      curve: props['curve'] ?? Curves.linear,
      builder: props['builder'],
      onEnd: props['onEnd'],
      child: props['child']),
  'TweenSequence': (props) => TweenSequence(props['pa'][0]),
  'TweenSequenceItem': (props) => TweenSequenceItem(
      tween: props['tween'], weight: props['weight']?.toDouble() ?? 0),
  'Typography': (props) => Typography(
      platform: props['platform'],
      black: props['black'],
      white: props['white'],
      englishLike: props['englishLike'],
      dense: props['dense'],
      tall: props['tall']),
  'Typography.blackCupertino': Typography.blackCupertino,
  'Typography.blackHelsinki': Typography.blackHelsinki,
  'Typography.blackMountainView': Typography.blackMountainView,
  'Typography.blackRedmond': Typography.blackRedmond,
  'Typography.blackRedwoodCity': Typography.blackRedwoodCity,
  'Typography.dense2014': Typography.dense2014,
  'Typography.dense2018': Typography.dense2018,
  'Typography.dense2021': Typography.dense2021,
  'Typography.englishLike2014': Typography.englishLike2014,
  'Typography.englishLike2018': Typography.englishLike2018,
  'Typography.englishLike2021': Typography.englishLike2021,
  'Typography.lerp': (props) => Typography.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'Typography.material2014': (props) => Typography.material2014(
      platform: props['platform'] ?? TargetPlatform.android,
      black: props['black'],
      white: props['white'],
      englishLike: props['englishLike'],
      dense: props['dense'],
      tall: props['tall']),
  'Typography.material2018': (props) => Typography.material2018(
      platform: props['platform'] ?? TargetPlatform.android,
      black: props['black'],
      white: props['white'],
      englishLike: props['englishLike'],
      dense: props['dense'],
      tall: props['tall']),
  'Typography.material2021': (props) => Typography.material2021(
      platform: props['platform'] ?? TargetPlatform.android,
      colorScheme: props['colorScheme'] ?? const ColorScheme.light(),
      black: props['black'],
      white: props['white'],
      englishLike: props['englishLike'],
      dense: props['dense'],
      tall: props['tall']),
  'Typography.tall2014': Typography.tall2014,
  'Typography.tall2018': Typography.tall2018,
  'Typography.tall2021': Typography.tall2021,
  'Typography.whiteCupertino': Typography.whiteCupertino,
  'Typography.whiteHelsinki': Typography.whiteHelsinki,
  'Typography.whiteMountainView': Typography.whiteMountainView,
  'Typography.whiteRedmond': Typography.whiteRedmond,
  'Typography.whiteRedwoodCity': Typography.whiteRedwoodCity,
  'UiKitView': (props) => UiKitView(
      key: props['key'],
      viewType: props['viewType'],
      onPlatformViewCreated: props['onPlatformViewCreated'],
      hitTestBehavior:
          props['hitTestBehavior'] ?? PlatformViewHitTestBehavior.opaque,
      layoutDirection: props['layoutDirection'],
      creationParams: props['creationParams'],
      creationParamsCodec: props['creationParamsCodec'],
      gestureRecognizers: props['gestureRecognizers']),
  'UnconstrainedBox': (props) => UnconstrainedBox(
      key: props['key'],
      child: props['child'],
      textDirection: props['textDirection'],
      alignment: props['alignment'] ?? Alignment.center,
      constrainedAxis: props['constrainedAxis'],
      clipBehavior: props['clipBehavior'] ?? Clip.none),
  'UnderlineInputBorder': (props) => UnderlineInputBorder(
      borderSide: props['borderSide'] ?? const BorderSide(),
      borderRadius: props['borderRadius'] ??
          const BorderRadius.only(
              topLeft: Radius.circular(4.0), topRight: Radius.circular(4.0))),
  'UnderlineTabIndicator': (props) => UnderlineTabIndicator(
      borderRadius: props['borderRadius'],
      borderSide: props['borderSide'] ??
          const BorderSide(width: 2.0, color: Colors.white),
      insets: props['insets'] ?? EdgeInsets.zero),
  'UndoDirection.redo': UndoDirection.redo,
  'UndoDirection.undo': UndoDirection.undo,
  'UndoDirection.values': UndoDirection.values,
  'UndoHistory': (props) => UndoHistory(
      key: props['key'],
      shouldChangeUndoStack: props['shouldChangeUndoStack'],
      value: props['value'],
      onTriggered: props['onTriggered'],
      focusNode: props['focusNode'],
      controller: props['controller'],
      child: props['child']),
  'UndoHistoryController': (props) =>
      UndoHistoryController(value: props['value']),
  'UndoHistoryValue': (props) => UndoHistoryValue(
      canUndo: props['canUndo'] ?? false, canRedo: props['canRedo'] ?? false),
  'UndoHistoryValue.empty': UndoHistoryValue.empty,
  'UndoManager.client': UndoManager.client,
  'UndoManager.setUndoState': (props) => UndoManager.setUndoState(
      canUndo: props['canUndo'] ?? false, canRedo: props['canRedo'] ?? false),
  'UndoTextIntent': (props) => UndoTextIntent(props['pa'][0]),
  'UnfocusDisposition.previouslyFocusedChild':
      UnfocusDisposition.previouslyFocusedChild,
  'UnfocusDisposition.scope': UnfocusDisposition.scope,
  'UnfocusDisposition.values': UnfocusDisposition.values,
  'UniqueKey': (props) => UniqueKey(),
  'UnmanagedRestorationScope': (props) => UnmanagedRestorationScope(
      key: props['key'], bucket: props['bucket'], child: props['child']),
  'UpdateSelectionIntent': (props) =>
      UpdateSelectionIntent(props['pa'][0], props['pa'][1], props['pa'][2]),
  'UserAccountsDrawerHeader': (props) => UserAccountsDrawerHeader(
      key: props['key'],
      decoration: props['decoration'],
      margin: props['margin'] ?? const EdgeInsets.only(bottom: 8.0),
      currentAccountPicture: props['currentAccountPicture'],
      otherAccountsPictures: as<Widget>(props['otherAccountsPictures']),
      currentAccountPictureSize:
          props['currentAccountPictureSize'] ?? const Size.square(72.0),
      otherAccountsPicturesSize:
          props['otherAccountsPicturesSize'] ?? const Size.square(40.0),
      accountName: props['accountName'],
      accountEmail: props['accountEmail'],
      onDetailsPressed: props['onDetailsPressed'],
      arrowColor: props['arrowColor'] ?? Colors.white),
  'UserScrollNotification': (props) => UserScrollNotification(
      metrics: props['metrics'],
      context: props['context'],
      direction: props['direction']),
  'ValueKey': (props) => ValueKey(props['pa'][0]),
  'ValueListenableBuilder': (props) => ValueListenableBuilder(
      key: props['key'],
      valueListenable: props['valueListenable'],
      builder: props['builder'],
      child: props['child']),
  'ValueNotifier': (props) => ValueNotifier(props['pa'][0]),
  'Velocity': (props) => Velocity(pixelsPerSecond: props['pixelsPerSecond']),
  'Velocity.zero': Velocity.zero,
  'VelocityEstimate': (props) => VelocityEstimate(
      pixelsPerSecond: props['pixelsPerSecond'],
      confidence: props['confidence']?.toDouble() ?? 0,
      duration: props['duration'],
      offset: props['offset']),
  'VelocityTracker.withKind': (props) =>
      VelocityTracker.withKind(props['pa'][0]),
  'VertexMode.triangleFan': VertexMode.triangleFan,
  'VertexMode.triangleStrip': VertexMode.triangleStrip,
  'VertexMode.triangles': VertexMode.triangles,
  'VertexMode.values': VertexMode.values,
  'VerticalDirection.down': VerticalDirection.down,
  'VerticalDirection.up': VerticalDirection.up,
  'VerticalDirection.values': VerticalDirection.values,
  'VerticalDivider': (props) => VerticalDivider(
      key: props['key'],
      width: props['width']?.toDouble(),
      thickness: props['thickness']?.toDouble(),
      indent: props['indent']?.toDouble(),
      endIndent: props['endIndent']?.toDouble(),
      color: props['color']),
  'VerticalDragGestureRecognizer': (props) => VerticalDragGestureRecognizer(
      debugOwner: props['debugOwner'],
      supportedDevices: props['supportedDevices'],
      allowedButtonsFilter: props['allowedButtonsFilter']),
  'VerticalMultiDragGestureRecognizer': (props) =>
      VerticalMultiDragGestureRecognizer(
          debugOwner: props['debugOwner'],
          supportedDevices: props['supportedDevices'],
          allowedButtonsFilter: props['allowedButtonsFilter']),
  'Vertices': (props) => Vertices(props['pa'][0], props['pa'][1],
      colors: as<Color>(props['colors']),
      textureCoordinates: as<Offset>(props['textureCoordinates']),
      indices: as<int>(props['indices'])),
  'Vertices.raw': (props) => Vertices.raw(props['pa'][0], props['pa'][1],
      colors: props['colors'],
      textureCoordinates: props['textureCoordinates'],
      indices: props['indices']),
  'View': (props) => View(view: props['view'], child: props['child']),
  'View.maybeOf': (props) => View.maybeOf(props['pa'][0]),
  'View.of': (props) => View.of(props['pa'][0]),
  'ViewConfiguration': (props) => ViewConfiguration(
      size: props['size'] ?? Size.zero,
      devicePixelRatio: props['devicePixelRatio']?.toDouble() ?? 1.0),
  'ViewPadding.zero': ViewPadding.zero,
  'Viewport': (props) => Viewport(
      key: props['key'],
      axisDirection: props['axisDirection'] ?? AxisDirection.down,
      crossAxisDirection: props['crossAxisDirection'],
      anchor: props['anchor']?.toDouble() ?? 0.0,
      offset: props['offset'],
      center: props['center'],
      cacheExtent: props['cacheExtent']?.toDouble(),
      cacheExtentStyle: props['cacheExtentStyle'] ?? CacheExtentStyle.pixel,
      clipBehavior: props['clipBehavior'] ?? Clip.hardEdge,
      slivers: as<Widget>(props['slivers']) ?? const <Widget>[]),
  'Viewport.getDefaultCrossAxisDirection': (props) =>
      Viewport.getDefaultCrossAxisDirection(props['pa'][0], props['pa'][1]),
  'Visibility': (props) => Visibility(
      key: props['key'],
      child: props['child'],
      replacement: props['replacement'] ?? const SizedBox.shrink(),
      visible: props['visible'] ?? true,
      maintainState: props['maintainState'] ?? false,
      maintainAnimation: props['maintainAnimation'] ?? false,
      maintainSize: props['maintainSize'] ?? false,
      maintainSemantics: props['maintainSemantics'] ?? false,
      maintainInteractivity: props['maintainInteractivity'] ?? false),
  'Visibility.maintain': (props) => Visibility.maintain(
      key: props['key'],
      child: props['child'],
      visible: props['visible'] ?? true),
  'Visibility.of': (props) => Visibility.of(props['pa'][0]),
  'VisualDensity': (props) => VisualDensity(
      horizontal: props['horizontal']?.toDouble() ?? 0.0,
      vertical: props['vertical']?.toDouble() ?? 0.0),
  'VisualDensity.adaptivePlatformDensity':
      VisualDensity.adaptivePlatformDensity,
  'VisualDensity.comfortable': VisualDensity.comfortable,
  'VisualDensity.compact': VisualDensity.compact,
  'VisualDensity.defaultDensityForPlatform': (props) =>
      VisualDensity.defaultDensityForPlatform(props['pa'][0]),
  'VisualDensity.lerp': (props) => VisualDensity.lerp(
      props['pa'][0], props['pa'][1], props['pa'][2]?.toDouble()),
  'VisualDensity.maximumDensity': VisualDensity.maximumDensity,
  'VisualDensity.minimumDensity': VisualDensity.minimumDensity,
  'VisualDensity.standard': VisualDensity.standard,
  'VoidCallbackAction': (props) => VoidCallbackAction(),
  'VoidCallbackIntent': (props) => VoidCallbackIntent(props['pa'][0]),
  'WidgetInspectorServiceExtensions.addPubRootDirectories':
      WidgetInspectorServiceExtensions.addPubRootDirectories,
  'WidgetInspectorServiceExtensions.disposeAllGroups':
      WidgetInspectorServiceExtensions.disposeAllGroups,
  'WidgetInspectorServiceExtensions.disposeGroup':
      WidgetInspectorServiceExtensions.disposeGroup,
  'WidgetInspectorServiceExtensions.disposeId':
      WidgetInspectorServiceExtensions.disposeId,
  'WidgetInspectorServiceExtensions.getChildren':
      WidgetInspectorServiceExtensions.getChildren,
  'WidgetInspectorServiceExtensions.getChildrenDetailsSubtree':
      WidgetInspectorServiceExtensions.getChildrenDetailsSubtree,
  'WidgetInspectorServiceExtensions.getChildrenSummaryTree':
      WidgetInspectorServiceExtensions.getChildrenSummaryTree,
  'WidgetInspectorServiceExtensions.getDetailsSubtree':
      WidgetInspectorServiceExtensions.getDetailsSubtree,
  'WidgetInspectorServiceExtensions.getLayoutExplorerNode':
      WidgetInspectorServiceExtensions.getLayoutExplorerNode,
  'WidgetInspectorServiceExtensions.getParentChain':
      WidgetInspectorServiceExtensions.getParentChain,
  'WidgetInspectorServiceExtensions.getProperties':
      WidgetInspectorServiceExtensions.getProperties,
  'WidgetInspectorServiceExtensions.getPubRootDirectories':
      WidgetInspectorServiceExtensions.getPubRootDirectories,
  'WidgetInspectorServiceExtensions.getRootWidget':
      WidgetInspectorServiceExtensions.getRootWidget,
  'WidgetInspectorServiceExtensions.getRootWidgetSummaryTree':
      WidgetInspectorServiceExtensions.getRootWidgetSummaryTree,
  'WidgetInspectorServiceExtensions.getRootWidgetSummaryTreeWithPreviews':
      WidgetInspectorServiceExtensions.getRootWidgetSummaryTreeWithPreviews,
  'WidgetInspectorServiceExtensions.getSelectedSummaryWidget':
      WidgetInspectorServiceExtensions.getSelectedSummaryWidget,
  'WidgetInspectorServiceExtensions.getSelectedWidget':
      WidgetInspectorServiceExtensions.getSelectedWidget,
  'WidgetInspectorServiceExtensions.isWidgetCreationTracked':
      WidgetInspectorServiceExtensions.isWidgetCreationTracked,
  'WidgetInspectorServiceExtensions.isWidgetTreeReady':
      WidgetInspectorServiceExtensions.isWidgetTreeReady,
  'WidgetInspectorServiceExtensions.removePubRootDirectories':
      WidgetInspectorServiceExtensions.removePubRootDirectories,
  'WidgetInspectorServiceExtensions.screenshot':
      WidgetInspectorServiceExtensions.screenshot,
  'WidgetInspectorServiceExtensions.setFlexFactor':
      WidgetInspectorServiceExtensions.setFlexFactor,
  'WidgetInspectorServiceExtensions.setFlexFit':
      WidgetInspectorServiceExtensions.setFlexFit,
  'WidgetInspectorServiceExtensions.setFlexProperties':
      WidgetInspectorServiceExtensions.setFlexProperties,
  'WidgetInspectorServiceExtensions.setSelectionById':
      WidgetInspectorServiceExtensions.setSelectionById,
  'WidgetInspectorServiceExtensions.show':
      WidgetInspectorServiceExtensions.show,
  'WidgetInspectorServiceExtensions.structuredErrors':
      WidgetInspectorServiceExtensions.structuredErrors,
  'WidgetInspectorServiceExtensions.trackRebuildDirtyWidgets':
      WidgetInspectorServiceExtensions.trackRebuildDirtyWidgets,
  'WidgetInspectorServiceExtensions.trackRepaintWidgets':
      WidgetInspectorServiceExtensions.trackRepaintWidgets,
  'WidgetInspectorServiceExtensions.values':
      WidgetInspectorServiceExtensions.values,
  'WidgetOrderTraversalPolicy': (props) => WidgetOrderTraversalPolicy(
      requestFocusCallback: props['requestFocusCallback']),
  'WidgetSpan': (props) => WidgetSpan(
      child: props['child'],
      alignment: props['alignment'] ?? ui.PlaceholderAlignment.bottom,
      baseline: props['baseline'],
      style: props['style']),
  'WidgetToRenderBoxAdapter': (props) => WidgetToRenderBoxAdapter(
      renderBox: props['renderBox'],
      onBuild: props['onBuild'],
      onUnmount: props['onUnmount']),
  'WidgetsApp': (props) => WidgetsApp(
      key: props['key'],
      navigatorKey: props['navigatorKey'],
      onGenerateRoute: props['onGenerateRoute'],
      onGenerateInitialRoutes: props['onGenerateInitialRoutes'],
      onUnknownRoute: props['onUnknownRoute'],
      navigatorObservers: as<NavigatorObserver>(props['navigatorObservers']) ??
          const <NavigatorObserver>[],
      initialRoute: props['initialRoute'],
      pageRouteBuilder: props['pageRouteBuilder'],
      home: props['home'],
      routes: props['routes'] ?? const <String, WidgetBuilder>{},
      builder: props['builder'],
      title: props['title'] ?? '',
      onGenerateTitle: props['onGenerateTitle'],
      textStyle: props['textStyle'],
      color: props['color'],
      locale: props['locale'],
      localizationsDelegates: props['localizationsDelegates'],
      localeListResolutionCallback: props['localeListResolutionCallback'],
      localeResolutionCallback: props['localeResolutionCallback'],
      supportedLocales:
          props['supportedLocales'] ?? const <Locale>[Locale('en', 'US')],
      showPerformanceOverlay: props['showPerformanceOverlay'] ?? false,
      checkerboardRasterCacheImages:
          props['checkerboardRasterCacheImages'] ?? false,
      checkerboardOffscreenLayers:
          props['checkerboardOffscreenLayers'] ?? false,
      showSemanticsDebugger: props['showSemanticsDebugger'] ?? false,
      debugShowWidgetInspector: props['debugShowWidgetInspector'] ?? false,
      debugShowCheckedModeBanner: props['debugShowCheckedModeBanner'] ?? true,
      inspectorSelectButtonBuilder: props['inspectorSelectButtonBuilder'],
      shortcuts: props['shortcuts'],
      actions: props['actions'],
      restorationScopeId: props['restorationScopeId'],
      useInheritedMediaQuery: props['useInheritedMediaQuery'] ?? false),
  'WidgetsApp.debugAllowBannerOverride': WidgetsApp.debugAllowBannerOverride,
  'WidgetsApp.debugShowWidgetInspectorOverride':
      WidgetsApp.debugShowWidgetInspectorOverride,
  'WidgetsApp.defaultActions': WidgetsApp.defaultActions,
  'WidgetsApp.defaultShortcuts': WidgetsApp.defaultShortcuts,
  'WidgetsApp.router': (props) => WidgetsApp.router(
      key: props['key'],
      routeInformationProvider: props['routeInformationProvider'],
      routeInformationParser: props['routeInformationParser'],
      routerDelegate: props['routerDelegate'],
      routerConfig: props['routerConfig'],
      backButtonDispatcher: props['backButtonDispatcher'],
      builder: props['builder'],
      title: props['title'] ?? '',
      onGenerateTitle: props['onGenerateTitle'],
      textStyle: props['textStyle'],
      color: props['color'],
      locale: props['locale'],
      localizationsDelegates: props['localizationsDelegates'],
      localeListResolutionCallback: props['localeListResolutionCallback'],
      localeResolutionCallback: props['localeResolutionCallback'],
      supportedLocales:
          props['supportedLocales'] ?? const <Locale>[Locale('en', 'US')],
      showPerformanceOverlay: props['showPerformanceOverlay'] ?? false,
      checkerboardRasterCacheImages:
          props['checkerboardRasterCacheImages'] ?? false,
      checkerboardOffscreenLayers:
          props['checkerboardOffscreenLayers'] ?? false,
      showSemanticsDebugger: props['showSemanticsDebugger'] ?? false,
      debugShowWidgetInspector: props['debugShowWidgetInspector'] ?? false,
      debugShowCheckedModeBanner: props['debugShowCheckedModeBanner'] ?? true,
      inspectorSelectButtonBuilder: props['inspectorSelectButtonBuilder'],
      shortcuts: props['shortcuts'],
      actions: props['actions'],
      restorationScopeId: props['restorationScopeId'],
      useInheritedMediaQuery: props['useInheritedMediaQuery'] ?? false),
  'WidgetsApp.showPerformanceOverlayOverride':
      WidgetsApp.showPerformanceOverlayOverride,
  'WidgetsFlutterBinding': (props) => WidgetsFlutterBinding(),
  'WidgetsFlutterBinding.ensureInitialized': (props) =>
      WidgetsFlutterBinding.ensureInitialized(),
  'WidgetsServiceExtensions.debugAllowBanner':
      WidgetsServiceExtensions.debugAllowBanner,
  'WidgetsServiceExtensions.debugDumpApp':
      WidgetsServiceExtensions.debugDumpApp,
  'WidgetsServiceExtensions.debugDumpFocusTree':
      WidgetsServiceExtensions.debugDumpFocusTree,
  'WidgetsServiceExtensions.didSendFirstFrameEvent':
      WidgetsServiceExtensions.didSendFirstFrameEvent,
  'WidgetsServiceExtensions.didSendFirstFrameRasterizedEvent':
      WidgetsServiceExtensions.didSendFirstFrameRasterizedEvent,
  'WidgetsServiceExtensions.fastReassemble':
      WidgetsServiceExtensions.fastReassemble,
  'WidgetsServiceExtensions.profileUserWidgetBuilds':
      WidgetsServiceExtensions.profileUserWidgetBuilds,
  'WidgetsServiceExtensions.profileWidgetBuilds':
      WidgetsServiceExtensions.profileWidgetBuilds,
  'WidgetsServiceExtensions.showPerformanceOverlay':
      WidgetsServiceExtensions.showPerformanceOverlay,
  'WidgetsServiceExtensions.values': WidgetsServiceExtensions.values,
  'WillPopScope': (props) => WillPopScope(
      key: props['key'], child: props['child'], onWillPop: props['onWillPop']),
  'Wrap': (props) => Wrap(
      key: props['key'],
      direction: props['direction'] ?? Axis.horizontal,
      alignment: props['alignment'] ?? WrapAlignment.start,
      spacing: props['spacing']?.toDouble() ?? 0.0,
      runAlignment: props['runAlignment'] ?? WrapAlignment.start,
      runSpacing: props['runSpacing']?.toDouble() ?? 0.0,
      crossAxisAlignment:
          props['crossAxisAlignment'] ?? WrapCrossAlignment.start,
      textDirection: props['textDirection'],
      verticalDirection: props['verticalDirection'] ?? VerticalDirection.down,
      clipBehavior: props['clipBehavior'] ?? Clip.none,
      children: as<Widget>(props['children']) ?? const <Widget>[]),
  'WrapAlignment.center': WrapAlignment.center,
  'WrapAlignment.end': WrapAlignment.end,
  'WrapAlignment.spaceAround': WrapAlignment.spaceAround,
  'WrapAlignment.spaceBetween': WrapAlignment.spaceBetween,
  'WrapAlignment.spaceEvenly': WrapAlignment.spaceEvenly,
  'WrapAlignment.start': WrapAlignment.start,
  'WrapAlignment.values': WrapAlignment.values,
  'WrapCrossAlignment.center': WrapCrossAlignment.center,
  'WrapCrossAlignment.end': WrapCrossAlignment.end,
  'WrapCrossAlignment.start': WrapCrossAlignment.start,
  'WrapCrossAlignment.values': WrapCrossAlignment.values,
  'WrapParentData': (props) => WrapParentData(),
  'WriteBuffer': (props) =>
      WriteBuffer(startCapacity: props['startCapacity'] ?? 8),
  'YearPicker': (props) => YearPicker(
      key: props['key'],
      currentDate: props['currentDate'],
      firstDate: props['firstDate'],
      lastDate: props['lastDate'],
      initialDate: props['initialDate'],
      selectedDate: props['selectedDate'],
      onChanged: props['onChanged'],
      dragStartBehavior: props['dragStartBehavior'] ?? DragStartBehavior.start),
  'ZoomPageTransitionsBuilder': (props) => ZoomPageTransitionsBuilder(
      allowSnapshotting: props['allowSnapshotting'] ?? true,
      allowEnterRouteSnapshotting:
          props['allowEnterRouteSnapshotting'] ?? true),
};

/// flutterMapping
Map<String, bool> flutterMapping = {
  'AboutDialog': true,
  'AboutListTile': true,
  'AbsorbPointer': true,
  'AbstractNode': false,
  'Accumulator': false,
  'ActionChip': true,
  'ActionDispatcher': false,
  'ActionIconTheme': true,
  'ActionIconTheme.of': false,
  'ActionIconThemeData': false,
  'ActionIconThemeData.lerp': false,
  'ActionListener': true,
  'Actions': true,
  'Actions.find': false,
  'Actions.handler': false,
  'Actions.invoke': false,
  'Actions.maybeFind': false,
  'Actions.maybeInvoke': false,
  'Actions.of': false,
  'ActivateIntent': false,
  'AdaptiveTextSelectionToolbar': true,
  'AdaptiveTextSelectionToolbar.buttonItems': true,
  'AdaptiveTextSelectionToolbar.editable': true,
  'AdaptiveTextSelectionToolbar.editableText': true,
  'AdaptiveTextSelectionToolbar.getAdaptiveButtons': false,
  'AdaptiveTextSelectionToolbar.getButtonLabel': false,
  'AdaptiveTextSelectionToolbar.selectable': true,
  'AdaptiveTextSelectionToolbar.selectableRegion': true,
  'AlertDialog': true,
  'AlertDialog.adaptive': true,
  'Align': true,
  'AlignTransition': true,
  'Alignment': false,
  'Alignment.bottomCenter': false,
  'Alignment.bottomLeft': false,
  'Alignment.bottomRight': false,
  'Alignment.center': false,
  'Alignment.centerLeft': false,
  'Alignment.centerRight': false,
  'Alignment.lerp': false,
  'Alignment.topCenter': false,
  'Alignment.topLeft': false,
  'Alignment.topRight': false,
  'AlignmentDirectional': false,
  'AlignmentDirectional.bottomCenter': false,
  'AlignmentDirectional.bottomEnd': false,
  'AlignmentDirectional.bottomStart': false,
  'AlignmentDirectional.center': false,
  'AlignmentDirectional.centerEnd': false,
  'AlignmentDirectional.centerStart': false,
  'AlignmentDirectional.lerp': false,
  'AlignmentDirectional.topCenter': false,
  'AlignmentDirectional.topEnd': false,
  'AlignmentDirectional.topStart': false,
  'AlignmentGeometryTween': false,
  'AlignmentTween': false,
  'AlwaysScrollableScrollPhysics': false,
  'AlwaysStoppedAnimation': false,
  'AndroidMotionEvent': false,
  'AndroidOverscrollIndicator.glow': false,
  'AndroidOverscrollIndicator.stretch': false,
  'AndroidOverscrollIndicator.values': false,
  'AndroidPointerCoords': false,
  'AndroidPointerProperties': false,
  'AndroidPointerProperties.kToolTypeEraser': false,
  'AndroidPointerProperties.kToolTypeFinger': false,
  'AndroidPointerProperties.kToolTypeMouse': false,
  'AndroidPointerProperties.kToolTypeStylus': false,
  'AndroidPointerProperties.kToolTypeUnknown': false,
  'AndroidView': true,
  'AndroidViewSurface': true,
  'AnimatedAlign': true,
  'AnimatedBuilder': true,
  'AnimatedContainer': true,
  'AnimatedCrossFade': true,
  'AnimatedCrossFade.defaultLayoutBuilder': false,
  'AnimatedDefaultTextStyle': true,
  'AnimatedFractionallySizedBox': true,
  'AnimatedGrid': true,
  'AnimatedGrid.maybeOf': false,
  'AnimatedGrid.of': false,
  'AnimatedIcon': true,
  'AnimatedList': true,
  'AnimatedList.maybeOf': false,
  'AnimatedList.of': false,
  'AnimatedModalBarrier': true,
  'AnimatedOpacity': true,
  'AnimatedPadding': true,
  'AnimatedPhysicalModel': true,
  'AnimatedPositioned': true,
  'AnimatedPositioned.fromRect': true,
  'AnimatedPositionedDirectional': true,
  'AnimatedRotation': true,
  'AnimatedScale': true,
  'AnimatedSize': true,
  'AnimatedSlide': true,
  'AnimatedSwitcher': true,
  'AnimatedSwitcher.defaultLayoutBuilder': false,
  'AnimatedSwitcher.defaultTransitionBuilder': false,
  'AnimatedTheme': true,
  'AnimationBehavior.normal': false,
  'AnimationBehavior.preserve': false,
  'AnimationBehavior.values': false,
  'AnimationController': false,
  'AnimationController.unbounded': false,
  'AnimationMax': false,
  'AnimationMean': false,
  'AnimationMin': false,
  'AnimationStatus.completed': false,
  'AnimationStatus.dismissed': false,
  'AnimationStatus.forward': false,
  'AnimationStatus.reverse': false,
  'AnimationStatus.values': false,
  'AnnotatedRegion': true,
  'AnnotatedRegionLayer': false,
  'AnnotationEntry': false,
  'AnnotationResult': false,
  'AnnounceSemanticsEvent': false,
  'AppBar': true,
  'AppBar.preferredHeightFor': false,
  'AppBarTheme': false,
  'AppBarTheme.lerp': false,
  'AppBarTheme.of': false,
  'AppExitResponse.cancel': false,
  'AppExitResponse.exit': false,
  'AppExitResponse.values': false,
  'AppExitType.cancelable': false,
  'AppExitType.required': false,
  'AppExitType.values': false,
  'AppLifecycleState.detached': false,
  'AppLifecycleState.inactive': false,
  'AppLifecycleState.paused': false,
  'AppLifecycleState.resumed': false,
  'AppLifecycleState.values': false,
  'ApplicationSwitcherDescription': false,
  'AspectRatio': true,
  'Assertiveness.assertive': false,
  'Assertiveness.polite': false,
  'Assertiveness.values': false,
  'AssetBundleImageKey': false,
  'AssetImage': false,
  'AssetMetadata': false,
  'AsyncSnapshot.nothing': false,
  'AsyncSnapshot.waiting': false,
  'AsyncSnapshot.withData': false,
  'AsyncSnapshot.withError': false,
  'AttributedString': false,
  'AttributedStringProperty': false,
  'Autocomplete': true,
  'AutocompleteHighlightedOption': true,
  'AutocompleteHighlightedOption.of': false,
  'AutocompleteNextOptionIntent': false,
  'AutocompletePreviousOptionIntent': false,
  'AutofillConfiguration': false,
  'AutofillConfiguration.disabled': false,
  'AutofillContextAction.cancel': false,
  'AutofillContextAction.commit': false,
  'AutofillContextAction.values': false,
  'AutofillGroup': true,
  'AutofillGroup.maybeOf': false,
  'AutofillGroup.of': false,
  'AutofillHints.addressCity': false,
  'AutofillHints.addressCityAndState': false,
  'AutofillHints.addressState': false,
  'AutofillHints.birthday': false,
  'AutofillHints.birthdayDay': false,
  'AutofillHints.birthdayMonth': false,
  'AutofillHints.birthdayYear': false,
  'AutofillHints.countryCode': false,
  'AutofillHints.countryName': false,
  'AutofillHints.creditCardExpirationDate': false,
  'AutofillHints.creditCardExpirationDay': false,
  'AutofillHints.creditCardExpirationMonth': false,
  'AutofillHints.creditCardExpirationYear': false,
  'AutofillHints.creditCardFamilyName': false,
  'AutofillHints.creditCardGivenName': false,
  'AutofillHints.creditCardMiddleName': false,
  'AutofillHints.creditCardName': false,
  'AutofillHints.creditCardNumber': false,
  'AutofillHints.creditCardSecurityCode': false,
  'AutofillHints.creditCardType': false,
  'AutofillHints.email': false,
  'AutofillHints.familyName': false,
  'AutofillHints.fullStreetAddress': false,
  'AutofillHints.gender': false,
  'AutofillHints.givenName': false,
  'AutofillHints.impp': false,
  'AutofillHints.jobTitle': false,
  'AutofillHints.language': false,
  'AutofillHints.location': false,
  'AutofillHints.middleInitial': false,
  'AutofillHints.middleName': false,
  'AutofillHints.name': false,
  'AutofillHints.namePrefix': false,
  'AutofillHints.nameSuffix': false,
  'AutofillHints.newPassword': false,
  'AutofillHints.newUsername': false,
  'AutofillHints.nickname': false,
  'AutofillHints.oneTimeCode': false,
  'AutofillHints.organizationName': false,
  'AutofillHints.password': false,
  'AutofillHints.photo': false,
  'AutofillHints.postalAddress': false,
  'AutofillHints.postalAddressExtended': false,
  'AutofillHints.postalAddressExtendedPostalCode': false,
  'AutofillHints.postalCode': false,
  'AutofillHints.streetAddressLevel1': false,
  'AutofillHints.streetAddressLevel2': false,
  'AutofillHints.streetAddressLevel3': false,
  'AutofillHints.streetAddressLevel4': false,
  'AutofillHints.streetAddressLine1': false,
  'AutofillHints.streetAddressLine2': false,
  'AutofillHints.streetAddressLine3': false,
  'AutofillHints.sublocality': false,
  'AutofillHints.telephoneNumber': false,
  'AutofillHints.telephoneNumberAreaCode': false,
  'AutofillHints.telephoneNumberCountryCode': false,
  'AutofillHints.telephoneNumberDevice': false,
  'AutofillHints.telephoneNumberExtension': false,
  'AutofillHints.telephoneNumberLocal': false,
  'AutofillHints.telephoneNumberLocalPrefix': false,
  'AutofillHints.telephoneNumberLocalSuffix': false,
  'AutofillHints.telephoneNumberNational': false,
  'AutofillHints.transactionAmount': false,
  'AutofillHints.transactionCurrency': false,
  'AutofillHints.url': false,
  'AutofillHints.username': false,
  'AutomaticKeepAlive': true,
  'AutomaticNotchedShape': false,
  'AutovalidateMode.always': false,
  'AutovalidateMode.disabled': false,
  'AutovalidateMode.onUserInteraction': false,
  'AutovalidateMode.values': false,
  'Axis.horizontal': false,
  'Axis.values': false,
  'Axis.vertical': false,
  'AxisDirection.down': false,
  'AxisDirection.left': false,
  'AxisDirection.right': false,
  'AxisDirection.up': false,
  'AxisDirection.values': false,
  'BackButton': true,
  'BackButtonIcon': true,
  'BackButtonListener': true,
  'BackdropFilter': true,
  'BackdropFilterLayer': false,
  'BackgroundIsolateBinaryMessenger': false,
  'BackgroundIsolateBinaryMessenger.instance': false,
  'Badge': true,
  'Badge.count': true,
  'BadgeTheme': true,
  'BadgeTheme.of': false,
  'BadgeThemeData': false,
  'BadgeThemeData.lerp': false,
  'BallisticScrollActivity': false,
  'Banner': true,
  'BannerLocation.bottomEnd': false,
  'BannerLocation.bottomStart': false,
  'BannerLocation.topEnd': false,
  'BannerLocation.topStart': false,
  'BannerLocation.values': false,
  'BannerPainter': false,
  'Baseline': true,
  'BasicMessageChannel': false,
  'BeveledRectangleBorder': false,
  'BinaryCodec': false,
  'BitField': false,
  'BitField.filled': false,
  'BlendMode.clear': false,
  'BlendMode.color': false,
  'BlendMode.colorBurn': false,
  'BlendMode.colorDodge': false,
  'BlendMode.darken': false,
  'BlendMode.difference': false,
  'BlendMode.dst': false,
  'BlendMode.dstATop': false,
  'BlendMode.dstIn': false,
  'BlendMode.dstOut': false,
  'BlendMode.dstOver': false,
  'BlendMode.exclusion': false,
  'BlendMode.hardLight': false,
  'BlendMode.hue': false,
  'BlendMode.lighten': false,
  'BlendMode.luminosity': false,
  'BlendMode.modulate': false,
  'BlendMode.multiply': false,
  'BlendMode.overlay': false,
  'BlendMode.plus': false,
  'BlendMode.saturation': false,
  'BlendMode.screen': false,
  'BlendMode.softLight': false,
  'BlendMode.src': false,
  'BlendMode.srcATop': false,
  'BlendMode.srcIn': false,
  'BlendMode.srcOut': false,
  'BlendMode.srcOver': false,
  'BlendMode.values': false,
  'BlendMode.xor': false,
  'BlockSemantics': true,
  'BlurStyle.inner': false,
  'BlurStyle.normal': false,
  'BlurStyle.outer': false,
  'BlurStyle.solid': false,
  'BlurStyle.values': false,
  'Border': false,
  'Border.all': false,
  'Border.fromBorderSide': false,
  'Border.lerp': false,
  'Border.merge': false,
  'Border.symmetric': false,
  'BorderDirectional': false,
  'BorderDirectional.lerp': false,
  'BorderDirectional.merge': false,
  'BorderRadius.all': false,
  'BorderRadius.circular': false,
  'BorderRadius.horizontal': false,
  'BorderRadius.lerp': false,
  'BorderRadius.only': false,
  'BorderRadius.vertical': false,
  'BorderRadius.zero': false,
  'BorderRadiusDirectional.all': false,
  'BorderRadiusDirectional.circular': false,
  'BorderRadiusDirectional.horizontal': false,
  'BorderRadiusDirectional.lerp': false,
  'BorderRadiusDirectional.only': false,
  'BorderRadiusDirectional.vertical': false,
  'BorderRadiusDirectional.zero': false,
  'BorderRadiusTween': false,
  'BorderSide': false,
  'BorderSide.canMerge': false,
  'BorderSide.lerp': false,
  'BorderSide.merge': false,
  'BorderSide.none': false,
  'BorderSide.strokeAlignCenter': false,
  'BorderSide.strokeAlignInside': false,
  'BorderSide.strokeAlignOutside': false,
  'BorderStyle.none': false,
  'BorderStyle.solid': false,
  'BorderStyle.values': false,
  'BorderTween': false,
  'BottomAppBar': true,
  'BottomAppBarTheme': false,
  'BottomAppBarTheme.lerp': false,
  'BottomAppBarTheme.of': false,
  'BottomNavigationBar': true,
  'BottomNavigationBarItem': false,
  'BottomNavigationBarLandscapeLayout.centered': false,
  'BottomNavigationBarLandscapeLayout.linear': false,
  'BottomNavigationBarLandscapeLayout.spread': false,
  'BottomNavigationBarLandscapeLayout.values': false,
  'BottomNavigationBarTheme': true,
  'BottomNavigationBarTheme.of': false,
  'BottomNavigationBarThemeData': false,
  'BottomNavigationBarThemeData.lerp': false,
  'BottomNavigationBarType.fixed': false,
  'BottomNavigationBarType.shifting': false,
  'BottomNavigationBarType.values': false,
  'BottomSheet': true,
  'BottomSheet.createAnimationController': false,
  'BottomSheetThemeData': false,
  'BottomSheetThemeData.lerp': false,
  'BouncingScrollPhysics': false,
  'BouncingScrollSimulation': false,
  'BouncingScrollSimulation.maxSpringTransferVelocity': false,
  'BoundedFrictionSimulation': false,
  'BoxConstraints': false,
  'BoxConstraints.expand': false,
  'BoxConstraints.lerp': false,
  'BoxConstraints.loose': false,
  'BoxConstraints.tight': false,
  'BoxConstraints.tightFor': false,
  'BoxConstraints.tightForFinite': false,
  'BoxConstraintsTween': false,
  'BoxDecoration': false,
  'BoxDecoration.lerp': false,
  'BoxFit.contain': false,
  'BoxFit.cover': false,
  'BoxFit.fill': false,
  'BoxFit.fitHeight': false,
  'BoxFit.fitWidth': false,
  'BoxFit.none': false,
  'BoxFit.scaleDown': false,
  'BoxFit.values': false,
  'BoxHeightStyle.includeLineSpacingBottom': false,
  'BoxHeightStyle.includeLineSpacingMiddle': false,
  'BoxHeightStyle.includeLineSpacingTop': false,
  'BoxHeightStyle.max': false,
  'BoxHeightStyle.strut': false,
  'BoxHeightStyle.tight': false,
  'BoxHeightStyle.values': false,
  'BoxHitTestEntry': false,
  'BoxHitTestResult': false,
  'BoxHitTestResult.wrap': false,
  'BoxParentData': false,
  'BoxShadow': false,
  'BoxShadow.lerp': false,
  'BoxShadow.lerpList': false,
  'BoxShape.circle': false,
  'BoxShape.rectangle': false,
  'BoxShape.values': false,
  'BoxWidthStyle.max': false,
  'BoxWidthStyle.tight': false,
  'BoxWidthStyle.values': false,
  'Brightness.dark': false,
  'Brightness.light': false,
  'Brightness.values': false,
  'BrowserContextMenu.disableContextMenu': false,
  'BrowserContextMenu.enableContextMenu': false,
  'BrowserContextMenu.enabled': false,
  'BuildOwner': false,
  'Builder': true,
  'ButtonActivateIntent': false,
  'ButtonBar': true,
  'ButtonBarLayoutBehavior.constrained': false,
  'ButtonBarLayoutBehavior.padded': false,
  'ButtonBarLayoutBehavior.values': false,
  'ButtonBarTheme': true,
  'ButtonBarTheme.of': false,
  'ButtonBarThemeData': false,
  'ButtonBarThemeData.lerp': false,
  'ButtonSegment': false,
  'ButtonStyle': false,
  'ButtonStyle.lerp': false,
  'ButtonTextTheme.accent': false,
  'ButtonTextTheme.normal': false,
  'ButtonTextTheme.primary': false,
  'ButtonTextTheme.values': false,
  'ButtonTheme': true,
  'ButtonTheme.fromButtonThemeData': true,
  'ButtonTheme.of': false,
  'ButtonThemeData': false,
  'CacheExtentStyle.pixel': false,
  'CacheExtentStyle.values': false,
  'CacheExtentStyle.viewport': false,
  'CachingIterable': false,
  'CalendarDatePicker': true,
  'CallbackAction': false,
  'CallbackHandle.fromRawHandle': false,
  'CallbackShortcuts': true,
  'Card': true,
  'CardTheme': false,
  'CardTheme.lerp': false,
  'CardTheme.of': false,
  'Category': false,
  'CatmullRomCurve': false,
  'CatmullRomCurve.precompute': false,
  'CatmullRomCurve.validateControlPoints': false,
  'CatmullRomSpline': false,
  'CatmullRomSpline.precompute': false,
  'Center': true,
  'ChangeNotifier': false,
  'ChangeNotifier.debugAssertNotDisposed': false,
  'ChannelBuffers': false,
  'ChannelBuffers.kControlChannelName': false,
  'ChannelBuffers.kDefaultBufferSize': false,
  'CharacterActivator': false,
  'CharacterBoundary': false,
  'Checkbox': true,
  'Checkbox.adaptive': true,
  'Checkbox.width': false,
  'CheckboxListTile': true,
  'CheckboxListTile.adaptive': true,
  'CheckboxMenuButton': true,
  'CheckboxTheme': true,
  'CheckboxTheme.of': false,
  'CheckboxThemeData': false,
  'CheckboxThemeData.lerp': false,
  'CheckedModeBanner': true,
  'CheckedPopupMenuItem': true,
  'ChildBackButtonDispatcher': false,
  'ChildSemanticsConfigurationsResultBuilder': false,
  'Chip': true,
  'ChipTheme': true,
  'ChipTheme.of': false,
  'ChipThemeData': false,
  'ChipThemeData.fromDefaults': false,
  'ChipThemeData.lerp': false,
  'ChoiceChip': true,
  'CircleAvatar': true,
  'CircleBorder': false,
  'CircularNotchedRectangle': false,
  'CircularProgressIndicator': true,
  'CircularProgressIndicator.adaptive': true,
  'CircularProgressIndicator.strokeAlignCenter': false,
  'CircularProgressIndicator.strokeAlignInside': false,
  'CircularProgressIndicator.strokeAlignOutside': false,
  'ClampedSimulation': false,
  'ClampingScrollPhysics': false,
  'ClampingScrollSimulation': false,
  'ClearSelectionEvent': false,
  'Clip.antiAlias': false,
  'Clip.antiAliasWithSaveLayer': false,
  'Clip.hardEdge': false,
  'Clip.none': false,
  'Clip.values': false,
  'ClipOp.difference': false,
  'ClipOp.intersect': false,
  'ClipOp.values': false,
  'ClipOval': true,
  'ClipPath': true,
  'ClipPath.shape': false,
  'ClipPathLayer': false,
  'ClipRRect': true,
  'ClipRRectLayer': false,
  'ClipRect': true,
  'ClipRectLayer': false,
  'ClipboardData': false,
  'ClipboardStatus.notPasteable': false,
  'ClipboardStatus.pasteable': false,
  'ClipboardStatus.unknown': false,
  'ClipboardStatus.values': false,
  'ClipboardStatusNotifier': false,
  'CloseButton': true,
  'CloseButtonIcon': true,
  'CollapseMode.none': false,
  'CollapseMode.parallax': false,
  'CollapseMode.pin': false,
  'CollapseMode.values': false,
  'Color': false,
  'Color.alphaBlend': false,
  'Color.fromARGB': false,
  'Color.fromRGBO': false,
  'Color.getAlphaFromOpacity': false,
  'Color.lerp': false,
  'ColorFilter.linearToSrgbGamma': false,
  'ColorFilter.matrix': false,
  'ColorFilter.mode': false,
  'ColorFilter.srgbToLinearGamma': false,
  'ColorFilterLayer': false,
  'ColorFiltered': true,
  'ColorProperty': false,
  'ColorScheme': false,
  'ColorScheme.dark': false,
  'ColorScheme.fromImageProvider': false,
  'ColorScheme.fromSeed': false,
  'ColorScheme.fromSwatch': false,
  'ColorScheme.highContrastDark': false,
  'ColorScheme.highContrastLight': false,
  'ColorScheme.lerp': false,
  'ColorScheme.light': false,
  'ColorSpace.extendedSRGB': false,
  'ColorSpace.sRGB': false,
  'ColorSpace.values': false,
  'ColorSwatch': false,
  'ColorSwatch.lerp': false,
  'ColorTween': false,
  'ColoredBox': true,
  'Column': true,
  'CompositedTransformFollower': true,
  'CompositedTransformTarget': true,
  'ConnectionState.active': false,
  'ConnectionState.done': false,
  'ConnectionState.none': false,
  'ConnectionState.values': false,
  'ConnectionState.waiting': false,
  'ConstantTween': false,
  'ConstrainedBox': true,
  'ConstraintsTransformBox': true,
  'ConstraintsTransformBox.heightUnconstrained': false,
  'ConstraintsTransformBox.maxHeightUnconstrained': false,
  'ConstraintsTransformBox.maxUnconstrained': false,
  'ConstraintsTransformBox.maxWidthUnconstrained': false,
  'ConstraintsTransformBox.unconstrained': false,
  'ConstraintsTransformBox.unmodified': false,
  'ConstraintsTransformBox.widthUnconstrained': false,
  'Container': true,
  'ContainerLayer': false,
  'ContentInsertionConfiguration': false,
  'ContextMenuButtonItem': false,
  'ContextMenuButtonType.copy': false,
  'ContextMenuButtonType.custom': false,
  'ContextMenuButtonType.cut': false,
  'ContextMenuButtonType.delete': false,
  'ContextMenuButtonType.paste': false,
  'ContextMenuButtonType.selectAll': false,
  'ContextMenuButtonType.values': false,
  'ContextMenuController': false,
  'ContextMenuController.removeAny': false,
  'ContinuousRectangleBorder': false,
  'ControlsDetails': false,
  'CopySelectionTextIntent.copy': false,
  'CopySelectionTextIntent.cut': false,
  'CrossAxisAlignment.baseline': false,
  'CrossAxisAlignment.center': false,
  'CrossAxisAlignment.end': false,
  'CrossAxisAlignment.start': false,
  'CrossAxisAlignment.stretch': false,
  'CrossAxisAlignment.values': false,
  'CrossFadeState.showFirst': false,
  'CrossFadeState.showSecond': false,
  'CrossFadeState.values': false,
  'Cubic': false,
  'CupertinoActionSheet': true,
  'CupertinoActionSheetAction': true,
  'CupertinoActivityIndicator': true,
  'CupertinoActivityIndicator.partiallyRevealed': true,
  'CupertinoAdaptiveTextSelectionToolbar': true,
  'CupertinoAdaptiveTextSelectionToolbar.buttonItems': true,
  'CupertinoAdaptiveTextSelectionToolbar.editable': true,
  'CupertinoAdaptiveTextSelectionToolbar.editableText': true,
  'CupertinoAdaptiveTextSelectionToolbar.getAdaptiveButtons': false,
  'CupertinoAdaptiveTextSelectionToolbar.selectable': true,
  'CupertinoAlertDialog': true,
  'CupertinoApp': true,
  'CupertinoApp.createCupertinoHeroController': false,
  'CupertinoApp.router': true,
  'CupertinoButton': true,
  'CupertinoButton.filled': true,
  'CupertinoCheckbox': true,
  'CupertinoCheckbox.width': false,
  'CupertinoContextMenu': true,
  'CupertinoContextMenu.animationOpensAt': false,
  'CupertinoContextMenu.builder': true,
  'CupertinoContextMenu.kEndBoxShadow': false,
  'CupertinoContextMenu.kOpenBorderRadius': false,
  'CupertinoContextMenuAction': true,
  'CupertinoDatePicker': true,
  'CupertinoDatePickerMode.date': false,
  'CupertinoDatePickerMode.dateAndTime': false,
  'CupertinoDatePickerMode.monthYear': false,
  'CupertinoDatePickerMode.time': false,
  'CupertinoDatePickerMode.values': false,
  'CupertinoDesktopTextSelectionControls': false,
  'CupertinoDesktopTextSelectionToolbar': true,
  'CupertinoDesktopTextSelectionToolbarButton': true,
  'CupertinoDesktopTextSelectionToolbarButton.buttonItem': true,
  'CupertinoDesktopTextSelectionToolbarButton.text': true,
  'CupertinoDialogAction': true,
  'CupertinoDialogRoute': false,
  'CupertinoDynamicColor': false,
  'CupertinoDynamicColor.maybeResolve': false,
  'CupertinoDynamicColor.resolve': false,
  'CupertinoDynamicColor.withBrightness': false,
  'CupertinoDynamicColor.withBrightnessAndContrast': false,
  'CupertinoFormRow': true,
  'CupertinoFormSection': true,
  'CupertinoFormSection.insetGrouped': true,
  'CupertinoFullscreenDialogTransition': true,
  'CupertinoIconThemeData': false,
  'CupertinoListSection': true,
  'CupertinoListSection.insetGrouped': true,
  'CupertinoListSectionType.base': false,
  'CupertinoListSectionType.insetGrouped': false,
  'CupertinoListSectionType.values': false,
  'CupertinoListTile': true,
  'CupertinoListTile.notched': true,
  'CupertinoListTileChevron': true,
  'CupertinoMagnifier': true,
  'CupertinoModalPopupRoute': false,
  'CupertinoNavigationBar': true,
  'CupertinoNavigationBarBackButton': true,
  'CupertinoPage': false,
  'CupertinoPageRoute': false,
  'CupertinoPageScaffold': true,
  'CupertinoPageTransition': true,
  'CupertinoPageTransitionsBuilder': false,
  'CupertinoPicker': true,
  'CupertinoPicker.builder': true,
  'CupertinoPickerDefaultSelectionOverlay': true,
  'CupertinoPopupSurface': true,
  'CupertinoRadio': true,
  'CupertinoScrollBehavior': false,
  'CupertinoScrollbar': true,
  'CupertinoScrollbar.defaultRadius': false,
  'CupertinoScrollbar.defaultRadiusWhileDragging': false,
  'CupertinoScrollbar.defaultThickness': false,
  'CupertinoScrollbar.defaultThicknessWhileDragging': false,
  'CupertinoSearchTextField': true,
  'CupertinoSegmentedControl': true,
  'CupertinoSlider': true,
  'CupertinoSlidingSegmentedControl': true,
  'CupertinoSliverNavigationBar': true,
  'CupertinoSliverRefreshControl': true,
  'CupertinoSliverRefreshControl.buildRefreshIndicator': false,
  'CupertinoSpellCheckSuggestionsToolbar': true,
  'CupertinoSpellCheckSuggestionsToolbar.buildButtonItems': false,
  'CupertinoSpellCheckSuggestionsToolbar.editableText': true,
  'CupertinoSwitch': true,
  'CupertinoTabBar': true,
  'CupertinoTabController': false,
  'CupertinoTabScaffold': true,
  'CupertinoTabView': true,
  'CupertinoTextField': true,
  'CupertinoTextField.borderless': true,
  'CupertinoTextField.cupertinoMisspelledTextStyle': false,
  'CupertinoTextField.inferIOSSpellCheckConfiguration': false,
  'CupertinoTextFormFieldRow': true,
  'CupertinoTextMagnifier': true,
  'CupertinoTextSelectionControls': false,
  'CupertinoTextSelectionToolbar': true,
  'CupertinoTextSelectionToolbar.kToolbarScreenPadding': false,
  'CupertinoTextSelectionToolbarButton': true,
  'CupertinoTextSelectionToolbarButton.buttonItem': true,
  'CupertinoTextSelectionToolbarButton.getButtonLabel': false,
  'CupertinoTextSelectionToolbarButton.text': true,
  'CupertinoTextThemeData': false,
  'CupertinoTheme': true,
  'CupertinoTheme.brightnessOf': false,
  'CupertinoTheme.maybeBrightnessOf': false,
  'CupertinoTheme.of': false,
  'CupertinoThemeData': false,
  'CupertinoThemeData.raw': false,
  'CupertinoThumbPainter': false,
  'CupertinoThumbPainter.extension': false,
  'CupertinoThumbPainter.radius': false,
  'CupertinoThumbPainter.switchThumb': false,
  'CupertinoTimerPicker': true,
  'CupertinoTimerPickerMode.hm': false,
  'CupertinoTimerPickerMode.hms': false,
  'CupertinoTimerPickerMode.ms': false,
  'CupertinoTimerPickerMode.values': false,
  'CupertinoUserInterfaceLevel': true,
  'CupertinoUserInterfaceLevel.maybeOf': false,
  'CupertinoUserInterfaceLevel.of': false,
  'CupertinoUserInterfaceLevelData.base': false,
  'CupertinoUserInterfaceLevelData.elevated': false,
  'CupertinoUserInterfaceLevelData.values': false,
  'Curve2DSample': false,
  'CurveTween': false,
  'CurvedAnimation': false,
  'CustomMultiChildLayout': true,
  'CustomPaint': true,
  'CustomPainterSemantics': false,
  'CustomScrollView': true,
  'CustomSemanticsAction': false,
  'CustomSemanticsAction.getAction': false,
  'CustomSemanticsAction.getIdentifier': false,
  'CustomSemanticsAction.overridingAction': false,
  'CustomSingleChildLayout': true,
  'DartPerformanceMode.balanced': false,
  'DartPerformanceMode.latency': false,
  'DartPerformanceMode.memory': false,
  'DartPerformanceMode.throughput': false,
  'DartPerformanceMode.values': false,
  'DataCell': false,
  'DataCell.empty': false,
  'DataColumn': false,
  'DataRow': false,
  'DataRow.byIndex': false,
  'DataTable': true,
  'DataTableTheme': true,
  'DataTableTheme.of': false,
  'DataTableThemeData': false,
  'DataTableThemeData.lerp': false,
  'DatePickerDateOrder.dmy': false,
  'DatePickerDateOrder.mdy': false,
  'DatePickerDateOrder.values': false,
  'DatePickerDateOrder.ydm': false,
  'DatePickerDateOrder.ymd': false,
  'DatePickerDateTimeOrder.date_dayPeriod_time': false,
  'DatePickerDateTimeOrder.date_time_dayPeriod': false,
  'DatePickerDateTimeOrder.dayPeriod_time_date': false,
  'DatePickerDateTimeOrder.time_dayPeriod_date': false,
  'DatePickerDateTimeOrder.values': false,
  'DatePickerDialog': true,
  'DatePickerEntryMode.calendar': false,
  'DatePickerEntryMode.calendarOnly': false,
  'DatePickerEntryMode.input': false,
  'DatePickerEntryMode.inputOnly': false,
  'DatePickerEntryMode.values': false,
  'DatePickerMode.day': false,
  'DatePickerMode.values': false,
  'DatePickerMode.year': false,
  'DatePickerTheme': true,
  'DatePickerTheme.defaults': false,
  'DatePickerTheme.maybeOf': false,
  'DatePickerTheme.of': false,
  'DatePickerThemeData': false,
  'DatePickerThemeData.lerp': false,
  'DateRangePickerDialog': true,
  'DateTimeRange': false,
  'DayPeriod.am': false,
  'DayPeriod.pm': false,
  'DayPeriod.values': false,
  'DebugCreator': false,
  'DebugReassembleConfig': false,
  'DebugSemanticsDumpOrder.inverseHitTest': false,
  'DebugSemanticsDumpOrder.traversalOrder': false,
  'DebugSemanticsDumpOrder.values': false,
  'DecoratedBox': true,
  'DecoratedBoxTransition': true,
  'DecorationImage': false,
  'DecorationPosition.background': false,
  'DecorationPosition.foreground': false,
  'DecorationPosition.values': false,
  'DecorationTween': false,
  'DefaultAssetBundle': true,
  'DefaultAssetBundle.of': false,
  'DefaultCupertinoLocalizations': false,
  'DefaultCupertinoLocalizations.delegate': false,
  'DefaultCupertinoLocalizations.load': false,
  'DefaultCupertinoLocalizations.shortWeekdays': false,
  'DefaultMaterialLocalizations': false,
  'DefaultMaterialLocalizations.delegate': false,
  'DefaultMaterialLocalizations.load': false,
  'DefaultPlatformMenuDelegate': false,
  'DefaultSelectionStyle': true,
  'DefaultSelectionStyle.defaultColor': false,
  'DefaultSelectionStyle.fallback': true,
  'DefaultSelectionStyle.merge': false,
  'DefaultSelectionStyle.of': true,
  'DefaultSpellCheckService': false,
  'DefaultSpellCheckService.mergeResults': false,
  'DefaultTabController': true,
  'DefaultTabController.maybeOf': false,
  'DefaultTabController.of': false,
  'DefaultTextEditingShortcuts': true,
  'DefaultTextHeightBehavior': true,
  'DefaultTextHeightBehavior.maybeOf': false,
  'DefaultTextHeightBehavior.of': false,
  'DefaultTextStyle': true,
  'DefaultTextStyle.fallback': true,
  'DefaultTextStyle.merge': false,
  'DefaultTextStyle.of': true,
  'DefaultTextStyleTransition': true,
  'DefaultTransitionDelegate': false,
  'DefaultWidgetsLocalizations': false,
  'DefaultWidgetsLocalizations.delegate': false,
  'DefaultWidgetsLocalizations.load': false,
  'DelayedMultiDragGestureRecognizer': false,
  'DeleteCharacterIntent': false,
  'DeleteToLineBreakIntent': false,
  'DeleteToNextWordBoundaryIntent': false,
  'DesktopTextSelectionControls': false,
  'DesktopTextSelectionToolbar': true,
  'DesktopTextSelectionToolbarButton': true,
  'DesktopTextSelectionToolbarButton.text': true,
  'DesktopTextSelectionToolbarLayoutDelegate': false,
  'DeviceGestureSettings': false,
  'DeviceGestureSettings.fromView': false,
  'DeviceOrientation.landscapeLeft': false,
  'DeviceOrientation.landscapeRight': false,
  'DeviceOrientation.portraitDown': false,
  'DeviceOrientation.portraitUp': false,
  'DeviceOrientation.values': false,
  'DiagnosticLevel.debug': false,
  'DiagnosticLevel.error': false,
  'DiagnosticLevel.fine': false,
  'DiagnosticLevel.hidden': false,
  'DiagnosticLevel.hint': false,
  'DiagnosticLevel.info': false,
  'DiagnosticLevel.off': false,
  'DiagnosticLevel.summary': false,
  'DiagnosticLevel.values': false,
  'DiagnosticLevel.warning': false,
  'DiagnosticPropertiesBuilder': false,
  'DiagnosticPropertiesBuilder.fromProperties': false,
  'DiagnosticableNode': false,
  'DiagnosticableTreeNode': false,
  'DiagnosticsBlock': false,
  'DiagnosticsDebugCreator': false,
  'DiagnosticsProperty': false,
  'DiagnosticsProperty.lazy': false,
  'DiagnosticsStackTrace': false,
  'DiagnosticsStackTrace.singleFrame': false,
  'DiagnosticsTreeStyle.dense': false,
  'DiagnosticsTreeStyle.error': false,
  'DiagnosticsTreeStyle.errorProperty': false,
  'DiagnosticsTreeStyle.flat': false,
  'DiagnosticsTreeStyle.none': false,
  'DiagnosticsTreeStyle.offstage': false,
  'DiagnosticsTreeStyle.shallow': false,
  'DiagnosticsTreeStyle.singleLine': false,
  'DiagnosticsTreeStyle.sparse': false,
  'DiagnosticsTreeStyle.transition': false,
  'DiagnosticsTreeStyle.truncateChildren': false,
  'DiagnosticsTreeStyle.values': false,
  'DiagnosticsTreeStyle.whitespace': false,
  'Dialog': true,
  'Dialog.fullscreen': true,
  'DialogRoute': false,
  'DialogTheme': false,
  'DialogTheme.lerp': false,
  'DialogTheme.of': false,
  'DirectionalFocusAction': false,
  'DirectionalFocusAction.forTextField': false,
  'DirectionalFocusIntent': false,
  'Directionality': true,
  'Directionality.maybeOf': false,
  'Directionality.of': false,
  'DirectionallyExtendSelectionEvent': false,
  'DismissDirection.down': false,
  'DismissDirection.endToStart': false,
  'DismissDirection.horizontal': false,
  'DismissDirection.none': false,
  'DismissDirection.startToEnd': false,
  'DismissDirection.up': false,
  'DismissDirection.values': false,
  'DismissDirection.vertical': false,
  'DismissIntent': false,
  'DismissMenuAction': false,
  'DismissUpdateDetails': false,
  'Dismissible': true,
  'DisplayFeature': false,
  'DisplayFeatureState.postureFlat': false,
  'DisplayFeatureState.postureHalfOpened': false,
  'DisplayFeatureState.unknown': false,
  'DisplayFeatureState.values': false,
  'DisplayFeatureSubScreen': true,
  'DisplayFeatureSubScreen.avoidBounds': false,
  'DisplayFeatureSubScreen.subScreensInBounds': false,
  'DisplayFeatureType.cutout': false,
  'DisplayFeatureType.fold': false,
  'DisplayFeatureType.hinge': false,
  'DisplayFeatureType.unknown': false,
  'DisplayFeatureType.values': false,
  'DisposableBuildContext': false,
  'Divider': true,
  'Divider.createBorderSide': false,
  'DividerTheme': true,
  'DividerTheme.of': false,
  'DividerThemeData': false,
  'DividerThemeData.lerp': false,
  'DoNothingAction': false,
  'DoNothingAndStopPropagationIntent': false,
  'DoNothingAndStopPropagationTextIntent': false,
  'DoNothingIntent': false,
  'DocumentBoundary': false,
  'DocumentationIcon': false,
  'DomCSSStyleDeclaration': false,
  'DomCSSStyleSheet': false,
  'DomDocument': false,
  'DomElement': false,
  'DomEvent': false,
  'DomEventListener': false,
  'DomEventTarget': false,
  'DomHTMLDivElement': false,
  'DomHTMLElement': false,
  'DomHTMLHeadElement': false,
  'DomHTMLStyleElement': false,
  'DomMediaQueryList': false,
  'DomMouseEvent': false,
  'DomNavigator': false,
  'DomNode': false,
  'DomProgressEvent': false,
  'DomRange': false,
  'DomSelection': false,
  'DomStyleSheet': false,
  'DomTokenList': false,
  'DomUIEvent': false,
  'DomWindow': false,
  'DomXMLHttpRequest': false,
  'DoubleProperty': false,
  'DoubleProperty.lazy': false,
  'DoubleTapGestureRecognizer': false,
  'DragDownDetails': false,
  'DragEndDetails': false,
  'DragScrollActivity': false,
  'DragStartBehavior.down': false,
  'DragStartBehavior.start': false,
  'DragStartBehavior.values': false,
  'DragStartDetails': false,
  'DragTarget': true,
  'DragTargetDetails': false,
  'DragUpdateDetails': false,
  'Draggable': true,
  'DraggableDetails': false,
  'DraggableScrollableActuator': true,
  'DraggableScrollableActuator.reset': false,
  'DraggableScrollableController': false,
  'DraggableScrollableNotification': false,
  'DraggableScrollableSheet': true,
  'Drawer': true,
  'DrawerAlignment.end': false,
  'DrawerAlignment.start': false,
  'DrawerAlignment.values': false,
  'DrawerButton': true,
  'DrawerButtonIcon': true,
  'DrawerController': true,
  'DrawerController.maybeOf': true,
  'DrawerController.of': true,
  'DrawerHeader': true,
  'DrawerTheme': true,
  'DrawerTheme.of': false,
  'DrawerThemeData': false,
  'DrawerThemeData.lerp': false,
  'DrivenScrollActivity': false,
  'DropSliderValueIndicatorShape': false,
  'DropdownButton': true,
  'DropdownButtonFormField': true,
  'DropdownButtonHideUnderline': true,
  'DropdownButtonHideUnderline.at': false,
  'DropdownMenu': true,
  'DropdownMenuEntry': false,
  'DropdownMenuItem': true,
  'DropdownMenuTheme': true,
  'DropdownMenuTheme.maybeOf': false,
  'DropdownMenuTheme.of': false,
  'DropdownMenuThemeData': false,
  'DropdownMenuThemeData.lerp': false,
  'DualTransitionBuilder': true,
  'EagerGestureRecognizer': false,
  'EdgeDraggingAutoScroller': false,
  'EdgeInsets.all': false,
  'EdgeInsets.fromLTRB': false,
  'EdgeInsets.fromViewPadding': false,
  'EdgeInsets.lerp': false,
  'EdgeInsets.only': false,
  'EdgeInsets.symmetric': false,
  'EdgeInsets.zero': false,
  'EdgeInsetsDirectional.all': false,
  'EdgeInsetsDirectional.fromSTEB': false,
  'EdgeInsetsDirectional.lerp': false,
  'EdgeInsetsDirectional.only': false,
  'EdgeInsetsDirectional.symmetric': false,
  'EdgeInsetsDirectional.zero': false,
  'EdgeInsetsGeometryTween': false,
  'EdgeInsetsTween': false,
  'EditableText': true,
  'EditableText.debugDeterministicCursor': false,
  'EditableText.getEditableButtonItems': false,
  'ElasticInCurve': false,
  'ElasticInOutCurve': false,
  'ElasticOutCurve': false,
  'ElevatedButton': true,
  'ElevatedButton.icon': true,
  'ElevatedButton.styleFrom': false,
  'ElevatedButtonTheme': true,
  'ElevatedButtonTheme.of': false,
  'ElevatedButtonThemeData': false,
  'ElevatedButtonThemeData.lerp': false,
  'EmptyTextSelectionControls': false,
  'EndDrawerButton': true,
  'EndDrawerButtonIcon': true,
  'EnumProperty': false,
  'ErrorDescription': false,
  'ErrorHint': false,
  'ErrorSpacer': false,
  'ErrorSummary': false,
  'ErrorWidget': true,
  'ErrorWidget.builder': false,
  'ErrorWidget.withDetails': true,
  'EventChannel': false,
  'ExactAssetImage': false,
  'ExcludeFocus': true,
  'ExcludeFocusTraversal': true,
  'ExcludeSemantics': true,
  'ExpandIcon': true,
  'ExpandSelectionToDocumentBoundaryIntent': false,
  'ExpandSelectionToLineBreakIntent': false,
  'Expanded': true,
  'ExpansionPanel': false,
  'ExpansionPanelList': true,
  'ExpansionPanelList.radio': true,
  'ExpansionPanelRadio': false,
  'ExpansionTile': true,
  'ExpansionTileController': false,
  'ExpansionTileController.maybeOf': false,
  'ExpansionTileController.of': false,
  'ExpansionTileTheme': true,
  'ExpansionTileTheme.of': false,
  'ExpansionTileThemeData': false,
  'ExpansionTileThemeData.lerp': false,
  'ExtendSelectionByCharacterIntent': false,
  'ExtendSelectionByPageIntent': false,
  'ExtendSelectionToDocumentBoundaryIntent': false,
  'ExtendSelectionToLineBreakIntent': false,
  'ExtendSelectionToNextParagraphBoundaryIntent': false,
  'ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent': false,
  'ExtendSelectionToNextWordBoundaryIntent': false,
  'ExtendSelectionToNextWordBoundaryOrCaretLocationIntent': false,
  'ExtendSelectionVerticallyToAdjacentLineIntent': false,
  'ExtendSelectionVerticallyToAdjacentPageIntent': false,
  'Factory': false,
  'FadeInImage': true,
  'FadeInImage.assetNetwork': true,
  'FadeInImage.memoryNetwork': true,
  'FadeTransition': true,
  'FadeUpwardsPageTransitionsBuilder': false,
  'FileImage': false,
  'FilledButton': true,
  'FilledButton.icon': true,
  'FilledButton.styleFrom': false,
  'FilledButton.tonal': true,
  'FilledButton.tonalIcon': true,
  'FilledButtonTheme': true,
  'FilledButtonTheme.of': false,
  'FilledButtonThemeData': false,
  'FilledButtonThemeData.lerp': false,
  'FilterChip': true,
  'FilterQuality.high': false,
  'FilterQuality.low': false,
  'FilterQuality.medium': false,
  'FilterQuality.none': false,
  'FilterQuality.values': false,
  'FilteringTextInputFormatter': false,
  'FilteringTextInputFormatter.allow': false,
  'FilteringTextInputFormatter.deny': false,
  'FilteringTextInputFormatter.digitsOnly': false,
  'FilteringTextInputFormatter.singleLineFormatter': false,
  'FittedBox': true,
  'FittedSizes': false,
  'FixedColumnWidth': false,
  'FixedExtentMetrics': false,
  'FixedExtentScrollController': false,
  'FixedExtentScrollPhysics': false,
  'FixedScrollMetrics': false,
  'FlagProperty': false,
  'FlagsSummary': false,
  'Flex': true,
  'FlexColumnWidth': false,
  'FlexFit.loose': false,
  'FlexFit.tight': false,
  'FlexFit.values': false,
  'FlexParentData': false,
  'Flexible': true,
  'FlexibleSpaceBar': true,
  'FlexibleSpaceBar.createSettings': false,
  'FlexibleSpaceBarSettings': true,
  'FlippedCurve': false,
  'FlippedTweenSequence': false,
  'FloatingActionButton': true,
  'FloatingActionButton.extended': true,
  'FloatingActionButton.large': true,
  'FloatingActionButton.small': true,
  'FloatingActionButtonThemeData': false,
  'FloatingActionButtonThemeData.lerp': false,
  'FloatingCursorDragState.End': false,
  'FloatingCursorDragState.Start': false,
  'FloatingCursorDragState.Update': false,
  'FloatingCursorDragState.values': false,
  'FloatingHeaderSnapConfiguration': false,
  'FloatingLabelAlignment.center': false,
  'FloatingLabelAlignment.start': false,
  'FloatingLabelBehavior.always': false,
  'FloatingLabelBehavior.auto': false,
  'FloatingLabelBehavior.never': false,
  'FloatingLabelBehavior.values': false,
  'Flow': true,
  'Flow.unwrapped': true,
  'FlowParentData': false,
  'FlutterError': false,
  'FlutterError.addDefaultStackFilter': false,
  'FlutterError.defaultStackFilter': false,
  'FlutterError.demangleStackTrace': false,
  'FlutterError.dumpErrorToConsole': false,
  'FlutterError.fromParts': false,
  'FlutterError.onError': false,
  'FlutterError.presentError': false,
  'FlutterError.reportError': false,
  'FlutterError.resetErrorCount': false,
  'FlutterError.wrapWidth': false,
  'FlutterErrorDetails': false,
  'FlutterErrorDetails.propertiesTransformers': false,
  'FlutterErrorDetailsForPointerEventDispatcher': false,
  'FlutterLogo': true,
  'FlutterLogoDecoration': false,
  'FlutterLogoDecoration.lerp': false,
  'FlutterLogoStyle.horizontal': false,
  'FlutterLogoStyle.markOnly': false,
  'FlutterLogoStyle.stacked': false,
  'FlutterLogoStyle.values': false,
  'Focus': true,
  'Focus.isAt': false,
  'Focus.maybeOf': false,
  'Focus.of': false,
  'Focus.withExternalFocusNode': true,
  'FocusHighlightMode.touch': false,
  'FocusHighlightMode.traditional': false,
  'FocusHighlightMode.values': false,
  'FocusHighlightStrategy.alwaysTouch': false,
  'FocusHighlightStrategy.alwaysTraditional': false,
  'FocusHighlightStrategy.automatic': false,
  'FocusHighlightStrategy.values': false,
  'FocusManager': false,
  'FocusManager.instance': false,
  'FocusNode': false,
  'FocusScope': true,
  'FocusScope.of': false,
  'FocusScope.withExternalFocusNode': true,
  'FocusScopeNode': false,
  'FocusTraversalGroup': true,
  'FocusTraversalGroup.maybeOf': false,
  'FocusTraversalGroup.maybeOfNode': false,
  'FocusTraversalGroup.of': false,
  'FocusTraversalOrder': true,
  'FocusTraversalOrder.maybeOf': false,
  'FocusTraversalOrder.of': false,
  'FocusableActionDetector': true,
  'FollowerLayer': false,
  'FontFeature': false,
  'FontFeature.alternative': false,
  'FontFeature.alternativeFractions': false,
  'FontFeature.caseSensitiveForms': false,
  'FontFeature.characterVariant': false,
  'FontFeature.contextualAlternates': false,
  'FontFeature.denominator': false,
  'FontFeature.disable': false,
  'FontFeature.enable': false,
  'FontFeature.fractions': false,
  'FontFeature.historicalForms': false,
  'FontFeature.historicalLigatures': false,
  'FontFeature.liningFigures': false,
  'FontFeature.localeAware': false,
  'FontFeature.notationalForms': false,
  'FontFeature.numerators': false,
  'FontFeature.oldstyleFigures': false,
  'FontFeature.ordinalForms': false,
  'FontFeature.proportionalFigures': false,
  'FontFeature.randomize': false,
  'FontFeature.scientificInferiors': false,
  'FontFeature.slashedZero': false,
  'FontFeature.stylisticAlternates': false,
  'FontFeature.stylisticSet': false,
  'FontFeature.subscripts': false,
  'FontFeature.superscripts': false,
  'FontFeature.swash': false,
  'FontFeature.tabularFigures': false,
  'FontLoader': false,
  'FontStyle.italic': false,
  'FontStyle.normal': false,
  'FontStyle.values': false,
  'FontVariation': false,
  'FontWeight.bold': false,
  'FontWeight.lerp': false,
  'FontWeight.normal': false,
  'FontWeight.values': false,
  'FontWeight.w100': false,
  'FontWeight.w200': false,
  'FontWeight.w300': false,
  'FontWeight.w400': false,
  'FontWeight.w500': false,
  'FontWeight.w600': false,
  'FontWeight.w700': false,
  'FontWeight.w800': false,
  'FontWeight.w900': false,
  'ForcePressDetails': false,
  'ForcePressGestureRecognizer': false,
  'Form': true,
  'Form.maybeOf': false,
  'Form.of': false,
  'FormField': true,
  'FoundationServiceExtensions.activeDevToolsServerAddress': false,
  'FoundationServiceExtensions.brightnessOverride': false,
  'FoundationServiceExtensions.connectedVmServiceUri': false,
  'FoundationServiceExtensions.exit': false,
  'FoundationServiceExtensions.platformOverride': false,
  'FoundationServiceExtensions.reassemble': false,
  'FoundationServiceExtensions.values': false,
  'FractionColumnWidth': false,
  'FractionalOffset': false,
  'FractionalOffset.bottomCenter': false,
  'FractionalOffset.bottomLeft': false,
  'FractionalOffset.bottomRight': false,
  'FractionalOffset.center': false,
  'FractionalOffset.centerLeft': false,
  'FractionalOffset.centerRight': false,
  'FractionalOffset.fromOffsetAndRect': false,
  'FractionalOffset.fromOffsetAndSize': false,
  'FractionalOffset.lerp': false,
  'FractionalOffset.topCenter': false,
  'FractionalOffset.topLeft': false,
  'FractionalOffset.topRight': false,
  'FractionalOffsetTween': false,
  'FractionalTranslation': true,
  'FractionallySizedBox': true,
  'FragmentProgram.fromAsset': false,
  'FramePhase.buildFinish': false,
  'FramePhase.buildStart': false,
  'FramePhase.rasterFinish': false,
  'FramePhase.rasterFinishWallTime': false,
  'FramePhase.rasterStart': false,
  'FramePhase.values': false,
  'FramePhase.vsyncStart': false,
  'FrameTiming': false,
  'FrictionSimulation': false,
  'FrictionSimulation.through': false,
  'FutureBuilder': true,
  'FutureBuilder.debugRethrowError': false,
  'GLFWKeyHelper': false,
  'GLFWKeyHelper.modifierAlt': false,
  'GLFWKeyHelper.modifierCapsLock': false,
  'GLFWKeyHelper.modifierControl': false,
  'GLFWKeyHelper.modifierMeta': false,
  'GLFWKeyHelper.modifierNumericPad': false,
  'GLFWKeyHelper.modifierShift': false,
  'GestureArenaManager': false,
  'GestureArenaTeam': false,
  'GestureDetector': true,
  'GestureDisposition.accepted': false,
  'GestureDisposition.rejected': false,
  'GestureDisposition.values': false,
  'GestureRecognizerFactoryWithHandlers': false,
  'GestureRecognizerState.defunct': false,
  'GestureRecognizerState.possible': false,
  'GestureRecognizerState.ready': false,
  'GestureRecognizerState.values': false,
  'GestureSettings': false,
  'GlobalObjectKey': false,
  'GlowingOverscrollIndicator': true,
  'GradientRotation': false,
  'GranularlyExtendSelectionEvent': false,
  'GravitySimulation': false,
  'GridPaper': true,
  'GridTile': true,
  'GridTileBar': true,
  'GridView': true,
  'GridView.builder': true,
  'GridView.count': true,
  'GridView.custom': true,
  'GridView.extent': true,
  'GrowthDirection.forward': false,
  'GrowthDirection.reverse': false,
  'GrowthDirection.values': false,
  'GtkKeyHelper': false,
  'GtkKeyHelper.modifierCapsLock': false,
  'GtkKeyHelper.modifierControl': false,
  'GtkKeyHelper.modifierMeta': false,
  'GtkKeyHelper.modifierMod1': false,
  'GtkKeyHelper.modifierMod2': false,
  'GtkKeyHelper.modifierShift': false,
  'HSLColor.fromAHSL': false,
  'HSLColor.fromColor': false,
  'HSLColor.lerp': false,
  'HSVColor.fromAHSV': false,
  'HSVColor.fromColor': false,
  'HSVColor.lerp': false,
  'HardwareKeyboard': false,
  'HardwareKeyboard.instance': false,
  'HashedObserverList': false,
  'Hero': true,
  'HeroController': false,
  'HeroControllerScope': true,
  'HeroControllerScope.maybeOf': false,
  'HeroControllerScope.none': true,
  'HeroControllerScope.of': false,
  'HeroFlightDirection.pop': false,
  'HeroFlightDirection.push': false,
  'HeroFlightDirection.values': false,
  'HeroMode': true,
  'HitTestBehavior.deferToChild': false,
  'HitTestBehavior.opaque': false,
  'HitTestBehavior.translucent': false,
  'HitTestBehavior.values': false,
  'HitTestEntry': false,
  'HitTestResult': false,
  'HitTestResult.wrap': false,
  'HoldScrollActivity': false,
  'HorizontalDragGestureRecognizer': false,
  'HorizontalMultiDragGestureRecognizer': false,
  'HourFormat.H': false,
  'HourFormat.HH': false,
  'HourFormat.h': false,
  'HourFormat.values': false,
  'HtmlElementView': true,
  'IOSScrollViewFlingVelocityTracker': false,
  'Icon': true,
  'IconButton': true,
  'IconButton.filled': true,
  'IconButton.filledTonal': true,
  'IconButton.outlined': true,
  'IconButton.styleFrom': false,
  'IconButtonTheme': true,
  'IconButtonTheme.of': false,
  'IconButtonThemeData': false,
  'IconButtonThemeData.lerp': false,
  'IconDataProperty': false,
  'IconTheme': true,
  'IconTheme.merge': false,
  'IconTheme.of': false,
  'IconThemeData': false,
  'IconThemeData.fallback': false,
  'IconThemeData.lerp': false,
  'IdleScrollActivity': false,
  'IgnorePointer': true,
  'Image': true,
  'Image.asset': true,
  'Image.file': true,
  'Image.memory': true,
  'Image.network': true,
  'Image.onCreate': false,
  'Image.onDispose': false,
  'ImageByteFormat.png': false,
  'ImageByteFormat.rawExtendedRgba128': false,
  'ImageByteFormat.rawRgba': false,
  'ImageByteFormat.rawStraightRgba': false,
  'ImageByteFormat.rawUnmodified': false,
  'ImageByteFormat.values': false,
  'ImageCache': false,
  'ImageChunkEvent': false,
  'ImageConfiguration': false,
  'ImageConfiguration.empty': false,
  'ImageFilterLayer': false,
  'ImageFiltered': true,
  'ImageIcon': true,
  'ImageInfo': false,
  'ImageRepeat.noRepeat': false,
  'ImageRepeat.repeat': false,
  'ImageRepeat.repeatX': false,
  'ImageRepeat.repeatY': false,
  'ImageRepeat.values': false,
  'ImageShader': false,
  'ImageSizeInfo': false,
  'ImageStream': false,
  'ImageStreamListener': false,
  'ImmediateMultiDragGestureRecognizer': false,
  'ImmutableBuffer.fromAsset': false,
  'ImmutableBuffer.fromFilePath': false,
  'ImmutableBuffer.fromUint8List': false,
  'IndexedSemantics': true,
  'IndexedSlot': false,
  'IndexedStack': true,
  'InheritedElement': false,
  'InheritedModelElement': false,
  'Ink': true,
  'Ink.image': true,
  'InkDecoration': false,
  'InkHighlight': false,
  'InkResponse': true,
  'InkRipple': false,
  'InkRipple.splashFactory': false,
  'InkSparkle': false,
  'InkSparkle.constantTurbulenceSeedSplashFactory': false,
  'InkSparkle.splashFactory': false,
  'InkSplash': false,
  'InkSplash.splashFactory': false,
  'InkWell': true,
  'InlineSpanSemanticsInformation': false,
  'InlineSpanSemanticsInformation.placeholder': false,
  'InputChip': true,
  'InputDatePickerFormField': true,
  'InputDecoration': false,
  'InputDecoration.collapsed': false,
  'InputDecorationTheme': false,
  'InputDecorator': true,
  'InputDecorator.containerOf': false,
  'IntProperty': false,
  'IntTween': false,
  'InteractiveViewer': true,
  'InteractiveViewer.builder': true,
  'Interval': false,
  'IntrinsicColumnWidth': false,
  'IntrinsicHeight': true,
  'IntrinsicWidth': true,
  'IterableProperty': false,
  'JSONMessageCodec': false,
  'JSONMethodCodec': false,
  'KeepAlive': true,
  'KeepAliveHandle': false,
  'KeepAliveNotification': false,
  'KeyData': false,
  'KeyDataTransitMode.keyDataThenRawKeyData': false,
  'KeyDataTransitMode.rawKeyData': false,
  'KeyDataTransitMode.values': false,
  'KeyDownEvent': false,
  'KeyEventManager': false,
  'KeyEventResult.handled': false,
  'KeyEventResult.ignored': false,
  'KeyEventResult.skipRemainingHandlers': false,
  'KeyEventResult.values': false,
  'KeyEventType.down': false,
  'KeyEventType.repeat': false,
  'KeyEventType.up': false,
  'KeyEventType.values': false,
  'KeyMessage': false,
  'KeyRepeatEvent': false,
  'KeySet': false,
  'KeySet.fromSet': false,
  'KeyUpEvent': false,
  'KeyboardInsertedContent': false,
  'KeyboardInsertedContent.fromJson': false,
  'KeyboardListener': true,
  'KeyboardLockMode.capsLock': false,
  'KeyboardLockMode.findLockByLogicalKey': false,
  'KeyboardLockMode.numLock': false,
  'KeyboardLockMode.scrollLock': false,
  'KeyboardLockMode.values': false,
  'KeyboardSide.all': false,
  'KeyboardSide.any': false,
  'KeyboardSide.left': false,
  'KeyboardSide.right': false,
  'KeyboardSide.values': false,
  'KeyedSubtree': true,
  'KeyedSubtree.ensureUniqueKeysForList': false,
  'KeyedSubtree.wrap': true,
  'LabeledGlobalKey': false,
  'LayerHandle': false,
  'LayerLink': false,
  'LayoutBuilder': true,
  'LayoutChangedNotification': false,
  'LayoutId': true,
  'LeaderLayer': false,
  'LeafRenderObjectElement': false,
  'LeastSquaresSolver': false,
  'LengthLimitingTextInputFormatter': false,
  'LengthLimitingTextInputFormatter.getDefaultMaxLengthEnforcement': false,
  'LexicalFocusOrder': false,
  'LicenseEntryWithLineBreaks': false,
  'LicensePage': true,
  'LicenseParagraph': false,
  'LicenseParagraph.centeredIndent': false,
  'LimitedBox': true,
  'LineBoundary': false,
  'LineMetrics': false,
  'LinearBorder': false,
  'LinearBorder.bottom': false,
  'LinearBorder.end': false,
  'LinearBorder.none': false,
  'LinearBorder.start': false,
  'LinearBorder.top': false,
  'LinearBorderEdge': false,
  'LinearBorderEdge.lerp': false,
  'LinearGradient': false,
  'LinearGradient.lerp': false,
  'LinearProgressIndicator': true,
  'ListBody': true,
  'ListBodyParentData': false,
  'ListTile': true,
  'ListTile.divideTiles': false,
  'ListTileControlAffinity.leading': false,
  'ListTileControlAffinity.platform': false,
  'ListTileControlAffinity.trailing': false,
  'ListTileControlAffinity.values': false,
  'ListTileStyle.drawer': false,
  'ListTileStyle.list': false,
  'ListTileStyle.values': false,
  'ListTileTheme': true,
  'ListTileTheme.merge': false,
  'ListTileTheme.of': false,
  'ListTileThemeData': false,
  'ListTileThemeData.lerp': false,
  'ListTileTitleAlignment.bottom': false,
  'ListTileTitleAlignment.center': false,
  'ListTileTitleAlignment.threeLine': false,
  'ListTileTitleAlignment.titleHeight': false,
  'ListTileTitleAlignment.top': false,
  'ListTileTitleAlignment.values': false,
  'ListView': true,
  'ListView.builder': true,
  'ListView.custom': true,
  'ListView.separated': true,
  'ListWheelChildBuilderDelegate': false,
  'ListWheelChildListDelegate': false,
  'ListWheelChildLoopingListDelegate': false,
  'ListWheelElement': false,
  'ListWheelScrollView': true,
  'ListWheelScrollView.useDelegate': true,
  'ListWheelViewport': true,
  'ListenableBuilder': true,
  'Listener': true,
  'LocalHistoryEntry': false,
  'Locale': false,
  'Locale.fromSubtags': false,
  'LocaleStringAttribute': false,
  'Localizations': true,
  'Localizations.localeOf': false,
  'Localizations.maybeLocaleOf': false,
  'Localizations.of': false,
  'Localizations.override': true,
  'LogicalKeySet': false,
  'LogicalKeySet.fromSet': false,
  'LongPressDownDetails': false,
  'LongPressDraggable': true,
  'LongPressEndDetails': false,
  'LongPressGestureRecognizer': false,
  'LongPressMoveUpdateDetails': false,
  'LongPressSemanticsEvent': false,
  'LongPressStartDetails': false,
  'LookupBoundary': true,
  'LookupBoundary.debugIsHidingAncestorRenderObjectOfType': false,
  'LookupBoundary.debugIsHidingAncestorStateOfType': false,
  'LookupBoundary.debugIsHidingAncestorWidgetOfExactType': false,
  'LookupBoundary.dependOnInheritedWidgetOfExactType': false,
  'LookupBoundary.findAncestorRenderObjectOfType': false,
  'LookupBoundary.findAncestorStateOfType': false,
  'LookupBoundary.findAncestorWidgetOfExactType': false,
  'LookupBoundary.findRootAncestorStateOfType': false,
  'LookupBoundary.getElementForInheritedWidgetOfExactType': false,
  'LookupBoundary.visitAncestorElements': false,
  'LookupBoundary.visitChildElements': false,
  'MacOSScrollViewFlingVelocityTracker': false,
  'Magnifier': true,
  'MagnifierController': false,
  'MagnifierController.shiftWithinBounds': false,
  'MagnifierDecoration': false,
  'MagnifierInfo': false,
  'MagnifierInfo.empty': false,
  'MainAxisAlignment.center': false,
  'MainAxisAlignment.end': false,
  'MainAxisAlignment.spaceAround': false,
  'MainAxisAlignment.spaceBetween': false,
  'MainAxisAlignment.spaceEvenly': false,
  'MainAxisAlignment.start': false,
  'MainAxisAlignment.values': false,
  'MainAxisSize.max': false,
  'MainAxisSize.min': false,
  'MainAxisSize.values': false,
  'MaskFilter.blur': false,
  'Material': true,
  'Material.defaultSplashRadius': false,
  'Material.maybeOf': false,
  'Material.of': false,
  'MaterialAccentColor': false,
  'MaterialApp': true,
  'MaterialApp.createMaterialHeroController': false,
  'MaterialApp.router': true,
  'MaterialBanner': true,
  'MaterialBanner.createAnimationController': false,
  'MaterialBannerClosedReason.dismiss': false,
  'MaterialBannerClosedReason.hide': false,
  'MaterialBannerClosedReason.remove': false,
  'MaterialBannerClosedReason.swipe': false,
  'MaterialBannerClosedReason.values': false,
  'MaterialBannerTheme': true,
  'MaterialBannerTheme.of': false,
  'MaterialBannerThemeData': false,
  'MaterialBannerThemeData.lerp': false,
  'MaterialBasedCupertinoThemeData': false,
  'MaterialButton': true,
  'MaterialColor': false,
  'MaterialGap': false,
  'MaterialPage': false,
  'MaterialPageRoute': false,
  'MaterialPointArcTween': false,
  'MaterialRectArcTween': false,
  'MaterialRectCenterArcTween': false,
  'MaterialScrollBehavior': false,
  'MaterialSlice': false,
  'MaterialState.disabled': false,
  'MaterialState.dragged': false,
  'MaterialState.error': false,
  'MaterialState.focused': false,
  'MaterialState.hovered': false,
  'MaterialState.pressed': false,
  'MaterialState.scrolledUnder': false,
  'MaterialState.selected': false,
  'MaterialState.values': false,
  'MaterialStatePropertyAll': false,
  'MaterialStatesController': false,
  'MaterialTapTargetSize.padded': false,
  'MaterialTapTargetSize.shrinkWrap': false,
  'MaterialTapTargetSize.values': false,
  'MaterialTextSelectionControls': false,
  'MaterialType.button': false,
  'MaterialType.canvas': false,
  'MaterialType.card': false,
  'MaterialType.circle': false,
  'MaterialType.transparency': false,
  'MaterialType.values': false,
  'Matrix4Tween': false,
  'MaxColumnWidth': false,
  'MaxLengthEnforcement.enforced': false,
  'MaxLengthEnforcement.none': false,
  'MaxLengthEnforcement.truncateAfterCompositionEnds': false,
  'MaxLengthEnforcement.values': false,
  'MediaQuery': true,
  'MediaQuery.accessibleNavigationOf': false,
  'MediaQuery.alwaysUse24HourFormatOf': false,
  'MediaQuery.boldTextOf': false,
  'MediaQuery.devicePixelRatioOf': false,
  'MediaQuery.disableAnimationsOf': false,
  'MediaQuery.displayFeaturesOf': false,
  'MediaQuery.fromView': false,
  'MediaQuery.gestureSettingsOf': false,
  'MediaQuery.highContrastOf': false,
  'MediaQuery.invertColorsOf': false,
  'MediaQuery.maybeAccessibleNavigationOf': false,
  'MediaQuery.maybeAlwaysUse24HourFormatOf': false,
  'MediaQuery.maybeBoldTextOf': false,
  'MediaQuery.maybeDevicePixelRatioOf': false,
  'MediaQuery.maybeDisableAnimationsOf': false,
  'MediaQuery.maybeDisplayFeaturesOf': false,
  'MediaQuery.maybeGestureSettingsOf': false,
  'MediaQuery.maybeHighContrastOf': false,
  'MediaQuery.maybeInvertColorsOf': false,
  'MediaQuery.maybeNavigationModeOf': false,
  'MediaQuery.maybeOf': false,
  'MediaQuery.maybeOrientationOf': false,
  'MediaQuery.maybePaddingOf': false,
  'MediaQuery.maybePlatformBrightnessOf': false,
  'MediaQuery.maybeSizeOf': false,
  'MediaQuery.maybeSystemGestureInsetsOf': false,
  'MediaQuery.maybeTextScaleFactorOf': false,
  'MediaQuery.maybeViewInsetsOf': false,
  'MediaQuery.maybeViewPaddingOf': false,
  'MediaQuery.navigationModeOf': false,
  'MediaQuery.of': false,
  'MediaQuery.orientationOf': false,
  'MediaQuery.paddingOf': false,
  'MediaQuery.platformBrightnessOf': false,
  'MediaQuery.removePadding': true,
  'MediaQuery.removeViewInsets': true,
  'MediaQuery.removeViewPadding': true,
  'MediaQuery.sizeOf': false,
  'MediaQuery.systemGestureInsetsOf': false,
  'MediaQuery.textScaleFactorOf': false,
  'MediaQuery.viewInsetsOf': false,
  'MediaQuery.viewPaddingOf': false,
  'MediaQueryData': false,
  'MediaQueryData.fromView': false,
  'MemoryAllocations.instance': false,
  'MemoryImage': false,
  'MenuAcceleratorCallbackBinding': true,
  'MenuAcceleratorCallbackBinding.maybeOf': true,
  'MenuAcceleratorCallbackBinding.of': true,
  'MenuAcceleratorLabel': true,
  'MenuAcceleratorLabel.defaultLabelBuilder': false,
  'MenuAcceleratorLabel.stripAcceleratorMarkers': false,
  'MenuAnchor': true,
  'MenuBar': true,
  'MenuBarTheme': true,
  'MenuBarTheme.of': false,
  'MenuBarThemeData': false,
  'MenuBarThemeData.lerp': false,
  'MenuButtonTheme': true,
  'MenuButtonTheme.of': false,
  'MenuButtonThemeData': false,
  'MenuButtonThemeData.lerp': false,
  'MenuController': false,
  'MenuItemButton': true,
  'MenuItemButton.styleFrom': false,
  'MenuStyle': false,
  'MenuStyle.lerp': false,
  'MenuTheme': true,
  'MenuTheme.of': false,
  'MenuThemeData': false,
  'MenuThemeData.lerp': false,
  'MergeSemantics': true,
  'MergeableMaterial': true,
  'MessageProperty': false,
  'MetaData': true,
  'MethodCall': false,
  'MethodChannel': false,
  'MinColumnWidth': false,
  'MissingPluginException': false,
  'ModalBarrier': true,
  'ModalBottomSheetRoute': false,
  'ModifierKey.altModifier': false,
  'ModifierKey.capsLockModifier': false,
  'ModifierKey.controlModifier': false,
  'ModifierKey.functionModifier': false,
  'ModifierKey.metaModifier': false,
  'ModifierKey.numLockModifier': false,
  'ModifierKey.scrollLockModifier': false,
  'ModifierKey.shiftModifier': false,
  'ModifierKey.symbolModifier': false,
  'ModifierKey.values': false,
  'MouseCursorManager': false,
  'MouseRegion': true,
  'MouseTracker': false,
  'MouseTrackerAnnotation': false,
  'MultiChildLayoutParentData': false,
  'MultiChildRenderObjectElement': false,
  'MultiFrameImageStreamCompleter': false,
  'MultiTapGestureRecognizer': false,
  'NavigationBar': true,
  'NavigationBarTheme': true,
  'NavigationBarTheme.of': false,
  'NavigationBarThemeData': false,
  'NavigationBarThemeData.lerp': false,
  'NavigationDestination': true,
  'NavigationDestinationLabelBehavior.alwaysHide': false,
  'NavigationDestinationLabelBehavior.alwaysShow': false,
  'NavigationDestinationLabelBehavior.onlyShowSelected': false,
  'NavigationDestinationLabelBehavior.values': false,
  'NavigationDrawer': true,
  'NavigationDrawerDestination': true,
  'NavigationDrawerTheme': true,
  'NavigationDrawerTheme.of': false,
  'NavigationDrawerThemeData': false,
  'NavigationDrawerThemeData.lerp': false,
  'NavigationIndicator': true,
  'NavigationMode.directional': false,
  'NavigationMode.traditional': false,
  'NavigationMode.values': false,
  'NavigationRail': true,
  'NavigationRail.extendedAnimation': false,
  'NavigationRailDestination': false,
  'NavigationRailLabelType.all': false,
  'NavigationRailLabelType.none': false,
  'NavigationRailLabelType.selected': false,
  'NavigationRailLabelType.values': false,
  'NavigationRailTheme': true,
  'NavigationRailTheme.of': false,
  'NavigationRailThemeData': false,
  'NavigationRailThemeData.lerp': false,
  'NavigationToolbar': true,
  'NavigationToolbar.kMiddleSpacing': false,
  'Navigator': true,
  'Navigator.canPop': false,
  'Navigator.defaultGenerateInitialRoutes': false,
  'Navigator.defaultRouteName': false,
  'Navigator.maybeOf': false,
  'Navigator.maybePop': false,
  'Navigator.of': false,
  'Navigator.pop': false,
  'Navigator.popAndPushNamed': false,
  'Navigator.popUntil': false,
  'Navigator.push': false,
  'Navigator.pushAndRemoveUntil': false,
  'Navigator.pushNamed': false,
  'Navigator.pushNamedAndRemoveUntil': false,
  'Navigator.pushReplacement': false,
  'Navigator.pushReplacementNamed': false,
  'Navigator.removeRoute': false,
  'Navigator.removeRouteBelow': false,
  'Navigator.replace': false,
  'Navigator.replaceRouteBelow': false,
  'Navigator.restorablePopAndPushNamed': false,
  'Navigator.restorablePush': false,
  'Navigator.restorablePushAndRemoveUntil': false,
  'Navigator.restorablePushNamed': false,
  'Navigator.restorablePushNamedAndRemoveUntil': false,
  'Navigator.restorablePushReplacement': false,
  'Navigator.restorablePushReplacementNamed': false,
  'Navigator.restorableReplace': false,
  'Navigator.restorableReplaceRouteBelow': false,
  'NavigatorObserver': false,
  'NestedScrollView': true,
  'NestedScrollView.sliverOverlapAbsorberHandleFor': false,
  'NestedScrollViewViewport': true,
  'NetworkAssetBundle': false,
  'NetworkImage': false,
  'NetworkImageLoadException': false,
  'NeverScrollableScrollPhysics': false,
  'NextFocusAction': false,
  'NextFocusIntent': false,
  'NoDefaultCupertinoThemeData': false,
  'NoSplash': false,
  'NoSplash.splashFactory': false,
  'NotificationListener': true,
  'NumericFocusOrder': false,
  'ObjectCreated': false,
  'ObjectDisposed': false,
  'ObjectFlagProperty': false,
  'ObjectFlagProperty.has': false,
  'ObjectKey': false,
  'ObserverList': false,
  'Offset': false,
  'Offset.fromDirection': false,
  'Offset.infinite': false,
  'Offset.lerp': false,
  'Offset.zero': false,
  'OffsetLayer': false,
  'OffsetPair': false,
  'OffsetPair.fromEventDelta': false,
  'OffsetPair.fromEventPosition': false,
  'OffsetPair.zero': false,
  'Offstage': true,
  'OneFrameImageStreamCompleter': false,
  'Opacity': true,
  'OpacityLayer': false,
  'OpenUpwardsPageTransitionsBuilder': false,
  'OptionalMethodChannel': false,
  'OrderedTraversalPolicy': false,
  'OrdinalSortKey': false,
  'Orientation.landscape': false,
  'Orientation.portrait': false,
  'Orientation.values': false,
  'OrientationBuilder': true,
  'OutlineInputBorder': false,
  'OutlinedButton': true,
  'OutlinedButton.icon': true,
  'OutlinedButton.styleFrom': false,
  'OutlinedButtonTheme': true,
  'OutlinedButtonTheme.of': false,
  'OutlinedButtonThemeData': false,
  'OutlinedButtonThemeData.lerp': false,
  'OvalBorder': false,
  'OverScrollHeaderStretchConfiguration': false,
  'OverflowBar': true,
  'OverflowBarAlignment.center': false,
  'OverflowBarAlignment.end': false,
  'OverflowBarAlignment.start': false,
  'OverflowBarAlignment.values': false,
  'OverflowBox': true,
  'Overlay': true,
  'Overlay.maybeOf': false,
  'Overlay.of': false,
  'OverlayEntry': false,
  'OverlayPortal': true,
  'OverlayPortal.targetsRootOverlay': true,
  'OverlayPortalController': false,
  'OverlayVisibilityMode.always': false,
  'OverlayVisibilityMode.editing': false,
  'OverlayVisibilityMode.never': false,
  'OverlayVisibilityMode.notEditing': false,
  'OverlayVisibilityMode.values': false,
  'OverscrollIndicatorNotification': false,
  'OverscrollNotification': false,
  'Padding': true,
  'PaddleRangeSliderValueIndicatorShape': false,
  'PaddleSliderValueIndicatorShape': false,
  'PageController': false,
  'PageMetrics': false,
  'PageRouteBuilder': false,
  'PageScrollPhysics': false,
  'PageStorage': true,
  'PageStorage.maybeOf': false,
  'PageStorage.of': false,
  'PageStorageBucket': false,
  'PageStorageKey': false,
  'PageTransitionsTheme': false,
  'PageView': true,
  'PageView.builder': true,
  'PageView.custom': true,
  'PaginatedDataTable': true,
  'PaginatedDataTable.defaultRowsPerPage': false,
  'Paint': false,
  'Paint.enableDithering': false,
  'PaintingContext': false,
  'PaintingContext.debugInstrumentRepaintCompositedChild': false,
  'PaintingContext.repaintCompositedChild': false,
  'PaintingContext.updateLayerProperties': false,
  'PaintingStyle.fill': false,
  'PaintingStyle.stroke': false,
  'PaintingStyle.values': false,
  'PanAxis.aligned': false,
  'PanAxis.free': false,
  'PanAxis.horizontal': false,
  'PanAxis.values': false,
  'PanAxis.vertical': false,
  'PanGestureRecognizer': false,
  'ParagraphBoundary': false,
  'ParagraphConstraints': false,
  'ParagraphStyle': false,
  'ParentData': false,
  'ParentDataElement': false,
  'PartialStackFrame': false,
  'PartialStackFrame.asynchronousSuspension': false,
  'PasteTextIntent': false,
  'PathFillType.evenOdd': false,
  'PathFillType.nonZero': false,
  'PathFillType.values': false,
  'PathOperation.difference': false,
  'PathOperation.intersect': false,
  'PathOperation.reverseDifference': false,
  'PathOperation.union': false,
  'PathOperation.values': false,
  'PathOperation.xor': false,
  'PercentProperty': false,
  'PerformanceOverlayLayer': false,
  'PersistentHashMap.empty': false,
  'PersistentHeaderShowOnScreenConfiguration': false,
  'PhysicalModel': true,
  'PhysicalShape': true,
  'PictureLayer': false,
  'PipelineOwner': false,
  'PixelFormat.bgra8888': false,
  'PixelFormat.rgba8888': false,
  'PixelFormat.rgbaFloat32': false,
  'PixelFormat.values': false,
  'Placeholder': true,
  'PlaceholderAlignment.aboveBaseline': false,
  'PlaceholderAlignment.baseline': false,
  'PlaceholderAlignment.belowBaseline': false,
  'PlaceholderAlignment.bottom': false,
  'PlaceholderAlignment.middle': false,
  'PlaceholderAlignment.top': false,
  'PlaceholderAlignment.values': false,
  'PlaceholderDimensions': false,
  'PlaceholderDimensions.empty': false,
  'PlaceholderSpanIndexSemanticsTag': false,
  'PlatformAssetBundle': false,
  'PlatformDispatcher.instance': false,
  'PlatformException': false,
  'PlatformMenu': false,
  'PlatformMenu.getDescendants': false,
  'PlatformMenu.serialize': false,
  'PlatformMenuBar': true,
  'PlatformMenuItem': false,
  'PlatformMenuItem.serialize': false,
  'PlatformMenuItemGroup': false,
  'PlatformMenuItemGroup.serialize': false,
  'PlatformProvidedMenuItem': false,
  'PlatformProvidedMenuItem.hasMenu': false,
  'PlatformProvidedMenuItemType.about': false,
  'PlatformProvidedMenuItemType.arrangeWindowsInFront': false,
  'PlatformProvidedMenuItemType.hide': false,
  'PlatformProvidedMenuItemType.hideOtherApplications': false,
  'PlatformProvidedMenuItemType.minimizeWindow': false,
  'PlatformProvidedMenuItemType.quit': false,
  'PlatformProvidedMenuItemType.servicesSubmenu': false,
  'PlatformProvidedMenuItemType.showAllApplications': false,
  'PlatformProvidedMenuItemType.startSpeaking': false,
  'PlatformProvidedMenuItemType.stopSpeaking': false,
  'PlatformProvidedMenuItemType.toggleFullScreen': false,
  'PlatformProvidedMenuItemType.values': false,
  'PlatformProvidedMenuItemType.zoomWindow': false,
  'PlatformRouteInformationProvider': false,
  'PlatformSelectableRegionContextMenu': true,
  'PlatformSelectableRegionContextMenu.attach': false,
  'PlatformSelectableRegionContextMenu.detach': false,
  'PlatformViewHitTestBehavior.opaque': false,
  'PlatformViewHitTestBehavior.translucent': false,
  'PlatformViewHitTestBehavior.transparent': false,
  'PlatformViewHitTestBehavior.values': false,
  'PlatformViewLayer': false,
  'PlatformViewLink': true,
  'PlatformViewRenderBox': false,
  'PlatformViewSurface': true,
  'PlatformViewsService.initAndroidView': false,
  'PlatformViewsService.initExpensiveAndroidView': false,
  'PlatformViewsService.initSurfaceAndroidView': false,
  'PlatformViewsService.initUiKitView': false,
  'PointMode.lines': false,
  'PointMode.points': false,
  'PointMode.polygon': false,
  'PointMode.values': false,
  'PointerAddedEvent': false,
  'PointerCancelEvent': false,
  'PointerChange.add': false,
  'PointerChange.cancel': false,
  'PointerChange.down': false,
  'PointerChange.hover': false,
  'PointerChange.move': false,
  'PointerChange.panZoomEnd': false,
  'PointerChange.panZoomStart': false,
  'PointerChange.panZoomUpdate': false,
  'PointerChange.remove': false,
  'PointerChange.up': false,
  'PointerChange.values': false,
  'PointerData': false,
  'PointerDataPacket': false,
  'PointerDeviceKind.invertedStylus': false,
  'PointerDeviceKind.mouse': false,
  'PointerDeviceKind.stylus': false,
  'PointerDeviceKind.touch': false,
  'PointerDeviceKind.trackpad': false,
  'PointerDeviceKind.unknown': false,
  'PointerDeviceKind.values': false,
  'PointerDownEvent': false,
  'PointerEnterEvent': false,
  'PointerEnterEvent.fromMouseEvent': false,
  'PointerEventResampler': false,
  'PointerExitEvent': false,
  'PointerExitEvent.fromMouseEvent': false,
  'PointerHoverEvent': false,
  'PointerMoveEvent': false,
  'PointerPanZoomEndEvent': false,
  'PointerPanZoomStartEvent': false,
  'PointerPanZoomUpdateEvent': false,
  'PointerRemovedEvent': false,
  'PointerRouter': false,
  'PointerScaleEvent': false,
  'PointerScrollEvent': false,
  'PointerScrollInertiaCancelEvent': false,
  'PointerSignalKind.none': false,
  'PointerSignalKind.scale': false,
  'PointerSignalKind.scroll': false,
  'PointerSignalKind.scrollInertiaCancel': false,
  'PointerSignalKind.unknown': false,
  'PointerSignalKind.values': false,
  'PointerSignalResolver': false,
  'PointerUpEvent': false,
  'PolynomialFit': false,
  'PopupMenuButton': true,
  'PopupMenuDivider': true,
  'PopupMenuItem': true,
  'PopupMenuPosition.over': false,
  'PopupMenuPosition.under': false,
  'PopupMenuPosition.values': false,
  'PopupMenuTheme': true,
  'PopupMenuTheme.of': false,
  'PopupMenuThemeData': false,
  'PopupMenuThemeData.lerp': false,
  'Positioned': true,
  'Positioned.directional': true,
  'Positioned.fill': true,
  'Positioned.fromRect': true,
  'Positioned.fromRelativeRect': true,
  'PositionedDirectional': true,
  'PositionedTransition': true,
  'PreferredSize': true,
  'PreviousFocusAction': false,
  'PreviousFocusIntent': false,
  'PrimaryScrollController': true,
  'PrimaryScrollController.maybeOf': false,
  'PrimaryScrollController.none': true,
  'PrimaryScrollController.of': false,
  'PrimaryScrollController.shouldInherit': false,
  'PrioritizedAction': false,
  'PrioritizedIntents': false,
  'Priority.animation': false,
  'Priority.idle': false,
  'Priority.kMaxOffset': false,
  'Priority.touch': false,
  'ProgressIndicatorTheme': true,
  'ProgressIndicatorTheme.of': false,
  'ProgressIndicatorThemeData': false,
  'ProgressIndicatorThemeData.lerp': false,
  'ProxyAnimation': false,
  'RRect.fromLTRBAndCorners': false,
  'RRect.fromLTRBR': false,
  'RRect.fromLTRBXY': false,
  'RRect.fromRectAndCorners': false,
  'RRect.fromRectAndRadius': false,
  'RRect.fromRectXY': false,
  'RRect.lerp': false,
  'RRect.zero': false,
  'RSTransform': false,
  'RSTransform.fromComponents': false,
  'RadialGradient': false,
  'RadialGradient.lerp': false,
  'Radio': true,
  'Radio.adaptive': true,
  'RadioListTile': true,
  'RadioListTile.adaptive': true,
  'RadioMenuButton': true,
  'RadioTheme': true,
  'RadioTheme.of': false,
  'RadioThemeData': false,
  'RadioThemeData.lerp': false,
  'Radius.circular': false,
  'Radius.elliptical': false,
  'Radius.lerp': false,
  'Radius.zero': false,
  'RangeLabels': false,
  'RangeMaintainingScrollPhysics': false,
  'RangeSlider': true,
  'RangeValues': false,
  'RawAutocomplete': true,
  'RawAutocomplete.defaultStringForOption': false,
  'RawAutocomplete.onFieldSubmitted': false,
  'RawChip': true,
  'RawDialogRoute': false,
  'RawFloatingCursorPoint': false,
  'RawGestureDetector': true,
  'RawImage': true,
  'RawKeyDownEvent': false,
  'RawKeyEventDataAndroid': false,
  'RawKeyEventDataAndroid.modifierAlt': false,
  'RawKeyEventDataAndroid.modifierCapsLock': false,
  'RawKeyEventDataAndroid.modifierControl': false,
  'RawKeyEventDataAndroid.modifierFunction': false,
  'RawKeyEventDataAndroid.modifierLeftAlt': false,
  'RawKeyEventDataAndroid.modifierLeftControl': false,
  'RawKeyEventDataAndroid.modifierLeftMeta': false,
  'RawKeyEventDataAndroid.modifierLeftShift': false,
  'RawKeyEventDataAndroid.modifierMeta': false,
  'RawKeyEventDataAndroid.modifierNone': false,
  'RawKeyEventDataAndroid.modifierNumLock': false,
  'RawKeyEventDataAndroid.modifierRightAlt': false,
  'RawKeyEventDataAndroid.modifierRightControl': false,
  'RawKeyEventDataAndroid.modifierRightMeta': false,
  'RawKeyEventDataAndroid.modifierRightShift': false,
  'RawKeyEventDataAndroid.modifierScrollLock': false,
  'RawKeyEventDataAndroid.modifierShift': false,
  'RawKeyEventDataAndroid.modifierSym': false,
  'RawKeyEventDataFuchsia': false,
  'RawKeyEventDataFuchsia.modifierAlt': false,
  'RawKeyEventDataFuchsia.modifierCapsLock': false,
  'RawKeyEventDataFuchsia.modifierControl': false,
  'RawKeyEventDataFuchsia.modifierLeftAlt': false,
  'RawKeyEventDataFuchsia.modifierLeftControl': false,
  'RawKeyEventDataFuchsia.modifierLeftMeta': false,
  'RawKeyEventDataFuchsia.modifierLeftShift': false,
  'RawKeyEventDataFuchsia.modifierMeta': false,
  'RawKeyEventDataFuchsia.modifierNone': false,
  'RawKeyEventDataFuchsia.modifierRightAlt': false,
  'RawKeyEventDataFuchsia.modifierRightControl': false,
  'RawKeyEventDataFuchsia.modifierRightMeta': false,
  'RawKeyEventDataFuchsia.modifierRightShift': false,
  'RawKeyEventDataFuchsia.modifierShift': false,
  'RawKeyEventDataIos': false,
  'RawKeyEventDataIos.deviceIndependentMask': false,
  'RawKeyEventDataIos.modifierCapsLock': false,
  'RawKeyEventDataIos.modifierCommand': false,
  'RawKeyEventDataIos.modifierControl': false,
  'RawKeyEventDataIos.modifierFunction': false,
  'RawKeyEventDataIos.modifierHelp': false,
  'RawKeyEventDataIos.modifierLeftCommand': false,
  'RawKeyEventDataIos.modifierLeftControl': false,
  'RawKeyEventDataIos.modifierLeftOption': false,
  'RawKeyEventDataIos.modifierLeftShift': false,
  'RawKeyEventDataIos.modifierNumericPad': false,
  'RawKeyEventDataIos.modifierOption': false,
  'RawKeyEventDataIos.modifierRightCommand': false,
  'RawKeyEventDataIos.modifierRightControl': false,
  'RawKeyEventDataIos.modifierRightOption': false,
  'RawKeyEventDataIos.modifierRightShift': false,
  'RawKeyEventDataIos.modifierShift': false,
  'RawKeyEventDataLinux': false,
  'RawKeyEventDataMacOs': false,
  'RawKeyEventDataMacOs.deviceIndependentMask': false,
  'RawKeyEventDataMacOs.modifierCapsLock': false,
  'RawKeyEventDataMacOs.modifierCommand': false,
  'RawKeyEventDataMacOs.modifierControl': false,
  'RawKeyEventDataMacOs.modifierFunction': false,
  'RawKeyEventDataMacOs.modifierHelp': false,
  'RawKeyEventDataMacOs.modifierLeftCommand': false,
  'RawKeyEventDataMacOs.modifierLeftControl': false,
  'RawKeyEventDataMacOs.modifierLeftOption': false,
  'RawKeyEventDataMacOs.modifierLeftShift': false,
  'RawKeyEventDataMacOs.modifierNumericPad': false,
  'RawKeyEventDataMacOs.modifierOption': false,
  'RawKeyEventDataMacOs.modifierRightCommand': false,
  'RawKeyEventDataMacOs.modifierRightControl': false,
  'RawKeyEventDataMacOs.modifierRightOption': false,
  'RawKeyEventDataMacOs.modifierRightShift': false,
  'RawKeyEventDataMacOs.modifierShift': false,
  'RawKeyEventDataWeb': false,
  'RawKeyEventDataWeb.modifierAlt': false,
  'RawKeyEventDataWeb.modifierCapsLock': false,
  'RawKeyEventDataWeb.modifierControl': false,
  'RawKeyEventDataWeb.modifierMeta': false,
  'RawKeyEventDataWeb.modifierNone': false,
  'RawKeyEventDataWeb.modifierNumLock': false,
  'RawKeyEventDataWeb.modifierScrollLock': false,
  'RawKeyEventDataWeb.modifierShift': false,
  'RawKeyEventDataWindows': false,
  'RawKeyEventDataWindows.modifierAlt': false,
  'RawKeyEventDataWindows.modifierCaps': false,
  'RawKeyEventDataWindows.modifierControl': false,
  'RawKeyEventDataWindows.modifierLeftAlt': false,
  'RawKeyEventDataWindows.modifierLeftControl': false,
  'RawKeyEventDataWindows.modifierLeftMeta': false,
  'RawKeyEventDataWindows.modifierLeftShift': false,
  'RawKeyEventDataWindows.modifierNumLock': false,
  'RawKeyEventDataWindows.modifierRightAlt': false,
  'RawKeyEventDataWindows.modifierRightControl': false,
  'RawKeyEventDataWindows.modifierRightMeta': false,
  'RawKeyEventDataWindows.modifierRightShift': false,
  'RawKeyEventDataWindows.modifierScrollLock': false,
  'RawKeyEventDataWindows.modifierShift': false,
  'RawKeyUpEvent': false,
  'RawKeyboard.instance': false,
  'RawKeyboardListener': true,
  'RawMagnifier': true,
  'RawMaterialButton': true,
  'RawScrollbar': true,
  'ReadBuffer': false,
  'ReadingOrderTraversalPolicy': false,
  'Rect.fromCenter': false,
  'Rect.fromCircle': false,
  'Rect.fromLTRB': false,
  'Rect.fromLTWH': false,
  'Rect.fromPoints': false,
  'Rect.largest': false,
  'Rect.lerp': false,
  'Rect.zero': false,
  'RectTween': false,
  'RectangularRangeSliderTrackShape': false,
  'RectangularRangeSliderValueIndicatorShape': false,
  'RectangularSliderTrackShape': false,
  'RectangularSliderValueIndicatorShape': false,
  'RedoTextIntent': false,
  'RefreshIndicator': true,
  'RefreshIndicator.adaptive': true,
  'RefreshIndicatorMode.armed': false,
  'RefreshIndicatorMode.done': false,
  'RefreshIndicatorMode.drag': false,
  'RefreshIndicatorMode.inactive': false,
  'RefreshIndicatorMode.refresh': false,
  'RefreshIndicatorMode.values': false,
  'RefreshIndicatorTriggerMode.anywhere': false,
  'RefreshIndicatorTriggerMode.onEdge': false,
  'RefreshIndicatorTriggerMode.values': false,
  'RefreshProgressIndicator': true,
  'RefreshProgressIndicator.defaultStrokeWidth': false,
  'RelativePositionedTransition': true,
  'RelativeRect.fill': false,
  'RelativeRect.fromDirectional': false,
  'RelativeRect.fromLTRB': false,
  'RelativeRect.fromRect': false,
  'RelativeRect.fromSize': false,
  'RelativeRect.lerp': false,
  'RelativeRectTween': false,
  'RenderAbsorbPointer': false,
  'RenderAndroidView': false,
  'RenderAnimatedOpacity': false,
  'RenderAnimatedSize': false,
  'RenderAnnotatedRegion': false,
  'RenderAspectRatio': false,
  'RenderBackdropFilter': false,
  'RenderBaseline': false,
  'RenderBlockSemantics': false,
  'RenderClipOval': false,
  'RenderClipPath': false,
  'RenderClipRRect': false,
  'RenderClipRect': false,
  'RenderComparison.identical': false,
  'RenderComparison.layout': false,
  'RenderComparison.metadata': false,
  'RenderComparison.paint': false,
  'RenderComparison.values': false,
  'RenderConstrainedBox': false,
  'RenderConstrainedOverflowBox': false,
  'RenderConstraintsTransformBox': false,
  'RenderCustomMultiChildLayoutBox': false,
  'RenderCustomPaint': false,
  'RenderCustomSingleChildLayoutBox': false,
  'RenderDecoratedBox': false,
  'RenderEditable': false,
  'RenderErrorBox': false,
  'RenderErrorBox.backgroundColor': false,
  'RenderErrorBox.minimumWidth': false,
  'RenderErrorBox.padding': false,
  'RenderErrorBox.paragraphStyle': false,
  'RenderErrorBox.textStyle': false,
  'RenderExcludeSemantics': false,
  'RenderFittedBox': false,
  'RenderFlex': false,
  'RenderFlow': false,
  'RenderFollowerLayer': false,
  'RenderFractionalTranslation': false,
  'RenderFractionallySizedOverflowBox': false,
  'RenderIgnorePointer': false,
  'RenderImage': false,
  'RenderIndexedSemantics': false,
  'RenderIndexedStack': false,
  'RenderIntrinsicHeight': false,
  'RenderIntrinsicWidth': false,
  'RenderLeaderLayer': false,
  'RenderLimitedBox': false,
  'RenderListBody': false,
  'RenderMergeSemantics': false,
  'RenderMetaData': false,
  'RenderMouseRegion': false,
  'RenderNestedScrollViewViewport': false,
  'RenderObjectToWidgetAdapter': true,
  'RenderObjectToWidgetElement': false,
  'RenderOffstage': false,
  'RenderOpacity': false,
  'RenderPadding': false,
  'RenderParagraph': false,
  'RenderPhysicalModel': false,
  'RenderPhysicalShape': false,
  'RenderPointerListener': false,
  'RenderPositionedBox': false,
  'RenderProxyBox': false,
  'RenderRepaintBoundary': false,
  'RenderRotatedBox': false,
  'RenderSemanticsAnnotations': false,
  'RenderSemanticsGestureHandler': false,
  'RenderShaderMask': false,
  'RenderShrinkWrappingViewport': false,
  'RenderSizedOverflowBox': false,
  'RenderSliverAnimatedOpacity': false,
  'RenderSliverConstrainedCrossAxis': false,
  'RenderSliverCrossAxisGroup': false,
  'RenderSliverFillRemaining': false,
  'RenderSliverFillRemainingAndOverscroll': false,
  'RenderSliverFillRemainingWithScrollable': false,
  'RenderSliverFillViewport': false,
  'RenderSliverFixedExtentList': false,
  'RenderSliverGrid': false,
  'RenderSliverIgnorePointer': false,
  'RenderSliverList': false,
  'RenderSliverOffstage': false,
  'RenderSliverOpacity': false,
  'RenderSliverOverlapAbsorber': false,
  'RenderSliverOverlapInjector': false,
  'RenderSliverPadding': false,
  'RenderSliverToBoxAdapter': false,
  'RenderStack': false,
  'RenderStack.getIntrinsicDimension': false,
  'RenderStack.layoutPositionedChild': false,
  'RenderTable': false,
  'RenderTapRegion': false,
  'RenderTapRegionSurface': false,
  'RenderTransform': false,
  'RenderUiKitView': false,
  'RenderView': false,
  'RenderViewport': false,
  'RenderViewport.excludeFromScrolling': false,
  'RenderViewport.useTwoPaneSemantics': false,
  'RenderWrap': false,
  'RenderingFlutterBinding': false,
  'RenderingFlutterBinding.ensureInitialized': false,
  'RenderingServiceExtensions.debugDisableClipLayers': false,
  'RenderingServiceExtensions.debugDisableOpacityLayers': false,
  'RenderingServiceExtensions.debugDisablePhysicalShapeLayers': false,
  'RenderingServiceExtensions.debugDumpLayerTree': false,
  'RenderingServiceExtensions.debugDumpRenderTree': false,
  'RenderingServiceExtensions.debugDumpSemanticsTreeInInverseHitTestOrder':
      false,
  'RenderingServiceExtensions.debugDumpSemanticsTreeInTraversalOrder': false,
  'RenderingServiceExtensions.debugPaint': false,
  'RenderingServiceExtensions.debugPaintBaselinesEnabled': false,
  'RenderingServiceExtensions.invertOversizedImages': false,
  'RenderingServiceExtensions.profileRenderObjectLayouts': false,
  'RenderingServiceExtensions.profileRenderObjectPaints': false,
  'RenderingServiceExtensions.repaintRainbow': false,
  'RenderingServiceExtensions.values': false,
  'ReorderableDelayedDragStartListener': true,
  'ReorderableDragStartListener': true,
  'ReorderableList': true,
  'ReorderableList.maybeOf': false,
  'ReorderableList.of': false,
  'ReorderableListView': true,
  'ReorderableListView.builder': true,
  'RepaintBoundary': true,
  'RepaintBoundary.wrap': true,
  'RepaintBoundary.wrapAll': false,
  'RepetitiveStackFrameFilter': false,
  'ReplaceTextIntent': false,
  'RequestFocusAction': false,
  'RequestFocusIntent': false,
  'ResizeImage': false,
  'ResizeImage.resizeIfNeeded': false,
  'ResizeImagePolicy.exact': false,
  'ResizeImagePolicy.fit': false,
  'ResizeImagePolicy.values': false,
  'RestorableBool': false,
  'RestorableBoolN': false,
  'RestorableCupertinoTabController': false,
  'RestorableDateTime': false,
  'RestorableDateTimeN': false,
  'RestorableDouble': false,
  'RestorableDoubleN': false,
  'RestorableEnum': false,
  'RestorableEnumN': false,
  'RestorableInt': false,
  'RestorableIntN': false,
  'RestorableNum': false,
  'RestorableNumN': false,
  'RestorableRouteFuture': false,
  'RestorableString': false,
  'RestorableStringN': false,
  'RestorableTextEditingController': false,
  'RestorableTextEditingController.fromValue': false,
  'RestorableTimeOfDay': false,
  'RestorationBucket.child': false,
  'RestorationBucket.empty': false,
  'RestorationBucket.root': false,
  'RestorationManager': false,
  'RestorationScope': true,
  'RestorationScope.maybeOf': false,
  'RestorationScope.of': false,
  'RevealedOffset': false,
  'ReverseAnimation': false,
  'ReverseTween': false,
  'RichText': true,
  'RootBackButtonDispatcher': false,
  'RootIsolateToken.instance': false,
  'RootRestorationScope': true,
  'RotatedBox': true,
  'RotationTransition': true,
  'RoundRangeSliderThumbShape': false,
  'RoundRangeSliderTickMarkShape': false,
  'RoundSliderOverlayShape': false,
  'RoundSliderThumbShape': false,
  'RoundSliderTickMarkShape': false,
  'RoundedRectRangeSliderTrackShape': false,
  'RoundedRectSliderTrackShape': false,
  'RoundedRectangleBorder': false,
  'RouteInformation': false,
  'RouteInformationReportingType.navigate': false,
  'RouteInformationReportingType.neglect': false,
  'RouteInformationReportingType.none': false,
  'RouteInformationReportingType.values': false,
  'RouteObserver': false,
  'RoutePopDisposition.bubble': false,
  'RoutePopDisposition.doNotPop': false,
  'RoutePopDisposition.pop': false,
  'RoutePopDisposition.values': false,
  'RouteSettings': false,
  'Router': true,
  'Router.maybeOf': true,
  'Router.navigate': false,
  'Router.neglect': false,
  'Router.of': true,
  'Router.withConfig': true,
  'RouterConfig': false,
  'Row': true,
  'SafeArea': true,
  'SamplingClock': false,
  'SawTooth': false,
  'Scaffold': true,
  'Scaffold.geometryOf': false,
  'Scaffold.hasDrawer': false,
  'Scaffold.maybeOf': false,
  'Scaffold.of': false,
  'ScaffoldGeometry': false,
  'ScaffoldMessenger': true,
  'ScaffoldMessenger.maybeOf': false,
  'ScaffoldMessenger.of': false,
  'ScaffoldPrelayoutGeometry': false,
  'ScaleEndDetails': false,
  'ScaleGestureRecognizer': false,
  'ScaleStartDetails': false,
  'ScaleTransition': true,
  'ScaleUpdateDetails': false,
  'SchedulerPhase.idle': false,
  'SchedulerPhase.midFrameMicrotasks': false,
  'SchedulerPhase.persistentCallbacks': false,
  'SchedulerPhase.postFrameCallbacks': false,
  'SchedulerPhase.transientCallbacks': false,
  'SchedulerPhase.values': false,
  'SchedulerServiceExtensions.timeDilation': false,
  'SchedulerServiceExtensions.values': false,
  'ScriptCategory.dense': false,
  'ScriptCategory.englishLike': false,
  'ScriptCategory.tall': false,
  'ScriptCategory.values': false,
  'ScrollAction': false,
  'ScrollAction.getDirectionalIncrement': false,
  'ScrollAwareImageProvider': false,
  'ScrollBehavior': false,
  'ScrollConfiguration': true,
  'ScrollConfiguration.of': false,
  'ScrollController': false,
  'ScrollDecelerationRate.fast': false,
  'ScrollDecelerationRate.normal': false,
  'ScrollDecelerationRate.values': false,
  'ScrollDirection.forward': false,
  'ScrollDirection.idle': false,
  'ScrollDirection.reverse': false,
  'ScrollDirection.values': false,
  'ScrollDragController': false,
  'ScrollDragController.momentumRetainStationaryDurationThreshold': false,
  'ScrollDragController.momentumRetainVelocityThresholdFactor': false,
  'ScrollDragController.motionStoppedDurationThreshold': false,
  'ScrollEndNotification': false,
  'ScrollIncrementDetails': false,
  'ScrollIncrementType.line': false,
  'ScrollIncrementType.page': false,
  'ScrollIncrementType.values': false,
  'ScrollIntent': false,
  'ScrollMetricsNotification': false,
  'ScrollNotificationObserver': true,
  'ScrollNotificationObserver.maybeOf': false,
  'ScrollNotificationObserver.of': false,
  'ScrollPhysics': false,
  'ScrollPositionAlignmentPolicy.explicit': false,
  'ScrollPositionAlignmentPolicy.keepVisibleAtEnd': false,
  'ScrollPositionAlignmentPolicy.keepVisibleAtStart': false,
  'ScrollPositionAlignmentPolicy.values': false,
  'ScrollPositionWithSingleContext': false,
  'ScrollSpringSimulation': false,
  'ScrollStartNotification': false,
  'ScrollToDocumentBoundaryIntent': false,
  'ScrollUpdateNotification': false,
  'ScrollViewKeyboardDismissBehavior.manual': false,
  'ScrollViewKeyboardDismissBehavior.onDrag': false,
  'ScrollViewKeyboardDismissBehavior.values': false,
  'Scrollable': true,
  'Scrollable.ensureVisible': false,
  'Scrollable.maybeOf': false,
  'Scrollable.of': false,
  'Scrollable.recommendDeferredLoadingForContext': false,
  'ScrollableDetails': false,
  'ScrollableDetails.horizontal': false,
  'ScrollableDetails.vertical': false,
  'Scrollbar': true,
  'ScrollbarOrientation.bottom': false,
  'ScrollbarOrientation.left': false,
  'ScrollbarOrientation.right': false,
  'ScrollbarOrientation.top': false,
  'ScrollbarOrientation.values': false,
  'ScrollbarPainter': false,
  'ScrollbarTheme': true,
  'ScrollbarTheme.of': false,
  'ScrollbarThemeData': false,
  'ScrollbarThemeData.lerp': false,
  'SearchAnchor': true,
  'SearchAnchor.bar': true,
  'SearchBar': true,
  'SearchBarTheme': true,
  'SearchBarTheme.of': false,
  'SearchBarThemeData': false,
  'SearchBarThemeData.lerp': false,
  'SearchController': false,
  'SearchViewTheme': true,
  'SearchViewTheme.of': false,
  'SearchViewThemeData': false,
  'SearchViewThemeData.lerp': false,
  'SegmentedButton': true,
  'SegmentedButtonTheme': true,
  'SegmentedButtonTheme.maybeOf': false,
  'SegmentedButtonTheme.of': false,
  'SegmentedButtonThemeData': false,
  'SegmentedButtonThemeData.lerp': false,
  'SelectAllSelectionEvent': false,
  'SelectAllTextIntent': false,
  'SelectIntent': false,
  'SelectWordSelectionEvent': false,
  'SelectableRegion': true,
  'SelectableRegion.getSelectableButtonItems': false,
  'SelectableText': true,
  'SelectableText.rich': true,
  'SelectedContent': false,
  'SelectionArea': true,
  'SelectionChangedCause.doubleTap': false,
  'SelectionChangedCause.drag': false,
  'SelectionChangedCause.forcePress': false,
  'SelectionChangedCause.keyboard': false,
  'SelectionChangedCause.longPress': false,
  'SelectionChangedCause.scribble': false,
  'SelectionChangedCause.tap': false,
  'SelectionChangedCause.toolbar': false,
  'SelectionChangedCause.values': false,
  'SelectionContainer': true,
  'SelectionContainer.disabled': true,
  'SelectionContainer.maybeOf': false,
  'SelectionEdgeUpdateEvent.forEnd': false,
  'SelectionEdgeUpdateEvent.forStart': false,
  'SelectionEventType.clear': false,
  'SelectionEventType.directionallyExtendSelection': false,
  'SelectionEventType.endEdgeUpdate': false,
  'SelectionEventType.granularlyExtendSelection': false,
  'SelectionEventType.selectAll': false,
  'SelectionEventType.selectWord': false,
  'SelectionEventType.startEdgeUpdate': false,
  'SelectionEventType.values': false,
  'SelectionExtendDirection.backward': false,
  'SelectionExtendDirection.forward': false,
  'SelectionExtendDirection.nextLine': false,
  'SelectionExtendDirection.previousLine': false,
  'SelectionExtendDirection.values': false,
  'SelectionGeometry': false,
  'SelectionOverlay': false,
  'SelectionOverlay.fadeDuration': false,
  'SelectionPoint': false,
  'SelectionRect': false,
  'SelectionRegistrarScope': true,
  'SelectionResult.end': false,
  'SelectionResult.next': false,
  'SelectionResult.none': false,
  'SelectionResult.pending': false,
  'SelectionResult.previous': false,
  'SelectionResult.values': false,
  'SelectionStatus.collapsed': false,
  'SelectionStatus.none': false,
  'SelectionStatus.uncollapsed': false,
  'SelectionStatus.values': false,
  'Semantics': true,
  'Semantics.fromProperties': true,
  'SemanticsAction.copy': false,
  'SemanticsAction.customAction': false,
  'SemanticsAction.cut': false,
  'SemanticsAction.decrease': false,
  'SemanticsAction.didGainAccessibilityFocus': false,
  'SemanticsAction.didLoseAccessibilityFocus': false,
  'SemanticsAction.dismiss': false,
  'SemanticsAction.fromIndex': false,
  'SemanticsAction.increase': false,
  'SemanticsAction.longPress': false,
  'SemanticsAction.moveCursorBackwardByCharacter': false,
  'SemanticsAction.moveCursorBackwardByWord': false,
  'SemanticsAction.moveCursorForwardByCharacter': false,
  'SemanticsAction.moveCursorForwardByWord': false,
  'SemanticsAction.paste': false,
  'SemanticsAction.scrollDown': false,
  'SemanticsAction.scrollLeft': false,
  'SemanticsAction.scrollRight': false,
  'SemanticsAction.scrollUp': false,
  'SemanticsAction.setSelection': false,
  'SemanticsAction.setText': false,
  'SemanticsAction.showOnScreen': false,
  'SemanticsAction.tap': false,
  'SemanticsAction.values': false,
  'SemanticsActionEvent': false,
  'SemanticsConfiguration': false,
  'SemanticsData': false,
  'SemanticsDebugger': true,
  'SemanticsFlag.fromIndex': false,
  'SemanticsFlag.hasCheckedState': false,
  'SemanticsFlag.hasEnabledState': false,
  'SemanticsFlag.hasImplicitScrolling': false,
  'SemanticsFlag.hasToggledState': false,
  'SemanticsFlag.isButton': false,
  'SemanticsFlag.isCheckStateMixed': false,
  'SemanticsFlag.isChecked': false,
  'SemanticsFlag.isEnabled': false,
  'SemanticsFlag.isFocusable': false,
  'SemanticsFlag.isFocused': false,
  'SemanticsFlag.isHeader': false,
  'SemanticsFlag.isHidden': false,
  'SemanticsFlag.isImage': false,
  'SemanticsFlag.isInMutuallyExclusiveGroup': false,
  'SemanticsFlag.isKeyboardKey': false,
  'SemanticsFlag.isLink': false,
  'SemanticsFlag.isLiveRegion': false,
  'SemanticsFlag.isMultiline': false,
  'SemanticsFlag.isObscured': false,
  'SemanticsFlag.isReadOnly': false,
  'SemanticsFlag.isSelected': false,
  'SemanticsFlag.isSlider': false,
  'SemanticsFlag.isTextField': false,
  'SemanticsFlag.isToggled': false,
  'SemanticsFlag.namesRoute': false,
  'SemanticsFlag.scopesRoute': false,
  'SemanticsFlag.values': false,
  'SemanticsHintOverrides': false,
  'SemanticsNode': false,
  'SemanticsNode.root': false,
  'SemanticsOwner': false,
  'SemanticsProperties': false,
  'SemanticsTag': false,
  'SerialTapCancelDetails': false,
  'SerialTapDownDetails': false,
  'SerialTapGestureRecognizer': false,
  'SerialTapUpDetails': false,
  'ServicesServiceExtensions.evict': false,
  'ServicesServiceExtensions.values': false,
  'ShaderMask': true,
  'ShaderMaskLayer': false,
  'Shadow': false,
  'Shadow.convertRadiusToSigma': false,
  'Shadow.lerp': false,
  'Shadow.lerpList': false,
  'ShapeBorderClipper': false,
  'ShapeBorderTween': false,
  'ShapeDecoration': false,
  'ShapeDecoration.fromBoxDecoration': false,
  'ShapeDecoration.lerp': false,
  'SharedAppData': true,
  'SharedAppData.getValue': false,
  'SharedAppData.setValue': false,
  'ShortcutManager': false,
  'ShortcutMapProperty': false,
  'ShortcutRegistrar': true,
  'ShortcutRegistry': false,
  'ShortcutRegistry.maybeOf': false,
  'ShortcutRegistry.of': false,
  'ShortcutSerialization.character': false,
  'ShortcutSerialization.modifier': false,
  'Shortcuts': true,
  'Shortcuts.manager': true,
  'ShowValueIndicator.always': false,
  'ShowValueIndicator.never': false,
  'ShowValueIndicator.onlyForContinuous': false,
  'ShowValueIndicator.onlyForDiscrete': false,
  'ShowValueIndicator.values': false,
  'ShrinkWrappingViewport': true,
  'SimpleDialog': true,
  'SimpleDialogOption': true,
  'SingleActivator': false,
  'SingleChildRenderObjectElement': false,
  'SingleChildScrollView': true,
  'Size': false,
  'Size.copy': false,
  'Size.fromHeight': false,
  'Size.fromRadius': false,
  'Size.fromWidth': false,
  'Size.infinite': false,
  'Size.lerp': false,
  'Size.square': false,
  'Size.zero': false,
  'SizeChangedLayoutNotification': false,
  'SizeChangedLayoutNotifier': true,
  'SizeTransition': true,
  'SizeTween': false,
  'SizedBox': true,
  'SizedBox.expand': true,
  'SizedBox.fromSize': true,
  'SizedBox.shrink': true,
  'SizedBox.square': true,
  'SizedOverflowBox': true,
  'SlideTransition': true,
  'Slider': true,
  'Slider.adaptive': true,
  'SliderInteraction.slideOnly': false,
  'SliderInteraction.slideThumb': false,
  'SliderInteraction.tapAndSlide': false,
  'SliderInteraction.tapOnly': false,
  'SliderInteraction.values': false,
  'SliderTheme': true,
  'SliderTheme.of': false,
  'SliderThemeData': false,
  'SliderThemeData.fromPrimaryColors': false,
  'SliderThemeData.lerp': false,
  'SliverAnimatedGrid': true,
  'SliverAnimatedGrid.maybeOf': false,
  'SliverAnimatedGrid.of': false,
  'SliverAnimatedList': true,
  'SliverAnimatedList.maybeOf': false,
  'SliverAnimatedList.of': false,
  'SliverAnimatedOpacity': true,
  'SliverAppBar': true,
  'SliverAppBar.large': true,
  'SliverAppBar.medium': true,
  'SliverChildBuilderDelegate': false,
  'SliverChildListDelegate': false,
  'SliverChildListDelegate.fixed': false,
  'SliverConstrainedCrossAxis': true,
  'SliverConstraints': false,
  'SliverCrossAxisExpanded': true,
  'SliverCrossAxisGroup': true,
  'SliverFadeTransition': true,
  'SliverFillRemaining': true,
  'SliverFillViewport': true,
  'SliverFixedExtentList': true,
  'SliverFixedExtentList.builder': true,
  'SliverFixedExtentList.list': true,
  'SliverGeometry': false,
  'SliverGeometry.zero': false,
  'SliverGrid': true,
  'SliverGrid.builder': true,
  'SliverGrid.count': true,
  'SliverGrid.extent': true,
  'SliverGridDelegateWithFixedCrossAxisCount': false,
  'SliverGridDelegateWithMaxCrossAxisExtent': false,
  'SliverGridGeometry': false,
  'SliverGridParentData': false,
  'SliverGridRegularTileLayout': false,
  'SliverHitTestEntry': false,
  'SliverHitTestResult': false,
  'SliverHitTestResult.wrap': false,
  'SliverIgnorePointer': true,
  'SliverLayoutBuilder': true,
  'SliverList': true,
  'SliverList.builder': true,
  'SliverList.list': true,
  'SliverList.separated': true,
  'SliverLogicalContainerParentData': false,
  'SliverLogicalParentData': false,
  'SliverMultiBoxAdaptorElement': false,
  'SliverMultiBoxAdaptorParentData': false,
  'SliverOffstage': true,
  'SliverOpacity': true,
  'SliverOverlapAbsorber': true,
  'SliverOverlapAbsorberHandle': false,
  'SliverOverlapInjector': true,
  'SliverPadding': true,
  'SliverPersistentHeader': true,
  'SliverPhysicalContainerParentData': false,
  'SliverPhysicalParentData': false,
  'SliverPrototypeExtentList': true,
  'SliverPrototypeExtentList.builder': true,
  'SliverPrototypeExtentList.list': true,
  'SliverReorderableList': true,
  'SliverReorderableList.maybeOf': false,
  'SliverReorderableList.of': false,
  'SliverSafeArea': true,
  'SliverToBoxAdapter': true,
  'SliverVisibility': true,
  'SliverVisibility.maintain': true,
  'SlottedRenderObjectElement': false,
  'SmartDashesType.disabled': false,
  'SmartDashesType.enabled': false,
  'SmartDashesType.values': false,
  'SmartQuotesType.disabled': false,
  'SmartQuotesType.enabled': false,
  'SmartQuotesType.values': false,
  'SnackBar': true,
  'SnackBar.createAnimationController': false,
  'SnackBarAction': true,
  'SnackBarBehavior.fixed': false,
  'SnackBarBehavior.floating': false,
  'SnackBarBehavior.values': false,
  'SnackBarClosedReason.action': false,
  'SnackBarClosedReason.dismiss': false,
  'SnackBarClosedReason.hide': false,
  'SnackBarClosedReason.remove': false,
  'SnackBarClosedReason.swipe': false,
  'SnackBarClosedReason.timeout': false,
  'SnackBarClosedReason.values': false,
  'SnackBarThemeData': false,
  'SnackBarThemeData.lerp': false,
  'SnapshotController': false,
  'SnapshotMode.forced': false,
  'SnapshotMode.normal': false,
  'SnapshotMode.permissive': false,
  'SnapshotMode.values': false,
  'SnapshotWidget': true,
  'Spacer': true,
  'SpellCheckConfiguration': false,
  'SpellCheckConfiguration.disabled': false,
  'SpellCheckResults': false,
  'SpellCheckSuggestionsToolbar': true,
  'SpellCheckSuggestionsToolbar.buildButtonItems': false,
  'SpellCheckSuggestionsToolbar.editableText': true,
  'SpellCheckSuggestionsToolbar.getToolbarAnchor': false,
  'SpellCheckSuggestionsToolbarLayoutDelegate': false,
  'SpellOutStringAttribute': false,
  'SpringDescription': false,
  'SpringDescription.withDampingRatio': false,
  'SpringSimulation': false,
  'SpringType.criticallyDamped': false,
  'SpringType.overDamped': false,
  'SpringType.underDamped': false,
  'SpringType.values': false,
  'Stack': true,
  'StackFit.expand': false,
  'StackFit.loose': false,
  'StackFit.passthrough': false,
  'StackFit.values': false,
  'StackFrame': false,
  'StackFrame.asynchronousSuspension': false,
  'StackFrame.fromStackString': false,
  'StackFrame.fromStackTrace': false,
  'StackFrame.fromStackTraceLine': false,
  'StackFrame.stackOverFlowElision': false,
  'StackParentData': false,
  'StadiumBorder': false,
  'StandardMessageCodec': false,
  'StandardMethodCodec': false,
  'StarBorder': false,
  'StarBorder.polygon': false,
  'StatefulBuilder': true,
  'StatefulElement': false,
  'StatelessElement': false,
  'Step': false,
  'StepState.complete': false,
  'StepState.disabled': false,
  'StepState.editing': false,
  'StepState.error': false,
  'StepState.indexed': false,
  'StepState.values': false,
  'StepTween': false,
  'Stepper': true,
  'StepperType.horizontal': false,
  'StepperType.values': false,
  'StepperType.vertical': false,
  'StreamBuilder': true,
  'StretchMode.blurBackground': false,
  'StretchMode.fadeTitle': false,
  'StretchMode.values': false,
  'StretchMode.zoomBackground': false,
  'StretchingOverscrollIndicator': true,
  'StringCodec': false,
  'StringProperty': false,
  'StrokeCap.butt': false,
  'StrokeCap.round': false,
  'StrokeCap.square': false,
  'StrokeCap.values': false,
  'StrokeJoin.bevel': false,
  'StrokeJoin.miter': false,
  'StrokeJoin.round': false,
  'StrokeJoin.values': false,
  'StrutStyle': false,
  'StrutStyle.disabled': false,
  'StrutStyle.fromTextStyle': false,
  'SubmenuButton': true,
  'SubmenuButton.styleFrom': false,
  'SuggestionSpan': false,
  'Summary': false,
  'SweepGradient': false,
  'SweepGradient.lerp': false,
  'Switch': true,
  'Switch.adaptive': true,
  'SwitchListTile': true,
  'SwitchListTile.adaptive': true,
  'SwitchTheme': true,
  'SwitchTheme.of': false,
  'SwitchThemeData': false,
  'SwitchThemeData.lerp': false,
  'SynchronousFuture': false,
  'SystemMouseCursors.alias': false,
  'SystemMouseCursors.allScroll': false,
  'SystemMouseCursors.basic': false,
  'SystemMouseCursors.cell': false,
  'SystemMouseCursors.click': false,
  'SystemMouseCursors.contextMenu': false,
  'SystemMouseCursors.copy': false,
  'SystemMouseCursors.disappearing': false,
  'SystemMouseCursors.forbidden': false,
  'SystemMouseCursors.grab': false,
  'SystemMouseCursors.grabbing': false,
  'SystemMouseCursors.help': false,
  'SystemMouseCursors.move': false,
  'SystemMouseCursors.noDrop': false,
  'SystemMouseCursors.none': false,
  'SystemMouseCursors.precise': false,
  'SystemMouseCursors.progress': false,
  'SystemMouseCursors.resizeColumn': false,
  'SystemMouseCursors.resizeDown': false,
  'SystemMouseCursors.resizeDownLeft': false,
  'SystemMouseCursors.resizeDownRight': false,
  'SystemMouseCursors.resizeLeft': false,
  'SystemMouseCursors.resizeLeftRight': false,
  'SystemMouseCursors.resizeRight': false,
  'SystemMouseCursors.resizeRow': false,
  'SystemMouseCursors.resizeUp': false,
  'SystemMouseCursors.resizeUpDown': false,
  'SystemMouseCursors.resizeUpLeft': false,
  'SystemMouseCursors.resizeUpLeftDownRight': false,
  'SystemMouseCursors.resizeUpRight': false,
  'SystemMouseCursors.resizeUpRightDownLeft': false,
  'SystemMouseCursors.text': false,
  'SystemMouseCursors.verticalText': false,
  'SystemMouseCursors.wait': false,
  'SystemMouseCursors.zoomIn': false,
  'SystemMouseCursors.zoomOut': false,
  'SystemSoundType.alert': false,
  'SystemSoundType.click': false,
  'SystemSoundType.values': false,
  'SystemUiMode.edgeToEdge': false,
  'SystemUiMode.immersive': false,
  'SystemUiMode.immersiveSticky': false,
  'SystemUiMode.leanBack': false,
  'SystemUiMode.manual': false,
  'SystemUiMode.values': false,
  'SystemUiOverlay.bottom': false,
  'SystemUiOverlay.top': false,
  'SystemUiOverlay.values': false,
  'SystemUiOverlayStyle': false,
  'SystemUiOverlayStyle.dark': false,
  'SystemUiOverlayStyle.light': false,
  'Tab': true,
  'TabAlignment.center': false,
  'TabAlignment.fill': false,
  'TabAlignment.start': false,
  'TabAlignment.startOffset': false,
  'TabAlignment.values': false,
  'TabBar': true,
  'TabBar.secondary': true,
  'TabBarIndicatorSize.label': false,
  'TabBarIndicatorSize.tab': false,
  'TabBarIndicatorSize.values': false,
  'TabBarTheme': false,
  'TabBarTheme.lerp': false,
  'TabBarTheme.of': false,
  'TabBarView': true,
  'TabController': false,
  'TabPageSelector': true,
  'TabPageSelectorIndicator': true,
  'Table': true,
  'TableBorder': false,
  'TableBorder.all': false,
  'TableBorder.lerp': false,
  'TableBorder.symmetric': false,
  'TableCell': true,
  'TableCellParentData': false,
  'TableCellVerticalAlignment.baseline': false,
  'TableCellVerticalAlignment.bottom': false,
  'TableCellVerticalAlignment.fill': false,
  'TableCellVerticalAlignment.middle': false,
  'TableCellVerticalAlignment.top': false,
  'TableCellVerticalAlignment.values': false,
  'TableRow': false,
  'TableRowInkWell': true,
  'Tangent': false,
  'Tangent.fromAngle': false,
  'TapAndHorizontalDragGestureRecognizer': false,
  'TapAndPanGestureRecognizer': false,
  'TapDownDetails': false,
  'TapDragDownDetails': false,
  'TapDragEndDetails': false,
  'TapDragStartDetails': false,
  'TapDragUpDetails': false,
  'TapDragUpdateDetails': false,
  'TapGestureRecognizer': false,
  'TapRegion': true,
  'TapRegionSurface': true,
  'TapSemanticEvent': false,
  'TapUpDetails': false,
  'TargetImageSize': false,
  'TargetPlatform.android': false,
  'TargetPlatform.fuchsia': false,
  'TargetPlatform.iOS': false,
  'TargetPlatform.linux': false,
  'TargetPlatform.macOS': false,
  'TargetPlatform.values': false,
  'TargetPlatform.windows': false,
  'Text': true,
  'Text.rich': true,
  'TextAffinity.downstream': false,
  'TextAffinity.upstream': false,
  'TextAffinity.values': false,
  'TextAlign.center': false,
  'TextAlign.end': false,
  'TextAlign.justify': false,
  'TextAlign.left': false,
  'TextAlign.right': false,
  'TextAlign.start': false,
  'TextAlign.values': false,
  'TextAlignVertical': false,
  'TextAlignVertical.bottom': false,
  'TextAlignVertical.center': false,
  'TextAlignVertical.top': false,
  'TextBaseline.alphabetic': false,
  'TextBaseline.ideographic': false,
  'TextBaseline.values': false,
  'TextBox.fromLTRBD': false,
  'TextButton': true,
  'TextButton.icon': true,
  'TextButton.styleFrom': false,
  'TextButtonTheme': true,
  'TextButtonTheme.of': false,
  'TextButtonThemeData': false,
  'TextButtonThemeData.lerp': false,
  'TextCapitalization.characters': false,
  'TextCapitalization.none': false,
  'TextCapitalization.sentences': false,
  'TextCapitalization.values': false,
  'TextCapitalization.words': false,
  'TextDecoration.combine': false,
  'TextDecoration.lineThrough': false,
  'TextDecoration.none': false,
  'TextDecoration.overline': false,
  'TextDecoration.underline': false,
  'TextDecorationStyle.dashed': false,
  'TextDecorationStyle.dotted': false,
  'TextDecorationStyle.double': false,
  'TextDecorationStyle.solid': false,
  'TextDecorationStyle.values': false,
  'TextDecorationStyle.wavy': false,
  'TextDirection.ltr': false,
  'TextDirection.rtl': false,
  'TextDirection.values': false,
  'TextEditingController': false,
  'TextEditingController.fromValue': false,
  'TextEditingDeltaDeletion': false,
  'TextEditingDeltaInsertion': false,
  'TextEditingDeltaNonTextUpdate': false,
  'TextEditingDeltaReplacement': false,
  'TextEditingValue': false,
  'TextEditingValue.empty': false,
  'TextEditingValue.fromJSON': false,
  'TextField': true,
  'TextField.inferAndroidSpellCheckConfiguration': false,
  'TextField.materialMisspelledTextStyle': false,
  'TextField.noMaxLength': false,
  'TextFieldTapRegion': true,
  'TextFormField': true,
  'TextGranularity.character': false,
  'TextGranularity.document': false,
  'TextGranularity.line': false,
  'TextGranularity.values': false,
  'TextGranularity.word': false,
  'TextHeightBehavior': false,
  'TextInput.attach': false,
  'TextInput.ensureInitialized': false,
  'TextInput.finishAutofillContext': false,
  'TextInput.registerScribbleElement': false,
  'TextInput.restorePlatformInputControl': false,
  'TextInput.scribbleClients': false,
  'TextInput.setInputControl': false,
  'TextInput.unregisterScribbleElement': false,
  'TextInput.updateEditingValue': false,
  'TextInputAction.continueAction': false,
  'TextInputAction.done': false,
  'TextInputAction.emergencyCall': false,
  'TextInputAction.go': false,
  'TextInputAction.join': false,
  'TextInputAction.newline': false,
  'TextInputAction.next': false,
  'TextInputAction.none': false,
  'TextInputAction.previous': false,
  'TextInputAction.route': false,
  'TextInputAction.search': false,
  'TextInputAction.send': false,
  'TextInputAction.unspecified': false,
  'TextInputAction.values': false,
  'TextInputConfiguration': false,
  'TextInputType.datetime': false,
  'TextInputType.emailAddress': false,
  'TextInputType.multiline': false,
  'TextInputType.name': false,
  'TextInputType.none': false,
  'TextInputType.number': false,
  'TextInputType.numberWithOptions': false,
  'TextInputType.phone': false,
  'TextInputType.streetAddress': false,
  'TextInputType.text': false,
  'TextInputType.url': false,
  'TextInputType.values': false,
  'TextInputType.visiblePassword': false,
  'TextLeadingDistribution.even': false,
  'TextLeadingDistribution.proportional': false,
  'TextLeadingDistribution.values': false,
  'TextMagnifier': true,
  'TextMagnifier.adaptiveMagnifierConfiguration': false,
  'TextMagnifierConfiguration': false,
  'TextMagnifierConfiguration.disabled': false,
  'TextOverflow.clip': false,
  'TextOverflow.ellipsis': false,
  'TextOverflow.fade': false,
  'TextOverflow.values': false,
  'TextOverflow.visible': false,
  'TextPainter': false,
  'TextPainter.computeMaxIntrinsicWidth': false,
  'TextPainter.computeWidth': false,
  'TextPainter.isHighSurrogate': false,
  'TextPainter.isLowSurrogate': false,
  'TextParentData': false,
  'TextPosition': false,
  'TextRange': false,
  'TextRange.collapsed': false,
  'TextRange.empty': false,
  'TextSelection': false,
  'TextSelection.collapsed': false,
  'TextSelection.fromPosition': false,
  'TextSelectionGestureDetector': true,
  'TextSelectionGestureDetectorBuilder': false,
  'TextSelectionHandleType.collapsed': false,
  'TextSelectionHandleType.left': false,
  'TextSelectionHandleType.right': false,
  'TextSelectionHandleType.values': false,
  'TextSelectionOverlay': false,
  'TextSelectionPoint': false,
  'TextSelectionTheme': true,
  'TextSelectionTheme.of': false,
  'TextSelectionThemeData': false,
  'TextSelectionThemeData.lerp': false,
  'TextSelectionToolbar': true,
  'TextSelectionToolbar.kHandleSize': false,
  'TextSelectionToolbar.kToolbarContentDistanceBelow': false,
  'TextSelectionToolbarAnchors': false,
  'TextSelectionToolbarAnchors.fromSelection': false,
  'TextSelectionToolbarLayoutDelegate': false,
  'TextSelectionToolbarLayoutDelegate.centerOn': false,
  'TextSelectionToolbarTextButton': true,
  'TextSelectionToolbarTextButton.getPadding': false,
  'TextSpan': false,
  'TextStyle': false,
  'TextStyle.lerp': false,
  'TextStyleTween': false,
  'TextTheme': false,
  'TextTheme.lerp': false,
  'TextTreeConfiguration': false,
  'TextTreeRenderer': false,
  'TextWidthBasis.longestLine': false,
  'TextWidthBasis.parent': false,
  'TextWidthBasis.values': false,
  'Texture': true,
  'TextureBox': false,
  'TextureLayer': false,
  'Theme': true,
  'Theme.of': false,
  'ThemeData': false,
  'ThemeData.dark': false,
  'ThemeData.estimateBrightnessForColor': false,
  'ThemeData.fallback': false,
  'ThemeData.from': false,
  'ThemeData.lerp': false,
  'ThemeData.light': false,
  'ThemeData.localize': false,
  'ThemeData.raw': false,
  'ThemeDataTween': false,
  'ThemeMode.dark': false,
  'ThemeMode.light': false,
  'ThemeMode.system': false,
  'ThemeMode.values': false,
  'ThreePointCubic': false,
  'Threshold': false,
  'Thumb.end': false,
  'Thumb.start': false,
  'Thumb.values': false,
  'Ticker': false,
  'TickerCanceled': false,
  'TickerFuture.complete': false,
  'TickerMode': true,
  'TickerMode.getNotifier': false,
  'TickerMode.of': false,
  'TileMode.clamp': false,
  'TileMode.decal': false,
  'TileMode.mirror': false,
  'TileMode.repeated': false,
  'TileMode.values': false,
  'TimeOfDay': false,
  'TimeOfDay.fromDateTime': false,
  'TimeOfDay.hoursPerDay': false,
  'TimeOfDay.hoursPerPeriod': false,
  'TimeOfDay.minutesPerHour': false,
  'TimeOfDay.now': false,
  'TimeOfDayFormat.HH_colon_mm': false,
  'TimeOfDayFormat.HH_dot_mm': false,
  'TimeOfDayFormat.H_colon_mm': false,
  'TimeOfDayFormat.a_space_h_colon_mm': false,
  'TimeOfDayFormat.frenchCanadian': false,
  'TimeOfDayFormat.h_colon_mm_space_a': false,
  'TimeOfDayFormat.values': false,
  'TimePickerDialog': true,
  'TimePickerEntryMode.dial': false,
  'TimePickerEntryMode.dialOnly': false,
  'TimePickerEntryMode.input': false,
  'TimePickerEntryMode.inputOnly': false,
  'TimePickerEntryMode.values': false,
  'TimePickerTheme': true,
  'TimePickerTheme.of': false,
  'TimePickerThemeData': false,
  'TimePickerThemeData.lerp': false,
  'Title': true,
  'ToggleButtons': true,
  'ToggleButtonsTheme': true,
  'ToggleButtonsTheme.of': false,
  'ToggleButtonsThemeData': false,
  'ToggleButtonsThemeData.lerp': false,
  'Tolerance': false,
  'Tolerance.defaultTolerance': false,
  'ToolbarItemsParentData': false,
  'Tooltip': true,
  'Tooltip.dismissAllToolTips': false,
  'TooltipSemanticsEvent': false,
  'TooltipTheme': true,
  'TooltipTheme.of': false,
  'TooltipThemeData': false,
  'TooltipThemeData.lerp': false,
  'TooltipTriggerMode.longPress': false,
  'TooltipTriggerMode.manual': false,
  'TooltipTriggerMode.tap': false,
  'TooltipTriggerMode.values': false,
  'TooltipVisibility': true,
  'TooltipVisibility.of': false,
  'TrackingScrollController': false,
  'TrainHoppingAnimation': false,
  'Transform': true,
  'Transform.flip': true,
  'Transform.rotate': true,
  'Transform.scale': true,
  'Transform.translate': true,
  'TransformLayer': false,
  'TransformProperty': false,
  'TransformationController': false,
  'TransposeCharactersIntent': false,
  'TraversalDirection.down': false,
  'TraversalDirection.left': false,
  'TraversalDirection.right': false,
  'TraversalDirection.up': false,
  'TraversalDirection.values': false,
  'TraversalEdgeBehavior.closedLoop': false,
  'TraversalEdgeBehavior.leaveFlutterView': false,
  'TraversalEdgeBehavior.values': false,
  'Tween': false,
  'TweenAnimationBuilder': true,
  'TweenSequence': false,
  'TweenSequenceItem': false,
  'Typography': false,
  'Typography.blackCupertino': false,
  'Typography.blackHelsinki': false,
  'Typography.blackMountainView': false,
  'Typography.blackRedmond': false,
  'Typography.blackRedwoodCity': false,
  'Typography.dense2014': false,
  'Typography.dense2018': false,
  'Typography.dense2021': false,
  'Typography.englishLike2014': false,
  'Typography.englishLike2018': false,
  'Typography.englishLike2021': false,
  'Typography.lerp': false,
  'Typography.material2014': false,
  'Typography.material2018': false,
  'Typography.material2021': false,
  'Typography.tall2014': false,
  'Typography.tall2018': false,
  'Typography.tall2021': false,
  'Typography.whiteCupertino': false,
  'Typography.whiteHelsinki': false,
  'Typography.whiteMountainView': false,
  'Typography.whiteRedmond': false,
  'Typography.whiteRedwoodCity': false,
  'UiKitView': true,
  'UnconstrainedBox': true,
  'UnderlineInputBorder': false,
  'UnderlineTabIndicator': false,
  'UndoDirection.redo': false,
  'UndoDirection.undo': false,
  'UndoDirection.values': false,
  'UndoHistory': true,
  'UndoHistoryController': false,
  'UndoHistoryValue': false,
  'UndoHistoryValue.empty': false,
  'UndoManager.client': false,
  'UndoManager.setUndoState': false,
  'UndoTextIntent': false,
  'UnfocusDisposition.previouslyFocusedChild': false,
  'UnfocusDisposition.scope': false,
  'UnfocusDisposition.values': false,
  'UniqueKey': false,
  'UnmanagedRestorationScope': true,
  'UpdateSelectionIntent': false,
  'UserAccountsDrawerHeader': true,
  'UserScrollNotification': false,
  'ValueKey': false,
  'ValueListenableBuilder': true,
  'ValueNotifier': false,
  'Velocity': false,
  'Velocity.zero': false,
  'VelocityEstimate': false,
  'VelocityTracker.withKind': false,
  'VertexMode.triangleFan': false,
  'VertexMode.triangleStrip': false,
  'VertexMode.triangles': false,
  'VertexMode.values': false,
  'VerticalDirection.down': false,
  'VerticalDirection.up': false,
  'VerticalDirection.values': false,
  'VerticalDivider': true,
  'VerticalDragGestureRecognizer': false,
  'VerticalMultiDragGestureRecognizer': false,
  'Vertices': false,
  'Vertices.raw': false,
  'View': true,
  'View.maybeOf': false,
  'View.of': false,
  'ViewConfiguration': false,
  'ViewPadding.zero': false,
  'Viewport': true,
  'Viewport.getDefaultCrossAxisDirection': false,
  'Visibility': true,
  'Visibility.maintain': true,
  'Visibility.of': false,
  'VisualDensity': false,
  'VisualDensity.adaptivePlatformDensity': false,
  'VisualDensity.comfortable': false,
  'VisualDensity.compact': false,
  'VisualDensity.defaultDensityForPlatform': false,
  'VisualDensity.lerp': false,
  'VisualDensity.maximumDensity': false,
  'VisualDensity.minimumDensity': false,
  'VisualDensity.standard': false,
  'VoidCallbackAction': false,
  'VoidCallbackIntent': false,
  'WidgetInspectorServiceExtensions.addPubRootDirectories': false,
  'WidgetInspectorServiceExtensions.disposeAllGroups': false,
  'WidgetInspectorServiceExtensions.disposeGroup': false,
  'WidgetInspectorServiceExtensions.disposeId': false,
  'WidgetInspectorServiceExtensions.getChildren': false,
  'WidgetInspectorServiceExtensions.getChildrenDetailsSubtree': false,
  'WidgetInspectorServiceExtensions.getChildrenSummaryTree': false,
  'WidgetInspectorServiceExtensions.getDetailsSubtree': false,
  'WidgetInspectorServiceExtensions.getLayoutExplorerNode': false,
  'WidgetInspectorServiceExtensions.getParentChain': false,
  'WidgetInspectorServiceExtensions.getProperties': false,
  'WidgetInspectorServiceExtensions.getPubRootDirectories': false,
  'WidgetInspectorServiceExtensions.getRootWidget': false,
  'WidgetInspectorServiceExtensions.getRootWidgetSummaryTree': false,
  'WidgetInspectorServiceExtensions.getRootWidgetSummaryTreeWithPreviews':
      false,
  'WidgetInspectorServiceExtensions.getSelectedSummaryWidget': false,
  'WidgetInspectorServiceExtensions.getSelectedWidget': false,
  'WidgetInspectorServiceExtensions.isWidgetCreationTracked': false,
  'WidgetInspectorServiceExtensions.isWidgetTreeReady': false,
  'WidgetInspectorServiceExtensions.removePubRootDirectories': false,
  'WidgetInspectorServiceExtensions.screenshot': false,
  'WidgetInspectorServiceExtensions.setFlexFactor': false,
  'WidgetInspectorServiceExtensions.setFlexFit': false,
  'WidgetInspectorServiceExtensions.setFlexProperties': false,
  'WidgetInspectorServiceExtensions.setSelectionById': false,
  'WidgetInspectorServiceExtensions.show': false,
  'WidgetInspectorServiceExtensions.structuredErrors': false,
  'WidgetInspectorServiceExtensions.trackRebuildDirtyWidgets': false,
  'WidgetInspectorServiceExtensions.trackRepaintWidgets': false,
  'WidgetInspectorServiceExtensions.values': false,
  'WidgetOrderTraversalPolicy': false,
  'WidgetSpan': false,
  'WidgetToRenderBoxAdapter': true,
  'WidgetsApp': true,
  'WidgetsApp.debugAllowBannerOverride': false,
  'WidgetsApp.debugShowWidgetInspectorOverride': false,
  'WidgetsApp.defaultActions': false,
  'WidgetsApp.defaultShortcuts': false,
  'WidgetsApp.router': true,
  'WidgetsApp.showPerformanceOverlayOverride': false,
  'WidgetsFlutterBinding': false,
  'WidgetsFlutterBinding.ensureInitialized': false,
  'WidgetsServiceExtensions.debugAllowBanner': false,
  'WidgetsServiceExtensions.debugDumpApp': false,
  'WidgetsServiceExtensions.debugDumpFocusTree': false,
  'WidgetsServiceExtensions.didSendFirstFrameEvent': false,
  'WidgetsServiceExtensions.didSendFirstFrameRasterizedEvent': false,
  'WidgetsServiceExtensions.fastReassemble': false,
  'WidgetsServiceExtensions.profileUserWidgetBuilds': false,
  'WidgetsServiceExtensions.profileWidgetBuilds': false,
  'WidgetsServiceExtensions.showPerformanceOverlay': false,
  'WidgetsServiceExtensions.values': false,
  'WillPopScope': true,
  'Wrap': true,
  'WrapAlignment.center': false,
  'WrapAlignment.end': false,
  'WrapAlignment.spaceAround': false,
  'WrapAlignment.spaceBetween': false,
  'WrapAlignment.spaceEvenly': false,
  'WrapAlignment.start': false,
  'WrapAlignment.values': false,
  'WrapCrossAlignment.center': false,
  'WrapCrossAlignment.end': false,
  'WrapCrossAlignment.start': false,
  'WrapCrossAlignment.values': false,
  'WrapParentData': false,
  'WriteBuffer': false,
  'YearPicker': true,
  'ZoomPageTransitionsBuilder': false,
};
